//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 lightMeshBuffer[1];
.global .align 4 .u32 lightMeshBufferSize;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightPointSize;
.global .align 4 .b8 lightColor[12];
.global .align 1 .b8 rnd_seeds[1];
.global .align 4 .u32 samples;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19lightMeshBufferSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightPointSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19lightMeshBufferSizeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightPointSizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19lightMeshBufferSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightPointSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightPointSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightPointSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[44];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<149>;
	.reg .b16 	%rs<158>;
	.reg .f32 	%f<1254>;
	.reg .b32 	%r<412>;
	.reg .b64 	%rd<319>;


	mov.u64 	%rd318, __local_depot0;
	cvta.local.u64 	%SP, %rd318;
	ld.global.u32 	%r1, [lightMeshBufferSize];
	abs.s32 	%r2, %r1;
	ld.global.u32 	%r3, [samples];
	shl.b32 	%r4, %r3, 1;
	ld.global.v2.u32 	{%r102, %r103}, [pixelID];
	cvt.u64.u32	%rd23, %r102;
	cvt.u64.u32	%rd24, %r103;
	mov.u64 	%rd27, uvnormal;
	cvta.global.u64 	%rd22, %rd27;
	mov.u32 	%r100, 2;
	mov.u32 	%r101, 4;
	mov.u64 	%rd26, 0;
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r100, %r101, %rd23, %rd24, %rd26, %rd26);
	// inline asm
	ld.u32 	%r5, [%rd21];
	shr.u32 	%r106, %r5, 16;
	cvt.u16.u32	%rs1, %r106;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r5;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p7, %rs9, 0;
	mov.f32 	%f1115, 0f00000000;
	mov.f32 	%f1116, %f1115;
	mov.f32 	%f1117, %f1115;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs10, [%rd21+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f335, %rs12;
	div.rn.f32 	%f336, %f335, 0f437F0000;
	fma.rn.f32 	%f337, %f336, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f338, %rs10;
	div.rn.f32 	%f339, %f338, 0f437F0000;
	fma.rn.f32 	%f340, %f339, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f341, %rs7;
	div.rn.f32 	%f342, %f341, 0f437F0000;
	fma.rn.f32 	%f343, %f342, 0f40000000, 0fBF800000;
	mul.f32 	%f344, %f340, %f340;
	fma.rn.f32 	%f345, %f337, %f337, %f344;
	fma.rn.f32 	%f346, %f343, %f343, %f345;
	sqrt.rn.f32 	%f347, %f346;
	rcp.rn.f32 	%f348, %f347;
	mul.f32 	%f1115, %f337, %f348;
	mul.f32 	%f1116, %f340, %f348;
	mul.f32 	%f1117, %f343, %f348;

BB0_2:
	ld.global.v2.u32 	{%r107, %r108}, [pixelID];
	ld.global.v2.u32 	{%r110, %r111}, [tileInfo];
	add.s32 	%r6, %r107, %r110;
	add.s32 	%r7, %r108, %r111;
	setp.eq.f32	%p8, %f1116, 0f00000000;
	setp.eq.f32	%p9, %f1115, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f1117, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_139;
	bra.uni 	BB0_3;

BB0_139:
	ld.global.u32 	%r411, [imageEnabled];
	and.b32  	%r336, %r411, 1;
	setp.eq.b32	%p140, %r336, 1;
	@!%p140 bra 	BB0_141;
	bra.uni 	BB0_140;

BB0_140:
	cvt.u64.u32	%rd196, %r6;
	cvt.u64.u32	%rd197, %r7;
	mov.u64 	%rd200, image;
	cvta.global.u64 	%rd195, %rd200;
	mov.u64 	%rd199, 0;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r100, %r101, %rd196, %rd197, %rd199, %rd199);
	// inline asm
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd194], {%rs90, %rs90, %rs90, %rs90};
	ld.global.u32 	%r411, [imageEnabled];

BB0_141:
	and.b32  	%r339, %r411, 8;
	setp.eq.s32	%p141, %r339, 0;
	@%p141 bra 	BB0_143;

	cvt.u64.u32	%rd204, %r7;
	cvt.u64.u32	%rd203, %r6;
	mov.u64 	%rd207, image_Mask;
	cvta.global.u64 	%rd202, %rd207;
	mov.u64 	%rd206, 0;
	// inline asm
	call (%rd201), _rt_buffer_get_64, (%rd202, %r100, %r100, %rd203, %rd204, %rd206, %rd206);
	// inline asm
	mov.f32 	%f1072, 0f00000000;
	cvt.rzi.u32.f32	%r342, %f1072;
	cvt.u16.u32	%rs91, %r342;
	mov.u16 	%rs92, 0;
	st.v2.u8 	[%rd201], {%rs91, %rs92};
	ld.global.u32 	%r411, [imageEnabled];

BB0_143:
	cvt.u64.u32	%rd19, %r6;
	cvt.u64.u32	%rd20, %r7;
	and.b32  	%r343, %r411, 4;
	setp.eq.s32	%p142, %r343, 0;
	@%p142 bra 	BB0_147;

	ld.global.u32 	%r344, [additive];
	setp.eq.s32	%p143, %r344, 0;
	@%p143 bra 	BB0_146;

	mov.u64 	%rd220, image_HDR;
	cvta.global.u64 	%rd209, %rd220;
	mov.u32 	%r348, 8;
	mov.u64 	%rd219, 0;
	// inline asm
	call (%rd208), _rt_buffer_get_64, (%rd209, %r100, %r348, %rd19, %rd20, %rd219, %rd219);
	// inline asm
	ld.v4.u16 	{%rs99, %rs100, %rs101, %rs102}, [%rd208];
	// inline asm
	{  cvt.f32.f16 %f1073, %rs99;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1074, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1075, %rs101;}

	// inline asm
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd209, %r100, %r348, %rd19, %rd20, %rd219, %rd219);
	// inline asm
	add.f32 	%f1076, %f1073, 0f00000000;
	add.f32 	%f1077, %f1074, 0f00000000;
	add.f32 	%f1078, %f1075, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f1078;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f1077;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs96, %f1076;}

	// inline asm
	mov.u16 	%rs103, 0;
	st.v4.u16 	[%rd214], {%rs96, %rs97, %rs98, %rs103};
	bra.uni 	BB0_147;

BB0_3:
	ld.global.v2.u32 	{%r120, %r121}, [pixelID];
	cvt.u64.u32	%rd30, %r120;
	cvt.u64.u32	%rd31, %r121;
	mov.u64 	%rd40, uvpos;
	cvta.global.u64 	%rd29, %rd40;
	mov.u32 	%r116, 12;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r100, %r116, %rd30, %rd31, %rd26, %rd26);
	// inline asm
	ld.f32 	%f9, [%rd28+8];
	ld.f32 	%f8, [%rd28+4];
	ld.f32 	%f7, [%rd28];
	mul.f32 	%f365, %f7, 0f3456BF95;
	mul.f32 	%f366, %f8, 0f3456BF95;
	mul.f32 	%f367, %f9, 0f3456BF95;
	abs.f32 	%f368, %f1115;
	div.rn.f32 	%f369, %f365, %f368;
	abs.f32 	%f370, %f1116;
	div.rn.f32 	%f371, %f366, %f370;
	abs.f32 	%f372, %f1117;
	div.rn.f32 	%f373, %f367, %f372;
	abs.f32 	%f374, %f369;
	abs.f32 	%f375, %f371;
	abs.f32 	%f376, %f373;
	mov.f32 	%f377, 0f38D1B717;
	max.f32 	%f378, %f374, %f377;
	max.f32 	%f379, %f375, %f377;
	max.f32 	%f380, %f376, %f377;
	fma.rn.f32 	%f10, %f1115, %f378, %f7;
	fma.rn.f32 	%f11, %f1116, %f379, %f8;
	fma.rn.f32 	%f12, %f1117, %f380, %f9;
	ld.global.v2.u32 	{%r124, %r125}, [pixelID];
	cvt.u64.u32	%rd36, %r124;
	cvt.u64.u32	%rd37, %r125;
	mov.u64 	%rd41, rnd_seeds;
	cvta.global.u64 	%rd35, %rd41;
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd35, %r100, %r101, %rd36, %rd37, %rd26, %rd26);
	// inline asm
	ld.u32 	%r128, [%rd34];
	mad.lo.s32 	%r8, %r128, 1664525, 1013904223;
	mov.pred 	%p13, 0;
	mov.f32 	%f18, 0f00000000;
	mov.u32 	%r383, 0;
	setp.lt.s32	%p14, %r2, 1;
	@%p14 bra 	BB0_4;

	ld.global.f32 	%f13, [lightPointSize];
	mul.f32 	%f14, %f10, 0f3456BF95;
	mul.f32 	%f15, %f11, 0f3456BF95;
	mul.f32 	%f16, %f12, 0f3456BF95;
	and.b32  	%r130, %r8, 16777215;
	cvt.rn.f32.u32	%f397, %r130;
	mul.f32 	%f398, %f397, 0fB3800000;
	fma.rn.f32 	%f17, %f398, 0f3F333333, 0f3F800000;
	mov.f32 	%f18, 0f00000000;
	mov.u32 	%r383, 0;
	abs.f32 	%f521, %f15;
	abs.f32 	%f522, %f14;
	max.f32 	%f523, %f522, %f521;
	abs.f32 	%f524, %f16;
	max.f32 	%f525, %f523, %f524;
	mov.f32 	%f19, %f18;
	mov.f32 	%f20, %f18;
	mov.f32 	%f21, %f18;
	mov.f32 	%f22, %f18;
	mov.f32 	%f23, %f18;
	mov.f32 	%f24, %f18;
	mov.f32 	%f25, %f18;
	mov.f32 	%f26, %f18;
	mov.f32 	%f27, %f18;
	mov.f32 	%f28, %f18;
	mov.f32 	%f29, %f18;
	mov.f32 	%f30, %f18;
	mov.f32 	%f31, %f18;
	mov.f32 	%f32, %f18;
	mov.f32 	%f33, %f18;

BB0_6:
	mul.lo.s32 	%r133, %r383, 3;
	cvt.s64.s32	%rd44, %r133;
	mov.u64 	%rd48, lightMeshBuffer;
	cvta.global.u64 	%rd43, %rd48;
	mov.u32 	%r131, 1;
	mov.u64 	%rd47, 0;
	// inline asm
	call (%rd42), _rt_buffer_get_64, (%rd43, %r131, %r116, %rd44, %rd47, %rd47, %rd47);
	// inline asm
	ld.f32 	%f399, [%rd42];
	sub.f32 	%f400, %f399, %f7;
	ld.f32 	%f401, [%rd42+4];
	sub.f32 	%f402, %f401, %f8;
	ld.f32 	%f403, [%rd42+8];
	sub.f32 	%f404, %f403, %f9;
	mul.f32 	%f405, %f402, %f402;
	fma.rn.f32 	%f406, %f400, %f400, %f405;
	fma.rn.f32 	%f407, %f404, %f404, %f406;
	sqrt.rn.f32 	%f34, %f407;
	rcp.rn.f32 	%f408, %f34;
	mul.f32 	%f35, %f400, %f408;
	mul.f32 	%f36, %f402, %f408;
	mul.f32 	%f37, %f404, %f408;
	mul.f32 	%f409, %f34, %f34;
	mul.f32 	%f410, %f409, 0f40C90FDB;
	div.rn.f32 	%f411, %f13, %f410;
	add.f32 	%f38, %f411, %f411;
	setp.gt.f32	%p16, %f38, %f17;
	setp.ne.s32	%p17, %r3, 0;
	and.pred  	%p18, %p17, %p16;
	mov.pred 	%p148, -1;
	@%p18 bra 	BB0_22;

	ld.global.f32 	%f414, [lightInvCutoff];
	mul.f32 	%f39, %f34, %f414;
	mov.f32 	%f418, 0f40800000;
	abs.f32 	%f41, %f39;
	setp.lt.f32	%p19, %f41, 0f00800000;
	mul.f32 	%f420, %f41, 0f4B800000;
	selp.f32	%f421, 0fC3170000, 0fC2FE0000, %p19;
	selp.f32	%f422, %f420, %f41, %p19;
	mov.b32 	 %r134, %f422;
	and.b32  	%r135, %r134, 8388607;
	or.b32  	%r136, %r135, 1065353216;
	mov.b32 	 %f423, %r136;
	shr.u32 	%r137, %r134, 23;
	cvt.rn.f32.u32	%f424, %r137;
	add.f32 	%f425, %f421, %f424;
	setp.gt.f32	%p20, %f423, 0f3FB504F3;
	mul.f32 	%f426, %f423, 0f3F000000;
	add.f32 	%f427, %f425, 0f3F800000;
	selp.f32	%f428, %f426, %f423, %p20;
	selp.f32	%f429, %f427, %f425, %p20;
	add.f32 	%f430, %f428, 0fBF800000;
	add.f32 	%f413, %f428, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f412,%f413;
	// inline asm
	add.f32 	%f431, %f430, %f430;
	mul.f32 	%f432, %f412, %f431;
	mul.f32 	%f433, %f432, %f432;
	mov.f32 	%f434, 0f3C4CAF63;
	mov.f32 	%f435, 0f3B18F0FE;
	fma.rn.f32 	%f436, %f435, %f433, %f434;
	mov.f32 	%f437, 0f3DAAAABD;
	fma.rn.f32 	%f438, %f436, %f433, %f437;
	mul.rn.f32 	%f439, %f438, %f433;
	mul.rn.f32 	%f440, %f439, %f432;
	sub.f32 	%f441, %f430, %f432;
	neg.f32 	%f442, %f432;
	add.f32 	%f443, %f441, %f441;
	fma.rn.f32 	%f444, %f442, %f430, %f443;
	mul.rn.f32 	%f445, %f412, %f444;
	add.f32 	%f446, %f440, %f432;
	sub.f32 	%f447, %f432, %f446;
	add.f32 	%f448, %f440, %f447;
	add.f32 	%f449, %f445, %f448;
	add.f32 	%f450, %f446, %f449;
	sub.f32 	%f451, %f446, %f450;
	add.f32 	%f452, %f449, %f451;
	mov.f32 	%f453, 0f3F317200;
	mul.rn.f32 	%f454, %f429, %f453;
	mov.f32 	%f455, 0f35BFBE8E;
	mul.rn.f32 	%f456, %f429, %f455;
	add.f32 	%f457, %f454, %f450;
	sub.f32 	%f458, %f454, %f457;
	add.f32 	%f459, %f450, %f458;
	add.f32 	%f460, %f452, %f459;
	add.f32 	%f461, %f456, %f460;
	add.f32 	%f462, %f457, %f461;
	sub.f32 	%f463, %f457, %f462;
	add.f32 	%f464, %f461, %f463;
	mul.rn.f32 	%f465, %f418, %f462;
	neg.f32 	%f466, %f465;
	fma.rn.f32 	%f467, %f418, %f462, %f466;
	fma.rn.f32 	%f468, %f418, %f464, %f467;
	mov.f32 	%f469, 0f00000000;
	fma.rn.f32 	%f470, %f469, %f462, %f468;
	add.rn.f32 	%f471, %f465, %f470;
	neg.f32 	%f472, %f471;
	add.rn.f32 	%f473, %f465, %f472;
	add.rn.f32 	%f474, %f473, %f470;
	mov.b32 	 %r138, %f471;
	setp.eq.s32	%p21, %r138, 1118925336;
	add.s32 	%r139, %r138, -1;
	mov.b32 	 %f475, %r139;
	add.f32 	%f476, %f474, 0f37000000;
	selp.f32	%f477, %f475, %f471, %p21;
	selp.f32	%f42, %f476, %f474, %p21;
	mul.f32 	%f478, %f477, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f479, %f478;
	mov.f32 	%f480, 0fBF317200;
	fma.rn.f32 	%f481, %f479, %f480, %f477;
	mov.f32 	%f482, 0fB5BFBE8E;
	fma.rn.f32 	%f483, %f479, %f482, %f481;
	mul.f32 	%f484, %f483, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f485, %f484;
	add.f32 	%f486, %f479, 0f00000000;
	ex2.approx.f32 	%f487, %f486;
	mul.f32 	%f488, %f485, %f487;
	setp.lt.f32	%p22, %f477, 0fC2D20000;
	selp.f32	%f489, 0f00000000, %f488, %p22;
	setp.gt.f32	%p23, %f477, 0f42D20000;
	selp.f32	%f1134, 0f7F800000, %f489, %p23;
	setp.eq.f32	%p24, %f1134, 0f7F800000;
	@%p24 bra 	BB0_9;

	fma.rn.f32 	%f1134, %f1134, %f42, %f1134;

BB0_9:
	mov.f32 	%f1113, 0f40000000;
	cvt.rzi.f32.f32	%f1112, %f1113;
	add.f32 	%f1111, %f1112, %f1112;
	mov.f32 	%f1110, 0f40800000;
	sub.f32 	%f1109, %f1110, %f1111;
	abs.f32 	%f1108, %f1109;
	setp.lt.f32	%p25, %f39, 0f00000000;
	setp.eq.f32	%p26, %f1108, 0f3F800000;
	and.pred  	%p1, %p25, %p26;
	mov.b32 	 %r140, %f1134;
	xor.b32  	%r141, %r140, -2147483648;
	mov.b32 	 %f490, %r141;
	selp.f32	%f1136, %f490, %f1134, %p1;
	setp.eq.f32	%p27, %f39, 0f00000000;
	@%p27 bra 	BB0_12;
	bra.uni 	BB0_10;

BB0_12:
	add.f32 	%f493, %f39, %f39;
	selp.f32	%f1136, %f493, 0f00000000, %p26;
	bra.uni 	BB0_13;

BB0_10:
	setp.geu.f32	%p28, %f39, 0f00000000;
	@%p28 bra 	BB0_13;

	mov.f32 	%f1114, 0f40800000;
	cvt.rzi.f32.f32	%f492, %f1114;
	setp.neu.f32	%p29, %f492, 0f40800000;
	selp.f32	%f1136, 0f7FFFFFFF, %f1136, %p29;

BB0_13:
	add.f32 	%f494, %f41, 0f40800000;
	mov.b32 	 %r142, %f494;
	setp.lt.s32	%p31, %r142, 2139095040;
	@%p31 bra 	BB0_18;

	setp.gtu.f32	%p32, %f41, 0f7F800000;
	@%p32 bra 	BB0_17;
	bra.uni 	BB0_15;

BB0_17:
	add.f32 	%f1136, %f39, 0f40800000;
	bra.uni 	BB0_18;

BB0_15:
	setp.neu.f32	%p33, %f41, 0f7F800000;
	@%p33 bra 	BB0_18;

	selp.f32	%f1136, 0fFF800000, 0f7F800000, %p1;

BB0_18:
	mov.u64 	%rd310, 0;
	mov.u32 	%r379, 1;
	mov.u64 	%rd309, lightMeshBuffer;
	cvta.global.u64 	%rd308, %rd309;
	mov.f32 	%f495, 0f3F800000;
	sub.f32 	%f496, %f495, %f1136;
	setp.eq.f32	%p34, %f39, 0f3F800000;
	selp.f32	%f497, 0f00000000, %f496, %p34;
	cvt.sat.f32.f32	%f498, %f497;
	mul.f32 	%f499, %f38, %f498;
	mad.lo.s32 	%r145, %r383, 3, 1;
	cvt.s64.s32	%rd51, %r145;
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd308, %r379, %r116, %rd51, %rd310, %rd310, %rd310);
	// inline asm
	ld.f32 	%f500, [%rd49];
	mul.f32 	%f501, %f35, %f500;
	ld.f32 	%f502, [%rd49+4];
	mul.f32 	%f503, %f36, %f502;
	neg.f32 	%f504, %f503;
	sub.f32 	%f505, %f504, %f501;
	ld.f32 	%f506, [%rd49+8];
	mul.f32 	%f507, %f37, %f506;
	sub.f32 	%f508, %f505, %f507;
	cvt.sat.f32.f32	%f509, %f508;
	mul.f32 	%f53, %f499, %f509;
	mul.f32 	%f510, %f1116, %f36;
	fma.rn.f32 	%f511, %f1115, %f35, %f510;
	fma.rn.f32 	%f54, %f1117, %f37, %f511;
	setp.leu.f32	%p35, %f53, 0f3727C5AC;
	@%p35 bra 	BB0_20;

	mov.u64 	%rd313, 0;
	mov.u32 	%r381, 1;
	mov.u64 	%rd312, lightMeshBuffer;
	cvta.global.u64 	%rd311, %rd312;
	cvt.sat.f32.f32	%f520, %f54;
	add.u64 	%rd56, %SP, 12;
	cvta.to.local.u64 	%rd63, %rd56;
	max.f32 	%f518, %f525, %f377;
	sub.f32 	%f519, %f34, %f518;
	mov.u32 	%r151, 1065353216;
	st.local.u32 	[%rd63], %r151;
	ld.global.u32 	%r146, [root];
	// inline asm
	call _rt_trace_64, (%r146, %f10, %f11, %f12, %f35, %f36, %f37, %r381, %f518, %f519, %rd56, %r101);
	// inline asm
	mad.lo.s32 	%r152, %r383, 3, 2;
	cvt.s64.s32	%rd59, %r152;
	// inline asm
	call (%rd57), _rt_buffer_get_64, (%rd311, %r381, %r116, %rd59, %rd313, %rd313, %rd313);
	// inline asm
	ld.f32 	%f527, [%rd57];
	ld.local.f32 	%f528, [%rd63];
	mul.f32 	%f529, %f528, %f527;
	ld.f32 	%f530, [%rd57+4];
	mul.f32 	%f531, %f528, %f530;
	ld.f32 	%f532, [%rd57+8];
	mul.f32 	%f533, %f528, %f532;
	mul.f32 	%f534, %f53, %f529;
	mul.f32 	%f535, %f53, %f531;
	mul.f32 	%f536, %f53, %f533;
	fma.rn.f32 	%f21, %f520, %f534, %f21;
	fma.rn.f32 	%f20, %f520, %f535, %f20;
	fma.rn.f32 	%f19, %f520, %f536, %f19;
	fma.rn.f32 	%f27, %f35, %f534, %f27;
	fma.rn.f32 	%f26, %f35, %f535, %f26;
	fma.rn.f32 	%f25, %f35, %f536, %f25;
	fma.rn.f32 	%f30, %f36, %f534, %f30;
	fma.rn.f32 	%f29, %f36, %f535, %f29;
	fma.rn.f32 	%f28, %f36, %f536, %f28;
	fma.rn.f32 	%f33, %f37, %f534, %f33;
	fma.rn.f32 	%f32, %f37, %f535, %f32;
	fma.rn.f32 	%f31, %f37, %f536, %f31;
	add.f32 	%f24, %f24, %f534;
	add.f32 	%f23, %f23, %f535;
	add.f32 	%f22, %f22, %f536;
	add.f32 	%f18, %f18, %f528;

BB0_20:
	add.s32 	%r383, %r383, 1;
	setp.lt.s32	%p37, %r383, %r2;
	@%p37 bra 	BB0_6;
	bra.uni 	BB0_21;

BB0_4:
	mov.f32 	%f19, %f18;
	mov.f32 	%f20, %f18;
	mov.f32 	%f21, %f18;
	mov.f32 	%f22, %f18;
	mov.f32 	%f23, %f18;
	mov.f32 	%f24, %f18;
	mov.f32 	%f25, %f18;
	mov.f32 	%f26, %f18;
	mov.f32 	%f27, %f18;
	mov.f32 	%f28, %f18;
	mov.f32 	%f29, %f18;
	mov.f32 	%f30, %f18;
	mov.f32 	%f31, %f18;
	mov.f32 	%f32, %f18;
	mov.f32 	%f33, %f18;

BB0_21:
	mov.pred 	%p148, %p13;

BB0_22:
	cvt.rn.f32.s32	%f537, %r383;
	mov.f32 	%f538, 0f3F800000;
	max.f32 	%f539, %f537, %f538;
	rcp.rn.f32 	%f540, %f539;
	mul.f32 	%f1238, %f21, %f540;
	mul.f32 	%f1239, %f20, %f540;
	mul.f32 	%f1240, %f19, %f540;
	div.rn.f32 	%f1241, %f18, %f539;
	mul.f32 	%f1235, %f24, %f540;
	mul.f32 	%f1236, %f23, %f540;
	mul.f32 	%f1237, %f22, %f540;
	mul.f32 	%f1232, %f27, %f540;
	mul.f32 	%f1233, %f26, %f540;
	mul.f32 	%f1234, %f25, %f540;
	mul.f32 	%f1229, %f30, %f540;
	mul.f32 	%f1230, %f29, %f540;
	mul.f32 	%f1231, %f28, %f540;
	mul.f32 	%f1226, %f33, %f540;
	mul.f32 	%f1227, %f32, %f540;
	mul.f32 	%f1228, %f31, %f540;
	@!%p148 bra 	BB0_75;
	bra.uni 	BB0_23;

BB0_23:
	mov.f32 	%f555, 0f00000000;
	setp.lt.s32	%p38, %r3, 1;
	mov.f32 	%f1184, %f555;
	mov.f32 	%f1185, %f555;
	mov.f32 	%f1186, %f555;
	mov.f32 	%f1187, %f555;
	mov.f32 	%f1188, %f555;
	mov.f32 	%f1189, %f555;
	mov.f32 	%f1190, %f555;
	mov.f32 	%f1191, %f555;
	mov.f32 	%f1192, %f555;
	mov.f32 	%f1193, %f555;
	mov.f32 	%f1194, %f555;
	mov.f32 	%f1195, %f555;
	mov.f32 	%f1196, %f555;
	mov.f32 	%f1197, %f555;
	mov.f32 	%f1198, %f555;
	@%p38 bra 	BB0_74;

	mad.lo.s32 	%r387, %r128, 1664525, 1013904223;
	cvt.rn.f32.s32	%f571, %r4;
	rcp.rn.f32 	%f119, %f571;
	add.u64 	%rd65, %SP, 16;
	cvta.to.local.u64 	%rd2, %rd65;
	mul.f32 	%f120, %f10, 0f3456BF95;
	mul.f32 	%f121, %f11, 0f3456BF95;
	mul.f32 	%f122, %f12, 0f3456BF95;
	add.u64 	%rd66, %SP, 0;
	cvta.to.local.u64 	%rd3, %rd66;
	mov.f32 	%f1184, 0f00000000;
	mov.u32 	%r153, 0;
	abs.f32 	%f572, %f121;
	abs.f32 	%f573, %f120;
	max.f32 	%f574, %f573, %f572;
	abs.f32 	%f575, %f122;
	max.f32 	%f576, %f574, %f575;
	mov.u32 	%r384, %r153;
	mov.f32 	%f1185, %f1184;
	mov.f32 	%f1186, %f1184;
	mov.f32 	%f1187, %f1184;
	mov.f32 	%f1188, %f1184;
	mov.f32 	%f1189, %f1184;
	mov.f32 	%f1190, %f1184;
	mov.f32 	%f1191, %f1184;
	mov.f32 	%f1192, %f1184;
	mov.f32 	%f1193, %f1184;
	mov.f32 	%f1194, %f1184;
	mov.f32 	%f1195, %f1184;
	mov.f32 	%f1196, %f1184;
	mov.f32 	%f1197, %f1184;
	mov.f32 	%f1198, %f1184;

BB0_25:
	cvt.rn.f32.s32	%f138, %r384;
	max.f32 	%f139, %f576, %f377;
	mov.u32 	%r386, %r153;

BB0_26:
	mad.lo.s32 	%r155, %r387, 1664525, 1013904223;
	and.b32  	%r156, %r155, 16777215;
	cvt.rn.f32.u32	%f578, %r156;
	fma.rn.f32 	%f579, %f578, 0f33800000, %f138;
	mul.f32 	%f580, %f119, %f579;
	mad.lo.s32 	%r387, %r155, 1664525, 1013904223;
	and.b32  	%r157, %r387, 16777215;
	cvt.rn.f32.u32	%f581, %r157;
	cvt.rn.f32.s32	%f582, %r386;
	fma.rn.f32 	%f583, %f581, 0f33800000, %f582;
	mul.f32 	%f584, %f119, %f583;
	fma.rn.f32 	%f155, %f580, 0fC0000000, 0f3F800000;
	mul.f32 	%f585, %f155, %f155;
	sub.f32 	%f587, %f538, %f585;
	mov.f32 	%f588, 0f00000000;
	max.f32 	%f589, %f588, %f587;
	sqrt.rn.f32 	%f156, %f589;
	mul.f32 	%f1205, %f584, 0f40C90FDB;
	abs.f32 	%f158, %f1205;
	setp.neu.f32	%p39, %f158, 0f7F800000;
	mov.f32 	%f1199, %f1205;
	@%p39 bra 	BB0_28;

	mul.rn.f32 	%f1199, %f1205, %f588;

BB0_28:
	mul.f32 	%f591, %f1199, 0f3F22F983;
	cvt.rni.s32.f32	%r397, %f591;
	cvt.rn.f32.s32	%f592, %r397;
	neg.f32 	%f593, %f592;
	mov.f32 	%f594, 0f3FC90FDA;
	fma.rn.f32 	%f595, %f593, %f594, %f1199;
	mov.f32 	%f596, 0f33A22168;
	fma.rn.f32 	%f597, %f593, %f596, %f595;
	mov.f32 	%f598, 0f27C234C5;
	fma.rn.f32 	%f1200, %f593, %f598, %f597;
	abs.f32 	%f599, %f1199;
	setp.leu.f32	%p40, %f599, 0f47CE4780;
	@%p40 bra 	BB0_39;

	mov.b32 	 %r18, %f1199;
	shr.u32 	%r19, %r18, 23;
	shl.b32 	%r160, %r18, 8;
	or.b32  	%r20, %r160, -2147483648;
	mov.u32 	%r388, 0;
	mov.u64 	%rd315, 0;
	mov.u64 	%rd314, %rd2;
	mov.u32 	%r389, %r388;

BB0_30:
	.pragma "nounroll";
	shl.b64 	%rd68, %rd315, 2;
	mov.u64 	%rd69, __cudart_i2opi_f;
	add.s64 	%rd70, %rd69, %rd68;
	ld.const.u32 	%r163, [%rd70];
	// inline asm
	{
	mad.lo.cc.u32   %r161, %r163, %r20, %r389;
	madc.hi.u32     %r389, %r163, %r20,  0;
	}
	// inline asm
	st.local.u32 	[%rd314], %r161;
	add.s32 	%r388, %r388, 1;
	cvt.s64.s32	%rd315, %r388;
	mul.wide.s32 	%rd71, %r388, 4;
	add.s64 	%rd314, %rd2, %rd71;
	setp.ne.s32	%p41, %r388, 6;
	@%p41 bra 	BB0_30;

	and.b32  	%r166, %r19, 255;
	add.s32 	%r167, %r166, -128;
	shr.u32 	%r168, %r167, 5;
	and.b32  	%r25, %r18, -2147483648;
	st.local.u32 	[%rd2+24], %r389;
	mov.u32 	%r169, 6;
	sub.s32 	%r170, %r169, %r168;
	mul.wide.s32 	%rd72, %r170, 4;
	add.s64 	%rd9, %rd2, %rd72;
	ld.local.u32 	%r390, [%rd9];
	ld.local.u32 	%r391, [%rd9+-4];
	and.b32  	%r28, %r19, 31;
	setp.eq.s32	%p42, %r28, 0;
	@%p42 bra 	BB0_33;

	mov.u32 	%r171, 32;
	sub.s32 	%r172, %r171, %r28;
	shr.u32 	%r173, %r391, %r172;
	shl.b32 	%r174, %r390, %r28;
	add.s32 	%r390, %r173, %r174;
	ld.local.u32 	%r175, [%rd9+-8];
	shr.u32 	%r176, %r175, %r172;
	shl.b32 	%r177, %r391, %r28;
	add.s32 	%r391, %r176, %r177;

BB0_33:
	shr.u32 	%r178, %r391, 30;
	shl.b32 	%r179, %r390, 2;
	add.s32 	%r392, %r178, %r179;
	shl.b32 	%r34, %r391, 2;
	shr.u32 	%r180, %r392, 31;
	shr.u32 	%r181, %r390, 30;
	add.s32 	%r35, %r180, %r181;
	setp.eq.s32	%p43, %r180, 0;
	@%p43 bra 	BB0_34;
	bra.uni 	BB0_35;

BB0_34:
	mov.u32 	%r393, %r25;
	mov.u32 	%r394, %r34;
	bra.uni 	BB0_36;

BB0_35:
	not.b32 	%r182, %r392;
	neg.s32 	%r394, %r34;
	setp.eq.s32	%p44, %r34, 0;
	selp.u32	%r183, 1, 0, %p44;
	add.s32 	%r392, %r183, %r182;
	xor.b32  	%r393, %r25, -2147483648;

BB0_36:
	clz.b32 	%r396, %r392;
	setp.eq.s32	%p45, %r396, 0;
	shl.b32 	%r184, %r392, %r396;
	mov.u32 	%r185, 32;
	sub.s32 	%r186, %r185, %r396;
	shr.u32 	%r187, %r394, %r186;
	add.s32 	%r188, %r187, %r184;
	selp.b32	%r43, %r392, %r188, %p45;
	mov.u32 	%r189, -921707870;
	mul.hi.u32 	%r395, %r43, %r189;
	setp.eq.s32	%p46, %r25, 0;
	neg.s32 	%r190, %r35;
	selp.b32	%r397, %r35, %r190, %p46;
	setp.lt.s32	%p47, %r395, 1;
	@%p47 bra 	BB0_38;

	mul.lo.s32 	%r191, %r43, -921707870;
	shr.u32 	%r192, %r191, 31;
	shl.b32 	%r193, %r395, 1;
	add.s32 	%r395, %r192, %r193;
	add.s32 	%r396, %r396, 1;

BB0_38:
	mov.u32 	%r194, 126;
	sub.s32 	%r195, %r194, %r396;
	shl.b32 	%r196, %r195, 23;
	add.s32 	%r197, %r395, 1;
	shr.u32 	%r198, %r197, 7;
	add.s32 	%r199, %r198, 1;
	shr.u32 	%r200, %r199, 1;
	add.s32 	%r201, %r200, %r196;
	or.b32  	%r202, %r201, %r393;
	mov.b32 	 %f1200, %r202;

BB0_39:
	mul.rn.f32 	%f164, %f1200, %f1200;
	add.s32 	%r51, %r397, 1;
	and.b32  	%r52, %r51, 1;
	setp.eq.s32	%p48, %r52, 0;
	@%p48 bra 	BB0_41;
	bra.uni 	BB0_40;

BB0_41:
	mov.f32 	%f602, 0f3C08839E;
	mov.f32 	%f603, 0fB94CA1F9;
	fma.rn.f32 	%f1201, %f603, %f164, %f602;
	bra.uni 	BB0_42;

BB0_40:
	mov.f32 	%f600, 0fBAB6061A;
	mov.f32 	%f601, 0f37CCF5CE;
	fma.rn.f32 	%f1201, %f601, %f164, %f600;

BB0_42:
	@%p48 bra 	BB0_44;
	bra.uni 	BB0_43;

BB0_44:
	mov.f32 	%f607, 0fBE2AAAA3;
	fma.rn.f32 	%f608, %f1201, %f164, %f607;
	fma.rn.f32 	%f1202, %f608, %f164, %f588;
	bra.uni 	BB0_45;

BB0_43:
	mov.f32 	%f604, 0f3D2AAAA5;
	fma.rn.f32 	%f605, %f1201, %f164, %f604;
	mov.f32 	%f606, 0fBF000000;
	fma.rn.f32 	%f1202, %f605, %f164, %f606;

BB0_45:
	fma.rn.f32 	%f1203, %f1202, %f1200, %f1200;
	@%p48 bra 	BB0_47;

	fma.rn.f32 	%f1203, %f1202, %f164, %f538;

BB0_47:
	and.b32  	%r203, %r51, 2;
	setp.eq.s32	%p51, %r203, 0;
	@%p51 bra 	BB0_49;

	mov.f32 	%f612, 0fBF800000;
	fma.rn.f32 	%f1203, %f1203, %f612, %f588;

BB0_49:
	@%p39 bra 	BB0_51;

	mul.rn.f32 	%f1205, %f1205, %f588;

BB0_51:
	mul.f32 	%f614, %f1205, 0f3F22F983;
	cvt.rni.s32.f32	%r407, %f614;
	cvt.rn.f32.s32	%f615, %r407;
	neg.f32 	%f616, %f615;
	fma.rn.f32 	%f618, %f616, %f594, %f1205;
	fma.rn.f32 	%f620, %f616, %f596, %f618;
	fma.rn.f32 	%f1206, %f616, %f598, %f620;
	abs.f32 	%f622, %f1205;
	setp.leu.f32	%p53, %f622, 0f47CE4780;
	@%p53 bra 	BB0_62;

	mov.b32 	 %r54, %f1205;
	shr.u32 	%r55, %r54, 23;
	shl.b32 	%r206, %r54, 8;
	or.b32  	%r56, %r206, -2147483648;
	mov.u32 	%r398, 0;
	mov.u64 	%rd316, %rd2;
	mov.u64 	%rd317, %rd26;
	mov.u32 	%r399, %r398;

BB0_53:
	.pragma "nounroll";
	shl.b64 	%rd74, %rd317, 2;
	mov.u64 	%rd75, __cudart_i2opi_f;
	add.s64 	%rd76, %rd75, %rd74;
	ld.const.u32 	%r209, [%rd76];
	// inline asm
	{
	mad.lo.cc.u32   %r207, %r209, %r56, %r399;
	madc.hi.u32     %r399, %r209, %r56,  0;
	}
	// inline asm
	st.local.u32 	[%rd316], %r207;
	add.s32 	%r398, %r398, 1;
	cvt.s64.s32	%rd317, %r398;
	mul.wide.s32 	%rd77, %r398, 4;
	add.s64 	%rd316, %rd2, %rd77;
	setp.ne.s32	%p54, %r398, 6;
	@%p54 bra 	BB0_53;

	and.b32  	%r212, %r55, 255;
	add.s32 	%r213, %r212, -128;
	shr.u32 	%r214, %r213, 5;
	and.b32  	%r61, %r54, -2147483648;
	st.local.u32 	[%rd2+24], %r399;
	mov.u32 	%r215, 6;
	sub.s32 	%r216, %r215, %r214;
	mul.wide.s32 	%rd78, %r216, 4;
	add.s64 	%rd15, %rd2, %rd78;
	ld.local.u32 	%r400, [%rd15];
	ld.local.u32 	%r401, [%rd15+-4];
	and.b32  	%r64, %r55, 31;
	setp.eq.s32	%p55, %r64, 0;
	@%p55 bra 	BB0_56;

	mov.u32 	%r217, 32;
	sub.s32 	%r218, %r217, %r64;
	shr.u32 	%r219, %r401, %r218;
	shl.b32 	%r220, %r400, %r64;
	add.s32 	%r400, %r219, %r220;
	ld.local.u32 	%r221, [%rd15+-8];
	shr.u32 	%r222, %r221, %r218;
	shl.b32 	%r223, %r401, %r64;
	add.s32 	%r401, %r222, %r223;

BB0_56:
	shr.u32 	%r224, %r401, 30;
	shl.b32 	%r225, %r400, 2;
	add.s32 	%r402, %r224, %r225;
	shl.b32 	%r70, %r401, 2;
	shr.u32 	%r226, %r402, 31;
	shr.u32 	%r227, %r400, 30;
	add.s32 	%r71, %r226, %r227;
	setp.eq.s32	%p56, %r226, 0;
	@%p56 bra 	BB0_57;
	bra.uni 	BB0_58;

BB0_57:
	mov.u32 	%r403, %r61;
	mov.u32 	%r404, %r70;
	bra.uni 	BB0_59;

BB0_58:
	not.b32 	%r228, %r402;
	neg.s32 	%r404, %r70;
	setp.eq.s32	%p57, %r70, 0;
	selp.u32	%r229, 1, 0, %p57;
	add.s32 	%r402, %r229, %r228;
	xor.b32  	%r403, %r61, -2147483648;

BB0_59:
	clz.b32 	%r406, %r402;
	setp.eq.s32	%p58, %r406, 0;
	shl.b32 	%r230, %r402, %r406;
	mov.u32 	%r231, 32;
	sub.s32 	%r232, %r231, %r406;
	shr.u32 	%r233, %r404, %r232;
	add.s32 	%r234, %r233, %r230;
	selp.b32	%r79, %r402, %r234, %p58;
	mov.u32 	%r235, -921707870;
	mul.hi.u32 	%r405, %r79, %r235;
	setp.eq.s32	%p59, %r61, 0;
	neg.s32 	%r236, %r71;
	selp.b32	%r407, %r71, %r236, %p59;
	setp.lt.s32	%p60, %r405, 1;
	@%p60 bra 	BB0_61;

	mul.lo.s32 	%r237, %r79, -921707870;
	shr.u32 	%r238, %r237, 31;
	shl.b32 	%r239, %r405, 1;
	add.s32 	%r405, %r238, %r239;
	add.s32 	%r406, %r406, 1;

BB0_61:
	mov.u32 	%r240, 126;
	sub.s32 	%r241, %r240, %r406;
	shl.b32 	%r242, %r241, 23;
	add.s32 	%r243, %r405, 1;
	shr.u32 	%r244, %r243, 7;
	add.s32 	%r245, %r244, 1;
	shr.u32 	%r246, %r245, 1;
	add.s32 	%r247, %r246, %r242;
	or.b32  	%r248, %r247, %r403;
	mov.b32 	 %f1206, %r248;

BB0_62:
	mul.rn.f32 	%f181, %f1206, %f1206;
	and.b32  	%r87, %r407, 1;
	setp.eq.s32	%p61, %r87, 0;
	@%p61 bra 	BB0_64;
	bra.uni 	BB0_63;

BB0_64:
	mov.f32 	%f625, 0f3C08839E;
	mov.f32 	%f626, 0fB94CA1F9;
	fma.rn.f32 	%f1207, %f626, %f181, %f625;
	bra.uni 	BB0_65;

BB0_63:
	mov.f32 	%f623, 0fBAB6061A;
	mov.f32 	%f624, 0f37CCF5CE;
	fma.rn.f32 	%f1207, %f624, %f181, %f623;

BB0_65:
	@%p61 bra 	BB0_67;
	bra.uni 	BB0_66;

BB0_67:
	mov.f32 	%f630, 0fBE2AAAA3;
	fma.rn.f32 	%f631, %f1207, %f181, %f630;
	fma.rn.f32 	%f1208, %f631, %f181, %f588;
	bra.uni 	BB0_68;

BB0_66:
	mov.f32 	%f627, 0f3D2AAAA5;
	fma.rn.f32 	%f628, %f1207, %f181, %f627;
	mov.f32 	%f629, 0fBF000000;
	fma.rn.f32 	%f1208, %f628, %f181, %f629;

BB0_68:
	fma.rn.f32 	%f1209, %f1208, %f1206, %f1206;
	@%p61 bra 	BB0_70;

	fma.rn.f32 	%f1209, %f1208, %f181, %f538;

BB0_70:
	and.b32  	%r249, %r407, 2;
	setp.eq.s32	%p64, %r249, 0;
	@%p64 bra 	BB0_72;

	mov.f32 	%f635, 0fBF800000;
	fma.rn.f32 	%f1209, %f1209, %f635, %f588;

BB0_72:
	mul.f32 	%f639, %f156, %f1203;
	mov.u32 	%r251, 0;
	st.local.u32 	[%rd3+8], %r251;
	st.local.u32 	[%rd3+4], %r251;
	st.local.u32 	[%rd3], %r251;
	ld.global.u32 	%r250, [root];
	mul.f32 	%f640, %f156, %f1209;
	mov.f32 	%f643, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r250, %f10, %f11, %f12, %f639, %f640, %f155, %r251, %f139, %f643, %rd66, %r116);
	// inline asm
	ld.local.f32 	%f644, [%rd3];
	max.f32 	%f646, %f644, %f588;
	ld.local.f32 	%f647, [%rd3+4];
	max.f32 	%f648, %f647, %f588;
	ld.local.f32 	%f649, [%rd3+8];
	max.f32 	%f650, %f649, %f588;
	fma.rn.f32 	%f1192, %f639, %f646, %f1192;
	fma.rn.f32 	%f1191, %f639, %f648, %f1191;
	fma.rn.f32 	%f1190, %f639, %f650, %f1190;
	fma.rn.f32 	%f1195, %f640, %f646, %f1195;
	fma.rn.f32 	%f1194, %f640, %f648, %f1194;
	fma.rn.f32 	%f1193, %f640, %f650, %f1193;
	fma.rn.f32 	%f1198, %f155, %f646, %f1198;
	fma.rn.f32 	%f1197, %f155, %f648, %f1197;
	fma.rn.f32 	%f1196, %f155, %f650, %f1196;
	add.f32 	%f1189, %f1189, %f646;
	add.f32 	%f1188, %f1188, %f648;
	add.f32 	%f1187, %f1187, %f650;
	mul.f32 	%f651, %f1116, %f640;
	fma.rn.f32 	%f652, %f1115, %f639, %f651;
	fma.rn.f32 	%f653, %f1117, %f155, %f652;
	cvt.sat.f32.f32	%f654, %f653;
	fma.rn.f32 	%f1186, %f646, %f654, %f1186;
	fma.rn.f32 	%f1185, %f648, %f654, %f1185;
	fma.rn.f32 	%f1184, %f650, %f654, %f1184;
	add.s32 	%r386, %r386, 1;
	setp.lt.s32	%p65, %r386, %r4;
	@%p65 bra 	BB0_26;

	add.s32 	%r384, %r384, 1;
	setp.lt.s32	%p66, %r384, %r4;
	@%p66 bra 	BB0_25;

BB0_74:
	mul.lo.s32 	%r253, %r4, %r4;
	cvt.rn.f32.s32	%f655, %r253;
	rcp.rn.f32 	%f656, %f655;
	mul.f32 	%f657, %f1186, %f656;
	mul.f32 	%f658, %f1185, %f656;
	mul.f32 	%f659, %f1184, %f656;
	div.rn.f32 	%f1241, %f555, %f655;
	mul.f32 	%f1235, %f1189, %f656;
	mul.f32 	%f1236, %f1188, %f656;
	mul.f32 	%f1237, %f1187, %f656;
	mul.f32 	%f1232, %f1192, %f656;
	mul.f32 	%f1233, %f1191, %f656;
	mul.f32 	%f1234, %f1190, %f656;
	mul.f32 	%f1229, %f1195, %f656;
	mul.f32 	%f1230, %f1194, %f656;
	mul.f32 	%f1231, %f1193, %f656;
	mul.f32 	%f1226, %f1198, %f656;
	mul.f32 	%f1227, %f1197, %f656;
	mul.f32 	%f1228, %f1196, %f656;
	fma.rn.f32 	%f1238, %f1186, %f656, %f657;
	fma.rn.f32 	%f1239, %f1185, %f656, %f658;
	fma.rn.f32 	%f1240, %f1184, %f656, %f659;

BB0_75:
	setp.gt.s32	%p67, %r1, -1;
	selp.f32	%f255, %f1241, %f1238, %p67;
	ld.global.u32 	%r409, [imageEnabled];
	and.b32  	%r254, %r409, 8;
	setp.eq.s32	%p68, %r254, 0;
	@%p68 bra 	BB0_88;

	cvt.u64.u32	%rd82, %r6;
	cvt.u64.u32	%rd83, %r7;
	mov.u64 	%rd86, image_Mask;
	cvta.global.u64 	%rd81, %rd86;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r100, %r100, %rd82, %rd83, %rd26, %rd26);
	// inline asm
	mov.f32 	%f663, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f664, %f663;
	fma.rn.f32 	%f665, %f664, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f256, %f665;
	abs.f32 	%f257, %f255;
	setp.lt.f32	%p69, %f257, 0f00800000;
	mul.f32 	%f666, %f257, 0f4B800000;
	selp.f32	%f667, 0fC3170000, 0fC2FE0000, %p69;
	selp.f32	%f668, %f666, %f257, %p69;
	mov.b32 	 %r257, %f668;
	and.b32  	%r258, %r257, 8388607;
	or.b32  	%r259, %r258, 1065353216;
	mov.b32 	 %f669, %r259;
	shr.u32 	%r260, %r257, 23;
	cvt.rn.f32.u32	%f670, %r260;
	add.f32 	%f671, %f667, %f670;
	setp.gt.f32	%p70, %f669, 0f3FB504F3;
	mul.f32 	%f672, %f669, 0f3F000000;
	add.f32 	%f673, %f671, 0f3F800000;
	selp.f32	%f674, %f672, %f669, %p70;
	selp.f32	%f675, %f673, %f671, %p70;
	add.f32 	%f676, %f674, 0fBF800000;
	add.f32 	%f662, %f674, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// inline asm
	add.f32 	%f677, %f676, %f676;
	mul.f32 	%f678, %f661, %f677;
	mul.f32 	%f679, %f678, %f678;
	mov.f32 	%f680, 0f3C4CAF63;
	mov.f32 	%f681, 0f3B18F0FE;
	fma.rn.f32 	%f682, %f681, %f679, %f680;
	mov.f32 	%f683, 0f3DAAAABD;
	fma.rn.f32 	%f684, %f682, %f679, %f683;
	mul.rn.f32 	%f685, %f684, %f679;
	mul.rn.f32 	%f686, %f685, %f678;
	sub.f32 	%f687, %f676, %f678;
	neg.f32 	%f688, %f678;
	add.f32 	%f689, %f687, %f687;
	fma.rn.f32 	%f690, %f688, %f676, %f689;
	mul.rn.f32 	%f691, %f661, %f690;
	add.f32 	%f692, %f686, %f678;
	sub.f32 	%f693, %f678, %f692;
	add.f32 	%f694, %f686, %f693;
	add.f32 	%f695, %f691, %f694;
	add.f32 	%f696, %f692, %f695;
	sub.f32 	%f697, %f692, %f696;
	add.f32 	%f698, %f695, %f697;
	mov.f32 	%f699, 0f3F317200;
	mul.rn.f32 	%f700, %f675, %f699;
	mov.f32 	%f701, 0f35BFBE8E;
	mul.rn.f32 	%f702, %f675, %f701;
	add.f32 	%f703, %f700, %f696;
	sub.f32 	%f704, %f700, %f703;
	add.f32 	%f705, %f696, %f704;
	add.f32 	%f706, %f698, %f705;
	add.f32 	%f707, %f702, %f706;
	add.f32 	%f708, %f703, %f707;
	sub.f32 	%f709, %f703, %f708;
	add.f32 	%f710, %f707, %f709;
	mov.f32 	%f711, 0f3EE8BA2E;
	mul.rn.f32 	%f712, %f711, %f708;
	neg.f32 	%f713, %f712;
	fma.rn.f32 	%f714, %f711, %f708, %f713;
	fma.rn.f32 	%f715, %f711, %f710, %f714;
	mov.f32 	%f716, 0f00000000;
	fma.rn.f32 	%f717, %f716, %f708, %f715;
	add.rn.f32 	%f718, %f712, %f717;
	neg.f32 	%f719, %f718;
	add.rn.f32 	%f720, %f712, %f719;
	add.rn.f32 	%f721, %f720, %f717;
	mov.b32 	 %r261, %f718;
	setp.eq.s32	%p71, %r261, 1118925336;
	add.s32 	%r262, %r261, -1;
	mov.b32 	 %f722, %r262;
	add.f32 	%f723, %f721, 0f37000000;
	selp.f32	%f724, %f722, %f718, %p71;
	selp.f32	%f258, %f723, %f721, %p71;
	mul.f32 	%f725, %f724, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f726, %f725;
	mov.f32 	%f727, 0fBF317200;
	fma.rn.f32 	%f728, %f726, %f727, %f724;
	mov.f32 	%f729, 0fB5BFBE8E;
	fma.rn.f32 	%f730, %f726, %f729, %f728;
	mul.f32 	%f731, %f730, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f732, %f731;
	add.f32 	%f733, %f726, 0f00000000;
	ex2.approx.f32 	%f734, %f733;
	mul.f32 	%f735, %f732, %f734;
	setp.lt.f32	%p72, %f724, 0fC2D20000;
	selp.f32	%f736, 0f00000000, %f735, %p72;
	setp.gt.f32	%p73, %f724, 0f42D20000;
	selp.f32	%f1242, 0f7F800000, %f736, %p73;
	setp.eq.f32	%p74, %f1242, 0f7F800000;
	@%p74 bra 	BB0_78;

	fma.rn.f32 	%f1242, %f1242, %f258, %f1242;

BB0_78:
	setp.lt.f32	%p75, %f255, 0f00000000;
	setp.eq.f32	%p76, %f256, 0f3F800000;
	and.pred  	%p3, %p75, %p76;
	mov.b32 	 %r263, %f1242;
	xor.b32  	%r264, %r263, -2147483648;
	mov.b32 	 %f737, %r264;
	selp.f32	%f1244, %f737, %f1242, %p3;
	setp.eq.f32	%p77, %f255, 0f00000000;
	@%p77 bra 	BB0_81;
	bra.uni 	BB0_79;

BB0_81:
	add.f32 	%f740, %f255, %f255;
	selp.f32	%f1244, %f740, 0f00000000, %p76;
	bra.uni 	BB0_82;

BB0_146:
	mov.u64 	%rd227, image_HDR;
	cvta.global.u64 	%rd222, %rd227;
	mov.u32 	%r350, 8;
	mov.u64 	%rd226, 0;
	// inline asm
	call (%rd221), _rt_buffer_get_64, (%rd222, %r100, %r350, %rd19, %rd20, %rd226, %rd226);
	// inline asm
	mov.f32 	%f1079, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f1079;}

	// inline asm
	mov.u16 	%rs105, 0;
	st.v4.u16 	[%rd221], {%rs104, %rs104, %rs104, %rs105};

BB0_147:
	ld.global.u32 	%r351, [additive];
	setp.eq.s32	%p144, %r351, 0;
	@%p144 bra 	BB0_149;

	mov.u64 	%rd240, image_RNM0;
	cvta.global.u64 	%rd229, %rd240;
	mov.u32 	%r355, 8;
	mov.u64 	%rd239, 0;
	// inline asm
	call (%rd228), _rt_buffer_get_64, (%rd229, %r100, %r355, %rd19, %rd20, %rd239, %rd239);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd228];
	// inline asm
	{  cvt.f32.f16 %f1080, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1081, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1082, %rs114;}

	// inline asm
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd229, %r100, %r355, %rd19, %rd20, %rd239, %rd239);
	// inline asm
	add.f32 	%f1083, %f1080, 0f00000000;
	add.f32 	%f1084, %f1081, 0f00000000;
	add.f32 	%f1085, %f1082, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f1085;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f1084;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f1083;}

	// inline asm
	mov.u16 	%rs116, 0;
	st.v4.u16 	[%rd234], {%rs109, %rs110, %rs111, %rs116};
	bra.uni 	BB0_150;

BB0_149:
	mov.u64 	%rd247, image_RNM0;
	cvta.global.u64 	%rd242, %rd247;
	mov.u32 	%r357, 8;
	mov.u64 	%rd246, 0;
	// inline asm
	call (%rd241), _rt_buffer_get_64, (%rd242, %r100, %r357, %rd19, %rd20, %rd246, %rd246);
	// inline asm
	mov.f32 	%f1086, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f1086;}

	// inline asm
	mov.u16 	%rs118, 0;
	st.v4.u16 	[%rd241], {%rs117, %rs117, %rs117, %rs118};

BB0_150:
	ld.global.u32 	%r358, [additive];
	setp.eq.s32	%p145, %r358, 0;
	@%p145 bra 	BB0_152;

	mov.u64 	%rd260, image_RNM1;
	cvta.global.u64 	%rd249, %rd260;
	mov.u32 	%r362, 8;
	mov.u64 	%rd259, 0;
	// inline asm
	call (%rd248), _rt_buffer_get_64, (%rd249, %r100, %r362, %rd19, %rd20, %rd259, %rd259);
	// inline asm
	ld.v4.u16 	{%rs125, %rs126, %rs127, %rs128}, [%rd248];
	// inline asm
	{  cvt.f32.f16 %f1087, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1088, %rs126;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1089, %rs127;}

	// inline asm
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd249, %r100, %r362, %rd19, %rd20, %rd259, %rd259);
	// inline asm
	add.f32 	%f1090, %f1087, 0f00000000;
	add.f32 	%f1091, %f1088, 0f00000000;
	add.f32 	%f1092, %f1089, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs124, %f1092;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f1091;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f1090;}

	// inline asm
	mov.u16 	%rs129, 0;
	st.v4.u16 	[%rd254], {%rs122, %rs123, %rs124, %rs129};
	bra.uni 	BB0_153;

BB0_152:
	mov.u64 	%rd267, image_RNM1;
	cvta.global.u64 	%rd262, %rd267;
	mov.u32 	%r364, 8;
	mov.u64 	%rd266, 0;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r100, %r364, %rd19, %rd20, %rd266, %rd266);
	// inline asm
	mov.f32 	%f1093, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs130, %f1093;}

	// inline asm
	mov.u16 	%rs131, 0;
	st.v4.u16 	[%rd261], {%rs130, %rs130, %rs130, %rs131};

BB0_153:
	ld.global.u32 	%r365, [additive];
	setp.eq.s32	%p146, %r365, 0;
	@%p146 bra 	BB0_155;

	mov.u64 	%rd280, image_RNM2;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r369, 8;
	mov.u64 	%rd279, 0;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r100, %r369, %rd19, %rd20, %rd279, %rd279);
	// inline asm
	ld.v4.u16 	{%rs138, %rs139, %rs140, %rs141}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f1094, %rs138;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1095, %rs139;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1096, %rs140;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r100, %r369, %rd19, %rd20, %rd279, %rd279);
	// inline asm
	add.f32 	%f1097, %f1094, 0f00000000;
	add.f32 	%f1098, %f1095, 0f00000000;
	add.f32 	%f1099, %f1096, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs137, %f1099;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs136, %f1098;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f1097;}

	// inline asm
	mov.u16 	%rs142, 0;
	st.v4.u16 	[%rd274], {%rs135, %rs136, %rs137, %rs142};
	bra.uni 	BB0_156;

BB0_155:
	mov.u64 	%rd287, image_RNM2;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r371, 8;
	mov.u64 	%rd286, 0;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r100, %r371, %rd19, %rd20, %rd286, %rd286);
	// inline asm
	mov.f32 	%f1100, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs143, %f1100;}

	// inline asm
	mov.u16 	%rs144, 0;
	st.v4.u16 	[%rd281], {%rs143, %rs143, %rs143, %rs144};

BB0_156:
	ld.global.u32 	%r372, [additive];
	setp.eq.s32	%p147, %r372, 0;
	@%p147 bra 	BB0_158;

	mov.u64 	%rd300, image_RNM3;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r376, 8;
	mov.u64 	%rd299, 0;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r100, %r376, %rd19, %rd20, %rd299, %rd299);
	// inline asm
	ld.v4.u16 	{%rs151, %rs152, %rs153, %rs154}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f1101, %rs151;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1102, %rs152;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1103, %rs153;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r100, %r376, %rd19, %rd20, %rd299, %rd299);
	// inline asm
	add.f32 	%f1104, %f1101, 0f00000000;
	add.f32 	%f1105, %f1102, 0f00000000;
	add.f32 	%f1106, %f1103, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs150, %f1106;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs149, %f1105;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs148, %f1104;}

	// inline asm
	mov.u16 	%rs155, 0;
	st.v4.u16 	[%rd294], {%rs148, %rs149, %rs150, %rs155};
	bra.uni 	BB0_159;

BB0_158:
	mov.u64 	%rd307, image_RNM3;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r378, 8;
	mov.u64 	%rd306, 0;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r100, %r378, %rd19, %rd20, %rd306, %rd306);
	// inline asm
	mov.f32 	%f1107, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs156, %f1107;}

	// inline asm
	mov.u16 	%rs157, 0;
	st.v4.u16 	[%rd301], {%rs156, %rs156, %rs156, %rs157};
	bra.uni 	BB0_159;

BB0_79:
	setp.geu.f32	%p78, %f255, 0f00000000;
	@%p78 bra 	BB0_82;

	cvt.rzi.f32.f32	%f739, %f711;
	setp.neu.f32	%p79, %f739, 0f3EE8BA2E;
	selp.f32	%f1244, 0f7FFFFFFF, %f1244, %p79;

BB0_82:
	add.f32 	%f741, %f257, 0f3EE8BA2E;
	mov.b32 	 %r265, %f741;
	setp.lt.s32	%p81, %r265, 2139095040;
	@%p81 bra 	BB0_87;

	setp.gtu.f32	%p82, %f257, 0f7F800000;
	@%p82 bra 	BB0_86;
	bra.uni 	BB0_84;

BB0_86:
	add.f32 	%f1244, %f255, 0f3EE8BA2E;
	bra.uni 	BB0_87;

BB0_84:
	setp.neu.f32	%p83, %f257, 0f7F800000;
	@%p83 bra 	BB0_87;

	selp.f32	%f1244, 0fFF800000, 0f7F800000, %p3;

BB0_87:
	mul.f32 	%f742, %f1244, 0f437F0000;
	setp.eq.f32	%p84, %f255, 0f3F800000;
	selp.f32	%f743, 0f437F0000, %f742, %p84;
	cvt.rzi.u32.f32	%r266, %f743;
	cvt.u16.u32	%rs14, %r266;
	mov.u16 	%rs15, 255;
	st.v2.u8 	[%rd80], {%rs14, %rs15};
	ld.global.u32 	%r409, [imageEnabled];

BB0_88:
	ld.global.f32 	%f744, [lightColor];
	mul.f32 	%f269, %f1238, %f744;
	ld.global.f32 	%f745, [lightColor+4];
	mul.f32 	%f270, %f1239, %f745;
	ld.global.f32 	%f746, [lightColor+8];
	mul.f32 	%f271, %f1240, %f746;
	and.b32  	%r267, %r409, 1;
	setp.eq.b32	%p85, %r267, 1;
	@!%p85 bra 	BB0_123;
	bra.uni 	BB0_89;

BB0_89:
	mov.f32 	%f749, 0f3E666666;
	cvt.rzi.f32.f32	%f750, %f749;
	fma.rn.f32 	%f751, %f750, 0fC0000000, 0f3EE66666;
	abs.f32 	%f272, %f751;
	abs.f32 	%f273, %f269;
	setp.lt.f32	%p86, %f273, 0f00800000;
	mul.f32 	%f752, %f273, 0f4B800000;
	selp.f32	%f753, 0fC3170000, 0fC2FE0000, %p86;
	selp.f32	%f754, %f752, %f273, %p86;
	mov.b32 	 %r268, %f754;
	and.b32  	%r269, %r268, 8388607;
	or.b32  	%r270, %r269, 1065353216;
	mov.b32 	 %f755, %r270;
	shr.u32 	%r271, %r268, 23;
	cvt.rn.f32.u32	%f756, %r271;
	add.f32 	%f757, %f753, %f756;
	setp.gt.f32	%p87, %f755, 0f3FB504F3;
	mul.f32 	%f758, %f755, 0f3F000000;
	add.f32 	%f759, %f757, 0f3F800000;
	selp.f32	%f760, %f758, %f755, %p87;
	selp.f32	%f761, %f759, %f757, %p87;
	add.f32 	%f762, %f760, 0fBF800000;
	add.f32 	%f748, %f760, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f747,%f748;
	// inline asm
	add.f32 	%f763, %f762, %f762;
	mul.f32 	%f764, %f747, %f763;
	mul.f32 	%f765, %f764, %f764;
	mov.f32 	%f766, 0f3C4CAF63;
	mov.f32 	%f767, 0f3B18F0FE;
	fma.rn.f32 	%f768, %f767, %f765, %f766;
	mov.f32 	%f769, 0f3DAAAABD;
	fma.rn.f32 	%f770, %f768, %f765, %f769;
	mul.rn.f32 	%f771, %f770, %f765;
	mul.rn.f32 	%f772, %f771, %f764;
	sub.f32 	%f773, %f762, %f764;
	neg.f32 	%f774, %f764;
	add.f32 	%f775, %f773, %f773;
	fma.rn.f32 	%f776, %f774, %f762, %f775;
	mul.rn.f32 	%f777, %f747, %f776;
	add.f32 	%f778, %f772, %f764;
	sub.f32 	%f779, %f764, %f778;
	add.f32 	%f780, %f772, %f779;
	add.f32 	%f781, %f777, %f780;
	add.f32 	%f782, %f778, %f781;
	sub.f32 	%f783, %f778, %f782;
	add.f32 	%f784, %f781, %f783;
	mov.f32 	%f785, 0f3F317200;
	mul.rn.f32 	%f786, %f761, %f785;
	mov.f32 	%f787, 0f35BFBE8E;
	mul.rn.f32 	%f788, %f761, %f787;
	add.f32 	%f789, %f786, %f782;
	sub.f32 	%f790, %f786, %f789;
	add.f32 	%f791, %f782, %f790;
	add.f32 	%f792, %f784, %f791;
	add.f32 	%f793, %f788, %f792;
	add.f32 	%f794, %f789, %f793;
	sub.f32 	%f795, %f789, %f794;
	add.f32 	%f796, %f793, %f795;
	mov.f32 	%f797, 0f3EE66666;
	mul.rn.f32 	%f798, %f797, %f794;
	neg.f32 	%f799, %f798;
	fma.rn.f32 	%f800, %f797, %f794, %f799;
	fma.rn.f32 	%f801, %f797, %f796, %f800;
	mov.f32 	%f802, 0f00000000;
	fma.rn.f32 	%f803, %f802, %f794, %f801;
	add.rn.f32 	%f804, %f798, %f803;
	neg.f32 	%f805, %f804;
	add.rn.f32 	%f806, %f798, %f805;
	add.rn.f32 	%f807, %f806, %f803;
	mov.b32 	 %r272, %f804;
	setp.eq.s32	%p88, %r272, 1118925336;
	add.s32 	%r273, %r272, -1;
	mov.b32 	 %f808, %r273;
	add.f32 	%f809, %f807, 0f37000000;
	selp.f32	%f810, %f808, %f804, %p88;
	selp.f32	%f274, %f809, %f807, %p88;
	mul.f32 	%f811, %f810, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f812, %f811;
	mov.f32 	%f813, 0fBF317200;
	fma.rn.f32 	%f814, %f812, %f813, %f810;
	mov.f32 	%f815, 0fB5BFBE8E;
	fma.rn.f32 	%f816, %f812, %f815, %f814;
	mul.f32 	%f817, %f816, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f818, %f817;
	add.f32 	%f819, %f812, 0f00000000;
	ex2.approx.f32 	%f820, %f819;
	mul.f32 	%f821, %f818, %f820;
	setp.lt.f32	%p89, %f810, 0fC2D20000;
	selp.f32	%f822, 0f00000000, %f821, %p89;
	setp.gt.f32	%p90, %f810, 0f42D20000;
	selp.f32	%f1245, 0f7F800000, %f822, %p90;
	setp.eq.f32	%p91, %f1245, 0f7F800000;
	@%p91 bra 	BB0_91;

	fma.rn.f32 	%f1245, %f1245, %f274, %f1245;

BB0_91:
	setp.lt.f32	%p92, %f269, 0f00000000;
	setp.eq.f32	%p93, %f272, 0f3F800000;
	and.pred  	%p4, %p92, %p93;
	mov.b32 	 %r274, %f1245;
	xor.b32  	%r275, %r274, -2147483648;
	mov.b32 	 %f823, %r275;
	selp.f32	%f1247, %f823, %f1245, %p4;
	setp.eq.f32	%p94, %f269, 0f00000000;
	@%p94 bra 	BB0_94;
	bra.uni 	BB0_92;

BB0_94:
	add.f32 	%f826, %f269, %f269;
	selp.f32	%f1247, %f826, 0f00000000, %p93;
	bra.uni 	BB0_95;

BB0_92:
	setp.geu.f32	%p95, %f269, 0f00000000;
	@%p95 bra 	BB0_95;

	cvt.rzi.f32.f32	%f825, %f797;
	setp.neu.f32	%p96, %f825, 0f3EE66666;
	selp.f32	%f1247, 0f7FFFFFFF, %f1247, %p96;

BB0_95:
	add.f32 	%f827, %f273, 0f3EE66666;
	mov.b32 	 %r276, %f827;
	setp.lt.s32	%p98, %r276, 2139095040;
	@%p98 bra 	BB0_100;

	setp.gtu.f32	%p99, %f273, 0f7F800000;
	@%p99 bra 	BB0_99;
	bra.uni 	BB0_97;

BB0_99:
	add.f32 	%f1247, %f269, 0f3EE66666;
	bra.uni 	BB0_100;

BB0_97:
	setp.neu.f32	%p100, %f273, 0f7F800000;
	@%p100 bra 	BB0_100;

	selp.f32	%f1247, 0fFF800000, 0f7F800000, %p4;

BB0_100:
	setp.eq.f32	%p101, %f269, 0f3F800000;
	selp.f32	%f285, 0f3F800000, %f1247, %p101;
	abs.f32 	%f286, %f270;
	setp.lt.f32	%p102, %f286, 0f00800000;
	mul.f32 	%f830, %f286, 0f4B800000;
	selp.f32	%f831, 0fC3170000, 0fC2FE0000, %p102;
	selp.f32	%f832, %f830, %f286, %p102;
	mov.b32 	 %r277, %f832;
	and.b32  	%r278, %r277, 8388607;
	or.b32  	%r279, %r278, 1065353216;
	mov.b32 	 %f833, %r279;
	shr.u32 	%r280, %r277, 23;
	cvt.rn.f32.u32	%f834, %r280;
	add.f32 	%f835, %f831, %f834;
	setp.gt.f32	%p103, %f833, 0f3FB504F3;
	mul.f32 	%f836, %f833, 0f3F000000;
	add.f32 	%f837, %f835, 0f3F800000;
	selp.f32	%f838, %f836, %f833, %p103;
	selp.f32	%f839, %f837, %f835, %p103;
	add.f32 	%f840, %f838, 0fBF800000;
	add.f32 	%f829, %f838, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f828,%f829;
	// inline asm
	add.f32 	%f841, %f840, %f840;
	mul.f32 	%f842, %f828, %f841;
	mul.f32 	%f843, %f842, %f842;
	fma.rn.f32 	%f846, %f767, %f843, %f766;
	fma.rn.f32 	%f848, %f846, %f843, %f769;
	mul.rn.f32 	%f849, %f848, %f843;
	mul.rn.f32 	%f850, %f849, %f842;
	sub.f32 	%f851, %f840, %f842;
	neg.f32 	%f852, %f842;
	add.f32 	%f853, %f851, %f851;
	fma.rn.f32 	%f854, %f852, %f840, %f853;
	mul.rn.f32 	%f855, %f828, %f854;
	add.f32 	%f856, %f850, %f842;
	sub.f32 	%f857, %f842, %f856;
	add.f32 	%f858, %f850, %f857;
	add.f32 	%f859, %f855, %f858;
	add.f32 	%f860, %f856, %f859;
	sub.f32 	%f861, %f856, %f860;
	add.f32 	%f862, %f859, %f861;
	mul.rn.f32 	%f864, %f839, %f785;
	mul.rn.f32 	%f866, %f839, %f787;
	add.f32 	%f867, %f864, %f860;
	sub.f32 	%f868, %f864, %f867;
	add.f32 	%f869, %f860, %f868;
	add.f32 	%f870, %f862, %f869;
	add.f32 	%f871, %f866, %f870;
	add.f32 	%f872, %f867, %f871;
	sub.f32 	%f873, %f867, %f872;
	add.f32 	%f874, %f871, %f873;
	mul.rn.f32 	%f876, %f797, %f872;
	neg.f32 	%f877, %f876;
	fma.rn.f32 	%f878, %f797, %f872, %f877;
	fma.rn.f32 	%f879, %f797, %f874, %f878;
	fma.rn.f32 	%f881, %f802, %f872, %f879;
	add.rn.f32 	%f882, %f876, %f881;
	neg.f32 	%f883, %f882;
	add.rn.f32 	%f884, %f876, %f883;
	add.rn.f32 	%f885, %f884, %f881;
	mov.b32 	 %r281, %f882;
	setp.eq.s32	%p104, %r281, 1118925336;
	add.s32 	%r282, %r281, -1;
	mov.b32 	 %f886, %r282;
	add.f32 	%f887, %f885, 0f37000000;
	selp.f32	%f888, %f886, %f882, %p104;
	selp.f32	%f287, %f887, %f885, %p104;
	mul.f32 	%f889, %f888, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f890, %f889;
	fma.rn.f32 	%f892, %f890, %f813, %f888;
	fma.rn.f32 	%f894, %f890, %f815, %f892;
	mul.f32 	%f895, %f894, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f896, %f895;
	add.f32 	%f897, %f890, 0f00000000;
	ex2.approx.f32 	%f898, %f897;
	mul.f32 	%f899, %f896, %f898;
	setp.lt.f32	%p105, %f888, 0fC2D20000;
	selp.f32	%f900, 0f00000000, %f899, %p105;
	setp.gt.f32	%p106, %f888, 0f42D20000;
	selp.f32	%f1248, 0f7F800000, %f900, %p106;
	setp.eq.f32	%p107, %f1248, 0f7F800000;
	@%p107 bra 	BB0_102;

	fma.rn.f32 	%f1248, %f1248, %f287, %f1248;

BB0_102:
	setp.lt.f32	%p108, %f270, 0f00000000;
	and.pred  	%p5, %p108, %p93;
	mov.b32 	 %r283, %f1248;
	xor.b32  	%r284, %r283, -2147483648;
	mov.b32 	 %f901, %r284;
	selp.f32	%f1250, %f901, %f1248, %p5;
	setp.eq.f32	%p110, %f270, 0f00000000;
	@%p110 bra 	BB0_105;
	bra.uni 	BB0_103;

BB0_105:
	add.f32 	%f904, %f270, %f270;
	selp.f32	%f1250, %f904, 0f00000000, %p93;
	bra.uni 	BB0_106;

BB0_103:
	setp.geu.f32	%p111, %f270, 0f00000000;
	@%p111 bra 	BB0_106;

	cvt.rzi.f32.f32	%f903, %f797;
	setp.neu.f32	%p112, %f903, 0f3EE66666;
	selp.f32	%f1250, 0f7FFFFFFF, %f1250, %p112;

BB0_106:
	add.f32 	%f905, %f286, 0f3EE66666;
	mov.b32 	 %r285, %f905;
	setp.lt.s32	%p114, %r285, 2139095040;
	@%p114 bra 	BB0_111;

	setp.gtu.f32	%p115, %f286, 0f7F800000;
	@%p115 bra 	BB0_110;
	bra.uni 	BB0_108;

BB0_110:
	add.f32 	%f1250, %f270, 0f3EE66666;
	bra.uni 	BB0_111;

BB0_108:
	setp.neu.f32	%p116, %f286, 0f7F800000;
	@%p116 bra 	BB0_111;

	selp.f32	%f1250, 0fFF800000, 0f7F800000, %p5;

BB0_111:
	setp.eq.f32	%p117, %f270, 0f3F800000;
	selp.f32	%f298, 0f3F800000, %f1250, %p117;
	abs.f32 	%f299, %f271;
	setp.lt.f32	%p118, %f299, 0f00800000;
	mul.f32 	%f908, %f299, 0f4B800000;
	selp.f32	%f909, 0fC3170000, 0fC2FE0000, %p118;
	selp.f32	%f910, %f908, %f299, %p118;
	mov.b32 	 %r286, %f910;
	and.b32  	%r287, %r286, 8388607;
	or.b32  	%r288, %r287, 1065353216;
	mov.b32 	 %f911, %r288;
	shr.u32 	%r289, %r286, 23;
	cvt.rn.f32.u32	%f912, %r289;
	add.f32 	%f913, %f909, %f912;
	setp.gt.f32	%p119, %f911, 0f3FB504F3;
	mul.f32 	%f914, %f911, 0f3F000000;
	add.f32 	%f915, %f913, 0f3F800000;
	selp.f32	%f916, %f914, %f911, %p119;
	selp.f32	%f917, %f915, %f913, %p119;
	add.f32 	%f918, %f916, 0fBF800000;
	add.f32 	%f907, %f916, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f906,%f907;
	// inline asm
	add.f32 	%f919, %f918, %f918;
	mul.f32 	%f920, %f906, %f919;
	mul.f32 	%f921, %f920, %f920;
	fma.rn.f32 	%f924, %f767, %f921, %f766;
	fma.rn.f32 	%f926, %f924, %f921, %f769;
	mul.rn.f32 	%f927, %f926, %f921;
	mul.rn.f32 	%f928, %f927, %f920;
	sub.f32 	%f929, %f918, %f920;
	neg.f32 	%f930, %f920;
	add.f32 	%f931, %f929, %f929;
	fma.rn.f32 	%f932, %f930, %f918, %f931;
	mul.rn.f32 	%f933, %f906, %f932;
	add.f32 	%f934, %f928, %f920;
	sub.f32 	%f935, %f920, %f934;
	add.f32 	%f936, %f928, %f935;
	add.f32 	%f937, %f933, %f936;
	add.f32 	%f938, %f934, %f937;
	sub.f32 	%f939, %f934, %f938;
	add.f32 	%f940, %f937, %f939;
	mul.rn.f32 	%f942, %f917, %f785;
	mul.rn.f32 	%f944, %f917, %f787;
	add.f32 	%f945, %f942, %f938;
	sub.f32 	%f946, %f942, %f945;
	add.f32 	%f947, %f938, %f946;
	add.f32 	%f948, %f940, %f947;
	add.f32 	%f949, %f944, %f948;
	add.f32 	%f950, %f945, %f949;
	sub.f32 	%f951, %f945, %f950;
	add.f32 	%f952, %f949, %f951;
	mul.rn.f32 	%f954, %f797, %f950;
	neg.f32 	%f955, %f954;
	fma.rn.f32 	%f956, %f797, %f950, %f955;
	fma.rn.f32 	%f957, %f797, %f952, %f956;
	fma.rn.f32 	%f959, %f802, %f950, %f957;
	add.rn.f32 	%f960, %f954, %f959;
	neg.f32 	%f961, %f960;
	add.rn.f32 	%f962, %f954, %f961;
	add.rn.f32 	%f963, %f962, %f959;
	mov.b32 	 %r290, %f960;
	setp.eq.s32	%p120, %r290, 1118925336;
	add.s32 	%r291, %r290, -1;
	mov.b32 	 %f964, %r291;
	add.f32 	%f965, %f963, 0f37000000;
	selp.f32	%f966, %f964, %f960, %p120;
	selp.f32	%f300, %f965, %f963, %p120;
	mul.f32 	%f967, %f966, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f968, %f967;
	fma.rn.f32 	%f970, %f968, %f813, %f966;
	fma.rn.f32 	%f972, %f968, %f815, %f970;
	mul.f32 	%f973, %f972, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f974, %f973;
	add.f32 	%f975, %f968, 0f00000000;
	ex2.approx.f32 	%f976, %f975;
	mul.f32 	%f977, %f974, %f976;
	setp.lt.f32	%p121, %f966, 0fC2D20000;
	selp.f32	%f978, 0f00000000, %f977, %p121;
	setp.gt.f32	%p122, %f966, 0f42D20000;
	selp.f32	%f1251, 0f7F800000, %f978, %p122;
	setp.eq.f32	%p123, %f1251, 0f7F800000;
	@%p123 bra 	BB0_113;

	fma.rn.f32 	%f1251, %f1251, %f300, %f1251;

BB0_113:
	setp.lt.f32	%p124, %f271, 0f00000000;
	and.pred  	%p6, %p124, %p93;
	mov.b32 	 %r292, %f1251;
	xor.b32  	%r293, %r292, -2147483648;
	mov.b32 	 %f979, %r293;
	selp.f32	%f1253, %f979, %f1251, %p6;
	setp.eq.f32	%p126, %f271, 0f00000000;
	@%p126 bra 	BB0_116;
	bra.uni 	BB0_114;

BB0_116:
	add.f32 	%f982, %f271, %f271;
	selp.f32	%f1253, %f982, 0f00000000, %p93;
	bra.uni 	BB0_117;

BB0_114:
	setp.geu.f32	%p127, %f271, 0f00000000;
	@%p127 bra 	BB0_117;

	cvt.rzi.f32.f32	%f981, %f797;
	setp.neu.f32	%p128, %f981, 0f3EE66666;
	selp.f32	%f1253, 0f7FFFFFFF, %f1253, %p128;

BB0_117:
	add.f32 	%f983, %f299, 0f3EE66666;
	mov.b32 	 %r294, %f983;
	setp.lt.s32	%p130, %r294, 2139095040;
	@%p130 bra 	BB0_122;

	setp.gtu.f32	%p131, %f299, 0f7F800000;
	@%p131 bra 	BB0_121;
	bra.uni 	BB0_119;

BB0_121:
	add.f32 	%f1253, %f271, 0f3EE66666;
	bra.uni 	BB0_122;

BB0_119:
	setp.neu.f32	%p132, %f299, 0f7F800000;
	@%p132 bra 	BB0_122;

	selp.f32	%f1253, 0fFF800000, 0f7F800000, %p6;

BB0_122:
	setp.eq.f32	%p133, %f271, 0f3F800000;
	selp.f32	%f984, 0f3F800000, %f1253, %p133;
	cvt.u64.u32	%rd90, %r7;
	cvt.u64.u32	%rd89, %r6;
	mov.u64 	%rd93, image;
	cvta.global.u64 	%rd88, %rd93;
	// inline asm
	call (%rd87), _rt_buffer_get_64, (%rd88, %r100, %r101, %rd89, %rd90, %rd26, %rd26);
	// inline asm
	cvt.sat.f32.f32	%f985, %f984;
	mul.f32 	%f986, %f985, 0f437FFD71;
	cvt.rzi.u32.f32	%r297, %f986;
	cvt.sat.f32.f32	%f987, %f298;
	mul.f32 	%f988, %f987, 0f437FFD71;
	cvt.rzi.u32.f32	%r298, %f988;
	cvt.sat.f32.f32	%f989, %f285;
	mul.f32 	%f990, %f989, 0f437FFD71;
	cvt.rzi.u32.f32	%r299, %f990;
	cvt.u16.u32	%rs16, %r297;
	cvt.u16.u32	%rs17, %r299;
	cvt.u16.u32	%rs18, %r298;
	mov.u16 	%rs19, 255;
	st.v4.u8 	[%rd87], {%rs16, %rs18, %rs17, %rs19};
	ld.global.u32 	%r409, [imageEnabled];

BB0_123:
	cvt.u64.u32	%rd17, %r6;
	cvt.u64.u32	%rd18, %r7;
	and.b32  	%r300, %r409, 4;
	setp.eq.s32	%p134, %r300, 0;
	@%p134 bra 	BB0_127;

	ld.global.u32 	%r301, [additive];
	setp.eq.s32	%p135, %r301, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs20, %f538;}

	// inline asm
	@%p135 bra 	BB0_126;

	mov.u64 	%rd106, image_HDR;
	cvta.global.u64 	%rd95, %rd106;
	mov.u32 	%r305, 8;
	// inline asm
	call (%rd94), _rt_buffer_get_64, (%rd95, %r100, %r305, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs27, %rs28, %rs29, %rs30}, [%rd94];
	// inline asm
	{  cvt.f32.f16 %f992, %rs27;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f993, %rs28;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f994, %rs29;}

	// inline asm
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd95, %r100, %r305, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f995, %f269, %f992;
	add.f32 	%f996, %f270, %f993;
	add.f32 	%f997, %f271, %f994;
	// inline asm
	{  cvt.rn.f16.f32 %rs26, %f997;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f996;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f995;}

	// inline asm
	st.v4.u16 	[%rd100], {%rs24, %rs25, %rs26, %rs20};
	bra.uni 	BB0_127;

BB0_126:
	mov.u64 	%rd113, image_HDR;
	cvta.global.u64 	%rd108, %rd113;
	mov.u32 	%r307, 8;
	// inline asm
	call (%rd107), _rt_buffer_get_64, (%rd108, %r100, %r307, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f271;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f270;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f269;}

	// inline asm
	st.v4.u16 	[%rd107], {%rs31, %rs32, %rs33, %rs20};

BB0_127:
	selp.f32	%f1002, 0f3F800000, 0f3E800000, %p148;
	mul.f32 	%f1003, %f1002, %f1235;
	mul.f32 	%f1004, %f1002, %f1236;
	mul.f32 	%f1005, %f1002, %f1237;
	mul.f32 	%f1006, %f1002, %f1232;
	mul.f32 	%f1007, %f1002, %f1233;
	mul.f32 	%f1008, %f1002, %f1234;
	mul.f32 	%f1009, %f1002, %f1229;
	mul.f32 	%f1010, %f1002, %f1230;
	mul.f32 	%f1011, %f1002, %f1231;
	mul.f32 	%f1012, %f1002, %f1226;
	mul.f32 	%f1013, %f1002, %f1227;
	mul.f32 	%f1014, %f1002, %f1228;
	ld.global.f32 	%f1015, [lightColor];
	mul.f32 	%f311, %f1003, %f1015;
	ld.global.f32 	%f1016, [lightColor+4];
	mul.f32 	%f312, %f1004, %f1016;
	ld.global.f32 	%f1017, [lightColor+8];
	mul.f32 	%f313, %f1005, %f1017;
	mul.f32 	%f314, %f1006, %f1015;
	mul.f32 	%f315, %f1007, %f1016;
	mul.f32 	%f316, %f1008, %f1017;
	mul.f32 	%f317, %f1009, %f1015;
	mul.f32 	%f318, %f1010, %f1016;
	mul.f32 	%f319, %f1011, %f1017;
	mul.f32 	%f320, %f1012, %f1015;
	mul.f32 	%f321, %f1013, %f1016;
	mul.f32 	%f322, %f1014, %f1017;
	ld.global.u32 	%r308, [additive];
	setp.eq.s32	%p136, %r308, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f538;}

	// inline asm
	@%p136 bra 	BB0_129;

	mov.u64 	%rd126, image_RNM0;
	cvta.global.u64 	%rd115, %rd126;
	mov.u32 	%r312, 8;
	// inline asm
	call (%rd114), _rt_buffer_get_64, (%rd115, %r100, %r312, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs41, %rs42, %rs43, %rs44}, [%rd114];
	// inline asm
	{  cvt.f32.f16 %f1018, %rs41;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1019, %rs42;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1020, %rs43;}

	// inline asm
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd115, %r100, %r312, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f1021, %f311, %f1018;
	add.f32 	%f1022, %f312, %f1019;
	add.f32 	%f1023, %f313, %f1020;
	// inline asm
	{  cvt.rn.f16.f32 %rs40, %f1023;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f1022;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f1021;}

	// inline asm
	st.v4.u16 	[%rd120], {%rs38, %rs39, %rs40, %rs34};
	bra.uni 	BB0_130;

BB0_129:
	mov.u64 	%rd133, image_RNM0;
	cvta.global.u64 	%rd128, %rd133;
	mov.u32 	%r314, 8;
	// inline asm
	call (%rd127), _rt_buffer_get_64, (%rd128, %r100, %r314, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs47, %f313;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f312;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f311;}

	// inline asm
	st.v4.u16 	[%rd127], {%rs45, %rs46, %rs47, %rs34};

BB0_130:
	mov.f32 	%f1028, 0f34000000;
	max.f32 	%f1029, %f311, %f1028;
	div.rn.f32 	%f1030, %f314, %f1029;
	max.f32 	%f1031, %f312, %f1028;
	div.rn.f32 	%f1032, %f315, %f1031;
	max.f32 	%f1033, %f313, %f1028;
	div.rn.f32 	%f1034, %f316, %f1033;
	fma.rn.f32 	%f323, %f1030, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f324, %f1032, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f325, %f1034, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f1035, %f317, %f1029;
	div.rn.f32 	%f1036, %f318, %f1031;
	div.rn.f32 	%f1037, %f319, %f1033;
	fma.rn.f32 	%f326, %f1035, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f327, %f1036, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f328, %f1037, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f1038, %f320, %f1029;
	div.rn.f32 	%f1039, %f321, %f1031;
	div.rn.f32 	%f1040, %f322, %f1033;
	fma.rn.f32 	%f329, %f1038, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f330, %f1039, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f331, %f1040, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r315, [additive];
	setp.eq.s32	%p137, %r315, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs48, %f538;}

	// inline asm
	@%p137 bra 	BB0_132;

	mov.u64 	%rd146, image_RNM1;
	cvta.global.u64 	%rd135, %rd146;
	mov.u32 	%r319, 8;
	// inline asm
	call (%rd134), _rt_buffer_get_64, (%rd135, %r100, %r319, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs55, %rs56, %rs57, %rs58}, [%rd134];
	// inline asm
	{  cvt.f32.f16 %f1041, %rs55;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1042, %rs56;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1043, %rs57;}

	// inline asm
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd135, %r100, %r319, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f1044, %f323, %f1041;
	add.f32 	%f1045, %f324, %f1042;
	add.f32 	%f1046, %f325, %f1043;
	// inline asm
	{  cvt.rn.f16.f32 %rs54, %f1046;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f1045;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f1044;}

	// inline asm
	st.v4.u16 	[%rd140], {%rs52, %rs53, %rs54, %rs48};
	bra.uni 	BB0_133;

BB0_132:
	mov.u64 	%rd153, image_RNM1;
	cvta.global.u64 	%rd148, %rd153;
	mov.u32 	%r321, 8;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r100, %r321, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs61, %f325;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f324;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f323;}

	// inline asm
	st.v4.u16 	[%rd147], {%rs59, %rs60, %rs61, %rs48};

BB0_133:
	ld.global.u32 	%r322, [additive];
	setp.eq.s32	%p138, %r322, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs62, %f538;}

	// inline asm
	@%p138 bra 	BB0_135;

	mov.u64 	%rd166, image_RNM2;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r326, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r100, %r326, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs69, %rs70, %rs71, %rs72}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f1051, %rs69;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1052, %rs70;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1053, %rs71;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r100, %r326, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f1054, %f326, %f1051;
	add.f32 	%f1055, %f327, %f1052;
	add.f32 	%f1056, %f328, %f1053;
	// inline asm
	{  cvt.rn.f16.f32 %rs68, %f1056;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs67, %f1055;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs66, %f1054;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs66, %rs67, %rs68, %rs62};
	bra.uni 	BB0_136;

BB0_135:
	mov.u64 	%rd173, image_RNM2;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r328, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r100, %r328, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs75, %f328;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs74, %f327;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs73, %f326;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs73, %rs74, %rs75, %rs62};

BB0_136:
	ld.global.u32 	%r329, [additive];
	setp.eq.s32	%p139, %r329, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f538;}

	// inline asm
	@%p139 bra 	BB0_138;

	mov.u64 	%rd186, image_RNM3;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r333, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r100, %r333, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs83, %rs84, %rs85, %rs86}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f1061, %rs83;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1062, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f1063, %rs85;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r100, %r333, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f1064, %f329, %f1061;
	add.f32 	%f1065, %f330, %f1062;
	add.f32 	%f1066, %f331, %f1063;
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f1066;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f1065;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs80, %f1064;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs80, %rs81, %rs82, %rs76};
	bra.uni 	BB0_159;

BB0_138:
	mov.u64 	%rd193, image_RNM3;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r335, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r100, %r335, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs89, %f331;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f330;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs87, %f329;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs87, %rs88, %rs89, %rs76};

BB0_159:
	ret;
}


