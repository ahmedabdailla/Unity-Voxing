//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 lightMeshBuffer[1];
.global .align 4 .u32 lightMeshBufferSize;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightPointSize;
.global .align 4 .b8 lightColor[12];
.global .align 1 .b8 rnd_seeds[1];
.global .align 4 .u32 samples;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19lightMeshBufferSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightPointSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19lightMeshBufferSizeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightPointSizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19lightMeshBufferSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightPointSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightPointSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightPointSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[36];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<152>;
	.reg .b16 	%rs<152>;
	.reg .f32 	%f<1035>;
	.reg .b32 	%r<415>;
	.reg .b64 	%rd<309>;


	mov.u64 	%rd308, __local_depot0;
	cvta.local.u64 	%SP, %rd308;
	ld.global.u32 	%r1, [lightMeshBufferSize];
	abs.s32 	%r2, %r1;
	ld.global.u32 	%r3, [samples];
	ld.global.v2.u32 	{%r105, %r106}, [pixelID];
	cvt.u64.u32	%rd23, %r105;
	cvt.u64.u32	%rd24, %r106;
	mov.u64 	%rd27, uvnormal;
	cvta.global.u64 	%rd22, %rd27;
	mov.u32 	%r103, 2;
	mov.u32 	%r104, 4;
	mov.u64 	%rd26, 0;
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r103, %r104, %rd23, %rd24, %rd26, %rd26);
	// inline asm
	ld.u32 	%r4, [%rd21];
	shr.u32 	%r109, %r4, 16;
	cvt.u16.u32	%rs1, %r109;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r4;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p7, %rs9, 0;
	mov.f32 	%f957, 0f00000000;
	mov.f32 	%f958, %f957;
	mov.f32 	%f959, %f957;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs10, [%rd21+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f232, %rs12;
	div.rn.f32 	%f233, %f232, 0f437F0000;
	fma.rn.f32 	%f234, %f233, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f235, %rs10;
	div.rn.f32 	%f236, %f235, 0f437F0000;
	fma.rn.f32 	%f237, %f236, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f238, %rs7;
	div.rn.f32 	%f239, %f238, 0f437F0000;
	fma.rn.f32 	%f240, %f239, 0f40000000, 0fBF800000;
	mul.f32 	%f241, %f237, %f237;
	fma.rn.f32 	%f242, %f234, %f234, %f241;
	fma.rn.f32 	%f243, %f240, %f240, %f242;
	sqrt.rn.f32 	%f244, %f243;
	rcp.rn.f32 	%f245, %f244;
	mul.f32 	%f957, %f234, %f245;
	mul.f32 	%f958, %f237, %f245;
	mul.f32 	%f959, %f240, %f245;

BB0_2:
	ld.global.v2.u32 	{%r110, %r111}, [pixelID];
	ld.global.v2.u32 	{%r113, %r114}, [tileInfo];
	add.s32 	%r5, %r110, %r113;
	add.s32 	%r6, %r111, %r114;
	setp.eq.f32	%p8, %f958, 0f00000000;
	setp.eq.f32	%p9, %f957, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f959, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_141;
	bra.uni 	BB0_3;

BB0_141:
	ld.global.u32 	%r414, [imageEnabled];
	and.b32  	%r336, %r414, 1;
	setp.eq.b32	%p143, %r336, 1;
	@!%p143 bra 	BB0_143;
	bra.uni 	BB0_142;

BB0_142:
	cvt.u64.u32	%rd189, %r5;
	cvt.u64.u32	%rd190, %r6;
	mov.u64 	%rd193, image;
	cvta.global.u64 	%rd188, %rd193;
	mov.u64 	%rd192, 0;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r103, %r104, %rd189, %rd190, %rd192, %rd192);
	// inline asm
	mov.u16 	%rs84, 0;
	st.v4.u8 	[%rd187], {%rs84, %rs84, %rs84, %rs84};
	ld.global.u32 	%r414, [imageEnabled];

BB0_143:
	and.b32  	%r339, %r414, 8;
	setp.eq.s32	%p144, %r339, 0;
	@%p144 bra 	BB0_145;

	cvt.u64.u32	%rd197, %r6;
	cvt.u64.u32	%rd196, %r5;
	mov.u64 	%rd200, image_Mask;
	cvta.global.u64 	%rd195, %rd200;
	mov.u64 	%rd199, 0;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r103, %r103, %rd196, %rd197, %rd199, %rd199);
	// inline asm
	mov.f32 	%f912, 0f00000000;
	cvt.rzi.u32.f32	%r342, %f912;
	cvt.u16.u32	%rs85, %r342;
	mov.u16 	%rs86, 0;
	st.v2.u8 	[%rd194], {%rs85, %rs86};
	ld.global.u32 	%r414, [imageEnabled];

BB0_145:
	cvt.u64.u32	%rd19, %r5;
	cvt.u64.u32	%rd20, %r6;
	and.b32  	%r343, %r414, 4;
	setp.eq.s32	%p145, %r343, 0;
	@%p145 bra 	BB0_149;

	ld.global.u32 	%r344, [additive];
	setp.eq.s32	%p146, %r344, 0;
	@%p146 bra 	BB0_148;

	mov.u64 	%rd213, image_HDR;
	cvta.global.u64 	%rd202, %rd213;
	mov.u32 	%r348, 8;
	mov.u64 	%rd212, 0;
	// inline asm
	call (%rd201), _rt_buffer_get_64, (%rd202, %r103, %r348, %rd19, %rd20, %rd212, %rd212);
	// inline asm
	ld.v4.u16 	{%rs93, %rs94, %rs95, %rs96}, [%rd201];
	// inline asm
	{  cvt.f32.f16 %f913, %rs93;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f914, %rs94;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f915, %rs95;}

	// inline asm
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd202, %r103, %r348, %rd19, %rd20, %rd212, %rd212);
	// inline asm
	add.f32 	%f916, %f913, 0f00000000;
	add.f32 	%f917, %f914, 0f00000000;
	add.f32 	%f918, %f915, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f918;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs91, %f917;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs90, %f916;}

	// inline asm
	mov.u16 	%rs97, 0;
	st.v4.u16 	[%rd207], {%rs90, %rs91, %rs92, %rs97};
	bra.uni 	BB0_149;

BB0_3:
	ld.global.v2.u32 	{%r123, %r124}, [pixelID];
	cvt.u64.u32	%rd30, %r123;
	cvt.u64.u32	%rd31, %r124;
	mov.u64 	%rd40, uvpos;
	cvta.global.u64 	%rd29, %rd40;
	mov.u32 	%r119, 12;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r103, %r119, %rd30, %rd31, %rd26, %rd26);
	// inline asm
	ld.f32 	%f9, [%rd28+8];
	ld.f32 	%f8, [%rd28+4];
	ld.f32 	%f7, [%rd28];
	mul.f32 	%f252, %f7, 0f3456BF95;
	mul.f32 	%f253, %f8, 0f3456BF95;
	mul.f32 	%f254, %f9, 0f3456BF95;
	abs.f32 	%f10, %f957;
	div.rn.f32 	%f255, %f252, %f10;
	abs.f32 	%f256, %f958;
	div.rn.f32 	%f257, %f253, %f256;
	abs.f32 	%f11, %f959;
	div.rn.f32 	%f258, %f254, %f11;
	abs.f32 	%f259, %f255;
	abs.f32 	%f260, %f257;
	abs.f32 	%f261, %f258;
	mov.f32 	%f262, 0f38D1B717;
	max.f32 	%f263, %f259, %f262;
	max.f32 	%f264, %f260, %f262;
	max.f32 	%f265, %f261, %f262;
	fma.rn.f32 	%f12, %f957, %f263, %f7;
	fma.rn.f32 	%f13, %f958, %f264, %f8;
	fma.rn.f32 	%f14, %f959, %f265, %f9;
	ld.global.v2.u32 	{%r127, %r128}, [pixelID];
	cvt.u64.u32	%rd36, %r127;
	cvt.u64.u32	%rd37, %r128;
	mov.u64 	%rd41, rnd_seeds;
	cvta.global.u64 	%rd35, %rd41;
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd35, %r103, %r104, %rd36, %rd37, %rd26, %rd26);
	// inline asm
	ld.u32 	%r131, [%rd34];
	mad.lo.s32 	%r7, %r131, 1664525, 1013904223;
	mov.pred 	%p13, 0;
	mov.f32 	%f20, 0f00000000;
	mov.u32 	%r9, 0;
	setp.lt.s32	%p14, %r2, 1;
	@%p14 bra 	BB0_4;

	ld.global.f32 	%f15, [lightPointSize];
	mul.f32 	%f16, %f12, 0f3456BF95;
	mul.f32 	%f17, %f13, 0f3456BF95;
	mul.f32 	%f18, %f14, 0f3456BF95;
	and.b32  	%r134, %r7, 16777215;
	cvt.rn.f32.u32	%f272, %r134;
	mul.f32 	%f273, %f272, 0fB3800000;
	fma.rn.f32 	%f19, %f273, 0f3F333333, 0f3F800000;
	mov.f32 	%f20, 0f00000000;
	mov.u32 	%r383, 0;
	abs.f32 	%f395, %f17;
	abs.f32 	%f396, %f16;
	max.f32 	%f397, %f396, %f395;
	abs.f32 	%f398, %f18;
	max.f32 	%f399, %f397, %f398;
	mov.u32 	%r9, %r383;
	mov.f32 	%f21, %f20;
	mov.f32 	%f22, %f20;
	mov.f32 	%f23, %f20;
	mov.f32 	%f24, %f20;
	mov.f32 	%f25, %f20;

BB0_6:
	shl.b32 	%r10, %r383, 1;
	cvt.s64.s32	%rd44, %r10;
	mov.u64 	%rd48, lightMeshBuffer;
	cvta.global.u64 	%rd43, %rd48;
	mov.u32 	%r135, 1;
	mov.u64 	%rd47, 0;
	// inline asm
	call (%rd42), _rt_buffer_get_64, (%rd43, %r135, %r119, %rd44, %rd47, %rd47, %rd47);
	// inline asm
	ld.f32 	%f274, [%rd42];
	sub.f32 	%f275, %f274, %f7;
	ld.f32 	%f276, [%rd42+4];
	sub.f32 	%f277, %f276, %f8;
	ld.f32 	%f278, [%rd42+8];
	sub.f32 	%f279, %f278, %f9;
	mul.f32 	%f280, %f277, %f277;
	fma.rn.f32 	%f281, %f275, %f275, %f280;
	fma.rn.f32 	%f282, %f279, %f279, %f281;
	sqrt.rn.f32 	%f26, %f282;
	rcp.rn.f32 	%f283, %f26;
	mul.f32 	%f27, %f275, %f283;
	mul.f32 	%f28, %f277, %f283;
	mul.f32 	%f29, %f279, %f283;
	mul.f32 	%f284, %f958, %f28;
	fma.rn.f32 	%f285, %f957, %f27, %f284;
	fma.rn.f32 	%f30, %f959, %f29, %f285;
	setp.leu.f32	%p15, %f30, 0f00000000;
	@%p15 bra 	BB0_22;

	setp.ne.s32	%p17, %r3, 0;
	mul.f32 	%f286, %f26, %f26;
	mul.f32 	%f287, %f286, 0f40C90FDB;
	div.rn.f32 	%f288, %f15, %f287;
	add.f32 	%f31, %f288, %f288;
	setp.gt.f32	%p18, %f31, %f19;
	and.pred  	%p19, %p17, %p18;
	mov.pred 	%p151, -1;
	@%p19 bra 	BB0_24;

	ld.global.f32 	%f291, [lightInvCutoff];
	mul.f32 	%f32, %f26, %f291;
	mov.f32 	%f295, 0f40800000;
	abs.f32 	%f34, %f32;
	setp.lt.f32	%p20, %f34, 0f00800000;
	mul.f32 	%f297, %f34, 0f4B800000;
	selp.f32	%f298, 0fC3170000, 0fC2FE0000, %p20;
	selp.f32	%f299, %f297, %f34, %p20;
	mov.b32 	 %r137, %f299;
	and.b32  	%r138, %r137, 8388607;
	or.b32  	%r139, %r138, 1065353216;
	mov.b32 	 %f300, %r139;
	shr.u32 	%r140, %r137, 23;
	cvt.rn.f32.u32	%f301, %r140;
	add.f32 	%f302, %f298, %f301;
	setp.gt.f32	%p21, %f300, 0f3FB504F3;
	mul.f32 	%f303, %f300, 0f3F000000;
	add.f32 	%f304, %f302, 0f3F800000;
	selp.f32	%f305, %f303, %f300, %p21;
	selp.f32	%f306, %f304, %f302, %p21;
	add.f32 	%f307, %f305, 0fBF800000;
	add.f32 	%f290, %f305, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f289,%f290;
	// inline asm
	add.f32 	%f308, %f307, %f307;
	mul.f32 	%f309, %f289, %f308;
	mul.f32 	%f310, %f309, %f309;
	mov.f32 	%f311, 0f3C4CAF63;
	mov.f32 	%f312, 0f3B18F0FE;
	fma.rn.f32 	%f313, %f312, %f310, %f311;
	mov.f32 	%f314, 0f3DAAAABD;
	fma.rn.f32 	%f315, %f313, %f310, %f314;
	mul.rn.f32 	%f316, %f315, %f310;
	mul.rn.f32 	%f317, %f316, %f309;
	sub.f32 	%f318, %f307, %f309;
	neg.f32 	%f319, %f309;
	add.f32 	%f320, %f318, %f318;
	fma.rn.f32 	%f321, %f319, %f307, %f320;
	mul.rn.f32 	%f322, %f289, %f321;
	add.f32 	%f323, %f317, %f309;
	sub.f32 	%f324, %f309, %f323;
	add.f32 	%f325, %f317, %f324;
	add.f32 	%f326, %f322, %f325;
	add.f32 	%f327, %f323, %f326;
	sub.f32 	%f328, %f323, %f327;
	add.f32 	%f329, %f326, %f328;
	mov.f32 	%f330, 0f3F317200;
	mul.rn.f32 	%f331, %f306, %f330;
	mov.f32 	%f332, 0f35BFBE8E;
	mul.rn.f32 	%f333, %f306, %f332;
	add.f32 	%f334, %f331, %f327;
	sub.f32 	%f335, %f331, %f334;
	add.f32 	%f336, %f327, %f335;
	add.f32 	%f337, %f329, %f336;
	add.f32 	%f338, %f333, %f337;
	add.f32 	%f339, %f334, %f338;
	sub.f32 	%f340, %f334, %f339;
	add.f32 	%f341, %f338, %f340;
	mul.rn.f32 	%f342, %f295, %f339;
	neg.f32 	%f343, %f342;
	fma.rn.f32 	%f344, %f295, %f339, %f343;
	fma.rn.f32 	%f345, %f295, %f341, %f344;
	mov.f32 	%f346, 0f00000000;
	fma.rn.f32 	%f347, %f346, %f339, %f345;
	add.rn.f32 	%f348, %f342, %f347;
	neg.f32 	%f349, %f348;
	add.rn.f32 	%f350, %f342, %f349;
	add.rn.f32 	%f351, %f350, %f347;
	mov.b32 	 %r141, %f348;
	setp.eq.s32	%p22, %r141, 1118925336;
	add.s32 	%r142, %r141, -1;
	mov.b32 	 %f352, %r142;
	add.f32 	%f353, %f351, 0f37000000;
	selp.f32	%f354, %f352, %f348, %p22;
	selp.f32	%f35, %f353, %f351, %p22;
	mul.f32 	%f355, %f354, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f356, %f355;
	mov.f32 	%f357, 0fBF317200;
	fma.rn.f32 	%f358, %f356, %f357, %f354;
	mov.f32 	%f359, 0fB5BFBE8E;
	fma.rn.f32 	%f360, %f356, %f359, %f358;
	mul.f32 	%f361, %f360, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f362, %f361;
	add.f32 	%f363, %f356, 0f00000000;
	ex2.approx.f32 	%f364, %f363;
	mul.f32 	%f365, %f362, %f364;
	setp.lt.f32	%p23, %f354, 0fC2D20000;
	selp.f32	%f366, 0f00000000, %f365, %p23;
	setp.gt.f32	%p24, %f354, 0f42D20000;
	selp.f32	%f966, 0f7F800000, %f366, %p24;
	setp.eq.f32	%p25, %f966, 0f7F800000;
	@%p25 bra 	BB0_10;

	fma.rn.f32 	%f966, %f966, %f35, %f966;

BB0_10:
	mov.f32 	%f953, 0f40000000;
	cvt.rzi.f32.f32	%f952, %f953;
	add.f32 	%f951, %f952, %f952;
	mov.f32 	%f950, 0f40800000;
	sub.f32 	%f949, %f950, %f951;
	abs.f32 	%f948, %f949;
	setp.lt.f32	%p26, %f32, 0f00000000;
	setp.eq.f32	%p27, %f948, 0f3F800000;
	and.pred  	%p1, %p26, %p27;
	mov.b32 	 %r143, %f966;
	xor.b32  	%r144, %r143, -2147483648;
	mov.b32 	 %f367, %r144;
	selp.f32	%f968, %f367, %f966, %p1;
	setp.eq.f32	%p28, %f32, 0f00000000;
	@%p28 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f370, %f32, %f32;
	selp.f32	%f968, %f370, 0f00000000, %p27;
	bra.uni 	BB0_14;

BB0_11:
	setp.geu.f32	%p29, %f32, 0f00000000;
	@%p29 bra 	BB0_14;

	mov.f32 	%f956, 0f40800000;
	cvt.rzi.f32.f32	%f369, %f956;
	setp.neu.f32	%p30, %f369, 0f40800000;
	selp.f32	%f968, 0f7FFFFFFF, %f968, %p30;

BB0_14:
	add.f32 	%f371, %f34, 0f40800000;
	mov.b32 	 %r145, %f371;
	setp.lt.s32	%p32, %r145, 2139095040;
	@%p32 bra 	BB0_19;

	setp.gtu.f32	%p33, %f34, 0f7F800000;
	@%p33 bra 	BB0_18;
	bra.uni 	BB0_16;

BB0_18:
	add.f32 	%f968, %f32, 0f40800000;
	bra.uni 	BB0_19;

BB0_16:
	setp.neu.f32	%p34, %f34, 0f7F800000;
	@%p34 bra 	BB0_19;

	selp.f32	%f968, 0fFF800000, 0f7F800000, %p1;

BB0_19:
	mov.u64 	%rd303, 0;
	mov.u32 	%r380, 1;
	mov.u64 	%rd302, lightMeshBuffer;
	cvta.global.u64 	%rd301, %rd302;
	shl.b32 	%r379, %r383, 1;
	mov.f32 	%f372, 0f3F800000;
	sub.f32 	%f373, %f372, %f968;
	setp.eq.f32	%p35, %f32, 0f3F800000;
	selp.f32	%f374, 0f00000000, %f373, %p35;
	cvt.sat.f32.f32	%f375, %f374;
	mul.f32 	%f376, %f31, %f375;
	add.s32 	%r148, %r379, 1;
	cvt.s64.s32	%rd51, %r148;
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd301, %r380, %r119, %rd51, %rd303, %rd303, %rd303);
	// inline asm
	ld.f32 	%f377, [%rd49];
	mul.f32 	%f378, %f27, %f377;
	ld.f32 	%f379, [%rd49+4];
	mul.f32 	%f380, %f28, %f379;
	neg.f32 	%f381, %f380;
	sub.f32 	%f382, %f381, %f378;
	ld.f32 	%f383, [%rd49+8];
	mul.f32 	%f384, %f29, %f383;
	sub.f32 	%f385, %f382, %f384;
	cvt.sat.f32.f32	%f386, %f385;
	mul.f32 	%f46, %f376, %f386;
	setp.leu.f32	%p36, %f46, 0f3727C5AC;
	@%p36 bra 	BB0_21;

	mov.u32 	%r382, 1;
	add.u64 	%rd56, %SP, 4;
	cvta.to.local.u64 	%rd57, %rd56;
	max.f32 	%f393, %f399, %f262;
	sub.f32 	%f394, %f26, %f393;
	mov.u32 	%r152, 1065353216;
	st.local.u32 	[%rd57], %r152;
	ld.global.u32 	%r149, [root];
	// inline asm
	call _rt_trace_64, (%r149, %f12, %f13, %f14, %f27, %f28, %f29, %r382, %f393, %f394, %rd56, %r104);
	// inline asm
	ld.local.f32 	%f401, [%rd57];
	mul.f32 	%f402, %f46, %f401;
	cvt.sat.f32.f32	%f403, %f30;
	fma.rn.f32 	%f25, %f403, %f402, %f25;
	mul.f32 	%f404, %f30, 0f40800000;
	cvt.sat.f32.f32	%f405, %f404;
	mul.f32 	%f406, %f402, %f405;
	fma.rn.f32 	%f23, %f27, %f406, %f23;
	fma.rn.f32 	%f22, %f28, %f406, %f22;
	fma.rn.f32 	%f21, %f29, %f406, %f21;
	add.f32 	%f24, %f24, %f406;
	add.f32 	%f20, %f20, %f401;

BB0_21:
	add.s32 	%r9, %r9, 1;

BB0_22:
	add.s32 	%r383, %r383, 1;
	setp.lt.s32	%p38, %r383, %r2;
	@%p38 bra 	BB0_6;
	bra.uni 	BB0_23;

BB0_4:
	mov.f32 	%f21, %f20;
	mov.f32 	%f22, %f20;
	mov.f32 	%f23, %f20;
	mov.f32 	%f24, %f20;
	mov.f32 	%f25, %f20;

BB0_23:
	mov.pred 	%p151, %p13;

BB0_24:
	cvt.rn.f32.s32	%f407, %r9;
	mov.f32 	%f408, 0f3F800000;
	max.f32 	%f409, %f407, %f408;
	div.rn.f32 	%f1017, %f25, %f409;
	div.rn.f32 	%f1022, %f20, %f409;
	div.rn.f32 	%f1018, %f24, %f409;
	div.rn.f32 	%f1019, %f23, %f409;
	div.rn.f32 	%f1020, %f22, %f409;
	div.rn.f32 	%f1021, %f21, %f409;
	@!%p151 bra 	BB0_77;
	bra.uni 	BB0_25;

BB0_25:
	abs.f32 	%f955, %f959;
	abs.f32 	%f954, %f957;
	setp.gt.f32	%p39, %f954, %f955;
	neg.f32 	%f416, %f958;
	selp.f32	%f417, %f416, 0f00000000, %p39;
	neg.f32 	%f418, %f959;
	selp.f32	%f419, %f957, %f418, %p39;
	selp.f32	%f420, 0f00000000, %f958, %p39;
	mul.f32 	%f421, %f419, %f419;
	fma.rn.f32 	%f422, %f417, %f417, %f421;
	fma.rn.f32 	%f423, %f420, %f420, %f422;
	sqrt.rn.f32 	%f424, %f423;
	rcp.rn.f32 	%f425, %f424;
	mul.f32 	%f77, %f417, %f425;
	mul.f32 	%f78, %f419, %f425;
	mul.f32 	%f79, %f420, %f425;
	mov.f32 	%f993, 0f00000000;
	setp.lt.s32	%p40, %r3, 1;
	mov.f32 	%f994, %f993;
	mov.f32 	%f995, %f993;
	mov.f32 	%f996, %f993;
	mov.f32 	%f997, %f993;
	mov.f32 	%f998, %f993;
	@%p40 bra 	BB0_76;

	mad.lo.s32 	%r390, %r131, 1664525, 1013904223;
	cvt.rn.f32.s32	%f432, %r3;
	rcp.rn.f32 	%f80, %f432;
	add.u64 	%rd58, %SP, 8;
	cvta.to.local.u64 	%rd2, %rd58;
	mul.f32 	%f81, %f12, 0f3456BF95;
	mul.f32 	%f82, %f13, 0f3456BF95;
	mul.f32 	%f83, %f14, 0f3456BF95;
	add.u64 	%rd59, %SP, 0;
	cvta.to.local.u64 	%rd3, %rd59;
	mul.f32 	%f433, %f957, %f78;
	mul.f32 	%f434, %f958, %f77;
	sub.f32 	%f84, %f434, %f433;
	mul.f32 	%f435, %f959, %f77;
	mul.f32 	%f436, %f957, %f79;
	sub.f32 	%f85, %f436, %f435;
	mul.f32 	%f437, %f958, %f79;
	mul.f32 	%f438, %f959, %f78;
	sub.f32 	%f86, %f438, %f437;
	mov.f32 	%f993, 0f00000000;
	mov.u32 	%r153, 0;
	abs.f32 	%f439, %f82;
	abs.f32 	%f440, %f81;
	max.f32 	%f441, %f440, %f439;
	abs.f32 	%f442, %f83;
	max.f32 	%f443, %f441, %f442;
	mov.u32 	%r387, %r153;
	mov.f32 	%f994, %f993;
	mov.f32 	%f995, %f993;
	mov.f32 	%f996, %f993;
	mov.f32 	%f997, %f993;
	mov.f32 	%f998, %f993;

BB0_27:
	cvt.rn.f32.s32	%f93, %r387;
	max.f32 	%f94, %f443, %f262;
	mov.u32 	%r389, %r153;

BB0_28:
	mad.lo.s32 	%r155, %r390, 1664525, 1013904223;
	and.b32  	%r156, %r155, 16777215;
	cvt.rn.f32.u32	%f445, %r156;
	fma.rn.f32 	%f446, %f445, 0f33800000, %f93;
	mul.f32 	%f101, %f80, %f446;
	mad.lo.s32 	%r390, %r155, 1664525, 1013904223;
	and.b32  	%r157, %r390, 16777215;
	cvt.rn.f32.u32	%f447, %r157;
	cvt.rn.f32.s32	%f448, %r389;
	fma.rn.f32 	%f449, %f447, 0f33800000, %f448;
	mul.f32 	%f450, %f80, %f449;
	mul.f32 	%f451, %f101, %f101;
	sub.f32 	%f453, %f408, %f451;
	mov.f32 	%f454, 0f00000000;
	max.f32 	%f455, %f454, %f453;
	sqrt.rn.f32 	%f102, %f455;
	mul.f32 	%f1005, %f450, 0f40C90FDB;
	abs.f32 	%f104, %f1005;
	setp.neu.f32	%p41, %f104, 0f7F800000;
	mov.f32 	%f999, %f1005;
	@%p41 bra 	BB0_30;

	mul.rn.f32 	%f999, %f1005, %f454;

BB0_30:
	mul.f32 	%f457, %f999, 0f3F22F983;
	cvt.rni.s32.f32	%r400, %f457;
	cvt.rn.f32.s32	%f458, %r400;
	neg.f32 	%f459, %f458;
	mov.f32 	%f460, 0f3FC90FDA;
	fma.rn.f32 	%f461, %f459, %f460, %f999;
	mov.f32 	%f462, 0f33A22168;
	fma.rn.f32 	%f463, %f459, %f462, %f461;
	mov.f32 	%f464, 0f27C234C5;
	fma.rn.f32 	%f1000, %f459, %f464, %f463;
	abs.f32 	%f465, %f999;
	setp.leu.f32	%p42, %f465, 0f47CE4780;
	@%p42 bra 	BB0_41;

	mov.b32 	 %r21, %f999;
	shr.u32 	%r22, %r21, 23;
	shl.b32 	%r160, %r21, 8;
	or.b32  	%r23, %r160, -2147483648;
	mov.u32 	%r391, 0;
	mov.u64 	%rd305, 0;
	mov.u64 	%rd304, %rd2;
	mov.u32 	%r392, %r391;

BB0_32:
	.pragma "nounroll";
	shl.b64 	%rd61, %rd305, 2;
	mov.u64 	%rd62, __cudart_i2opi_f;
	add.s64 	%rd63, %rd62, %rd61;
	ld.const.u32 	%r163, [%rd63];
	// inline asm
	{
	mad.lo.cc.u32   %r161, %r163, %r23, %r392;
	madc.hi.u32     %r392, %r163, %r23,  0;
	}
	// inline asm
	st.local.u32 	[%rd304], %r161;
	add.s32 	%r391, %r391, 1;
	cvt.s64.s32	%rd305, %r391;
	mul.wide.s32 	%rd64, %r391, 4;
	add.s64 	%rd304, %rd2, %rd64;
	setp.ne.s32	%p43, %r391, 6;
	@%p43 bra 	BB0_32;

	and.b32  	%r166, %r22, 255;
	add.s32 	%r167, %r166, -128;
	shr.u32 	%r168, %r167, 5;
	and.b32  	%r28, %r21, -2147483648;
	st.local.u32 	[%rd2+24], %r392;
	mov.u32 	%r169, 6;
	sub.s32 	%r170, %r169, %r168;
	mul.wide.s32 	%rd65, %r170, 4;
	add.s64 	%rd9, %rd2, %rd65;
	ld.local.u32 	%r393, [%rd9];
	ld.local.u32 	%r394, [%rd9+-4];
	and.b32  	%r31, %r22, 31;
	setp.eq.s32	%p44, %r31, 0;
	@%p44 bra 	BB0_35;

	mov.u32 	%r171, 32;
	sub.s32 	%r172, %r171, %r31;
	shr.u32 	%r173, %r394, %r172;
	shl.b32 	%r174, %r393, %r31;
	add.s32 	%r393, %r173, %r174;
	ld.local.u32 	%r175, [%rd9+-8];
	shr.u32 	%r176, %r175, %r172;
	shl.b32 	%r177, %r394, %r31;
	add.s32 	%r394, %r176, %r177;

BB0_35:
	shr.u32 	%r178, %r394, 30;
	shl.b32 	%r179, %r393, 2;
	add.s32 	%r395, %r178, %r179;
	shl.b32 	%r37, %r394, 2;
	shr.u32 	%r180, %r395, 31;
	shr.u32 	%r181, %r393, 30;
	add.s32 	%r38, %r180, %r181;
	setp.eq.s32	%p45, %r180, 0;
	@%p45 bra 	BB0_36;
	bra.uni 	BB0_37;

BB0_36:
	mov.u32 	%r396, %r28;
	mov.u32 	%r397, %r37;
	bra.uni 	BB0_38;

BB0_37:
	not.b32 	%r182, %r395;
	neg.s32 	%r397, %r37;
	setp.eq.s32	%p46, %r37, 0;
	selp.u32	%r183, 1, 0, %p46;
	add.s32 	%r395, %r183, %r182;
	xor.b32  	%r396, %r28, -2147483648;

BB0_38:
	clz.b32 	%r399, %r395;
	setp.eq.s32	%p47, %r399, 0;
	shl.b32 	%r184, %r395, %r399;
	mov.u32 	%r185, 32;
	sub.s32 	%r186, %r185, %r399;
	shr.u32 	%r187, %r397, %r186;
	add.s32 	%r188, %r187, %r184;
	selp.b32	%r46, %r395, %r188, %p47;
	mov.u32 	%r189, -921707870;
	mul.hi.u32 	%r398, %r46, %r189;
	setp.eq.s32	%p48, %r28, 0;
	neg.s32 	%r190, %r38;
	selp.b32	%r400, %r38, %r190, %p48;
	setp.lt.s32	%p49, %r398, 1;
	@%p49 bra 	BB0_40;

	mul.lo.s32 	%r191, %r46, -921707870;
	shr.u32 	%r192, %r191, 31;
	shl.b32 	%r193, %r398, 1;
	add.s32 	%r398, %r192, %r193;
	add.s32 	%r399, %r399, 1;

BB0_40:
	mov.u32 	%r194, 126;
	sub.s32 	%r195, %r194, %r399;
	shl.b32 	%r196, %r195, 23;
	add.s32 	%r197, %r398, 1;
	shr.u32 	%r198, %r197, 7;
	add.s32 	%r199, %r198, 1;
	shr.u32 	%r200, %r199, 1;
	add.s32 	%r201, %r200, %r196;
	or.b32  	%r202, %r201, %r396;
	mov.b32 	 %f1000, %r202;

BB0_41:
	mul.rn.f32 	%f110, %f1000, %f1000;
	add.s32 	%r54, %r400, 1;
	and.b32  	%r55, %r54, 1;
	setp.eq.s32	%p50, %r55, 0;
	@%p50 bra 	BB0_43;
	bra.uni 	BB0_42;

BB0_43:
	mov.f32 	%f468, 0f3C08839E;
	mov.f32 	%f469, 0fB94CA1F9;
	fma.rn.f32 	%f1001, %f469, %f110, %f468;
	bra.uni 	BB0_44;

BB0_42:
	mov.f32 	%f466, 0fBAB6061A;
	mov.f32 	%f467, 0f37CCF5CE;
	fma.rn.f32 	%f1001, %f467, %f110, %f466;

BB0_44:
	@%p50 bra 	BB0_46;
	bra.uni 	BB0_45;

BB0_46:
	mov.f32 	%f473, 0fBE2AAAA3;
	fma.rn.f32 	%f474, %f1001, %f110, %f473;
	fma.rn.f32 	%f1002, %f474, %f110, %f454;
	bra.uni 	BB0_47;

BB0_45:
	mov.f32 	%f470, 0f3D2AAAA5;
	fma.rn.f32 	%f471, %f1001, %f110, %f470;
	mov.f32 	%f472, 0fBF000000;
	fma.rn.f32 	%f1002, %f471, %f110, %f472;

BB0_47:
	fma.rn.f32 	%f1003, %f1002, %f1000, %f1000;
	@%p50 bra 	BB0_49;

	fma.rn.f32 	%f1003, %f1002, %f110, %f408;

BB0_49:
	and.b32  	%r203, %r54, 2;
	setp.eq.s32	%p53, %r203, 0;
	@%p53 bra 	BB0_51;

	mov.f32 	%f478, 0fBF800000;
	fma.rn.f32 	%f1003, %f1003, %f478, %f454;

BB0_51:
	@%p41 bra 	BB0_53;

	mul.rn.f32 	%f1005, %f1005, %f454;

BB0_53:
	mul.f32 	%f480, %f1005, 0f3F22F983;
	cvt.rni.s32.f32	%r410, %f480;
	cvt.rn.f32.s32	%f481, %r410;
	neg.f32 	%f482, %f481;
	fma.rn.f32 	%f484, %f482, %f460, %f1005;
	fma.rn.f32 	%f486, %f482, %f462, %f484;
	fma.rn.f32 	%f1006, %f482, %f464, %f486;
	abs.f32 	%f488, %f1005;
	setp.leu.f32	%p55, %f488, 0f47CE4780;
	@%p55 bra 	BB0_64;

	mov.b32 	 %r57, %f1005;
	shr.u32 	%r58, %r57, 23;
	shl.b32 	%r206, %r57, 8;
	or.b32  	%r59, %r206, -2147483648;
	mov.u32 	%r401, 0;
	mov.u64 	%rd306, %rd2;
	mov.u64 	%rd307, %rd26;
	mov.u32 	%r402, %r401;

BB0_55:
	.pragma "nounroll";
	shl.b64 	%rd67, %rd307, 2;
	mov.u64 	%rd68, __cudart_i2opi_f;
	add.s64 	%rd69, %rd68, %rd67;
	ld.const.u32 	%r209, [%rd69];
	// inline asm
	{
	mad.lo.cc.u32   %r207, %r209, %r59, %r402;
	madc.hi.u32     %r402, %r209, %r59,  0;
	}
	// inline asm
	st.local.u32 	[%rd306], %r207;
	add.s32 	%r401, %r401, 1;
	cvt.s64.s32	%rd307, %r401;
	mul.wide.s32 	%rd70, %r401, 4;
	add.s64 	%rd306, %rd2, %rd70;
	setp.ne.s32	%p56, %r401, 6;
	@%p56 bra 	BB0_55;

	and.b32  	%r212, %r58, 255;
	add.s32 	%r213, %r212, -128;
	shr.u32 	%r214, %r213, 5;
	and.b32  	%r64, %r57, -2147483648;
	st.local.u32 	[%rd2+24], %r402;
	mov.u32 	%r215, 6;
	sub.s32 	%r216, %r215, %r214;
	mul.wide.s32 	%rd71, %r216, 4;
	add.s64 	%rd15, %rd2, %rd71;
	ld.local.u32 	%r403, [%rd15];
	ld.local.u32 	%r404, [%rd15+-4];
	and.b32  	%r67, %r58, 31;
	setp.eq.s32	%p57, %r67, 0;
	@%p57 bra 	BB0_58;

	mov.u32 	%r217, 32;
	sub.s32 	%r218, %r217, %r67;
	shr.u32 	%r219, %r404, %r218;
	shl.b32 	%r220, %r403, %r67;
	add.s32 	%r403, %r219, %r220;
	ld.local.u32 	%r221, [%rd15+-8];
	shr.u32 	%r222, %r221, %r218;
	shl.b32 	%r223, %r404, %r67;
	add.s32 	%r404, %r222, %r223;

BB0_58:
	shr.u32 	%r224, %r404, 30;
	shl.b32 	%r225, %r403, 2;
	add.s32 	%r405, %r224, %r225;
	shl.b32 	%r73, %r404, 2;
	shr.u32 	%r226, %r405, 31;
	shr.u32 	%r227, %r403, 30;
	add.s32 	%r74, %r226, %r227;
	setp.eq.s32	%p58, %r226, 0;
	@%p58 bra 	BB0_59;
	bra.uni 	BB0_60;

BB0_59:
	mov.u32 	%r406, %r64;
	mov.u32 	%r407, %r73;
	bra.uni 	BB0_61;

BB0_60:
	not.b32 	%r228, %r405;
	neg.s32 	%r407, %r73;
	setp.eq.s32	%p59, %r73, 0;
	selp.u32	%r229, 1, 0, %p59;
	add.s32 	%r405, %r229, %r228;
	xor.b32  	%r406, %r64, -2147483648;

BB0_61:
	clz.b32 	%r409, %r405;
	setp.eq.s32	%p60, %r409, 0;
	shl.b32 	%r230, %r405, %r409;
	mov.u32 	%r231, 32;
	sub.s32 	%r232, %r231, %r409;
	shr.u32 	%r233, %r407, %r232;
	add.s32 	%r234, %r233, %r230;
	selp.b32	%r82, %r405, %r234, %p60;
	mov.u32 	%r235, -921707870;
	mul.hi.u32 	%r408, %r82, %r235;
	setp.eq.s32	%p61, %r64, 0;
	neg.s32 	%r236, %r74;
	selp.b32	%r410, %r74, %r236, %p61;
	setp.lt.s32	%p62, %r408, 1;
	@%p62 bra 	BB0_63;

	mul.lo.s32 	%r237, %r82, -921707870;
	shr.u32 	%r238, %r237, 31;
	shl.b32 	%r239, %r408, 1;
	add.s32 	%r408, %r238, %r239;
	add.s32 	%r409, %r409, 1;

BB0_63:
	mov.u32 	%r240, 126;
	sub.s32 	%r241, %r240, %r409;
	shl.b32 	%r242, %r241, 23;
	add.s32 	%r243, %r408, 1;
	shr.u32 	%r244, %r243, 7;
	add.s32 	%r245, %r244, 1;
	shr.u32 	%r246, %r245, 1;
	add.s32 	%r247, %r246, %r242;
	or.b32  	%r248, %r247, %r406;
	mov.b32 	 %f1006, %r248;

BB0_64:
	mul.rn.f32 	%f127, %f1006, %f1006;
	and.b32  	%r90, %r410, 1;
	setp.eq.s32	%p63, %r90, 0;
	@%p63 bra 	BB0_66;
	bra.uni 	BB0_65;

BB0_66:
	mov.f32 	%f491, 0f3C08839E;
	mov.f32 	%f492, 0fB94CA1F9;
	fma.rn.f32 	%f1007, %f492, %f127, %f491;
	bra.uni 	BB0_67;

BB0_65:
	mov.f32 	%f489, 0fBAB6061A;
	mov.f32 	%f490, 0f37CCF5CE;
	fma.rn.f32 	%f1007, %f490, %f127, %f489;

BB0_67:
	@%p63 bra 	BB0_69;
	bra.uni 	BB0_68;

BB0_69:
	mov.f32 	%f496, 0fBE2AAAA3;
	fma.rn.f32 	%f497, %f1007, %f127, %f496;
	fma.rn.f32 	%f1008, %f497, %f127, %f454;
	bra.uni 	BB0_70;

BB0_68:
	mov.f32 	%f493, 0f3D2AAAA5;
	fma.rn.f32 	%f494, %f1007, %f127, %f493;
	mov.f32 	%f495, 0fBF000000;
	fma.rn.f32 	%f1008, %f494, %f127, %f495;

BB0_70:
	fma.rn.f32 	%f1009, %f1008, %f1006, %f1006;
	@%p63 bra 	BB0_72;

	fma.rn.f32 	%f1009, %f1008, %f127, %f408;

BB0_72:
	and.b32  	%r249, %r410, 2;
	setp.eq.s32	%p66, %r249, 0;
	@%p66 bra 	BB0_74;

	mov.f32 	%f501, 0fBF800000;
	fma.rn.f32 	%f1009, %f1009, %f501, %f454;

BB0_74:
	mul.f32 	%f510, %f102, %f1003;
	mul.f32 	%f511, %f102, %f1009;
	mul.f32 	%f512, %f77, %f511;
	mul.f32 	%f513, %f78, %f511;
	mul.f32 	%f514, %f79, %f511;
	fma.rn.f32 	%f515, %f86, %f510, %f512;
	fma.rn.f32 	%f516, %f85, %f510, %f513;
	fma.rn.f32 	%f517, %f84, %f510, %f514;
	fma.rn.f32 	%f505, %f957, %f101, %f515;
	fma.rn.f32 	%f506, %f958, %f101, %f516;
	fma.rn.f32 	%f507, %f959, %f101, %f517;
	mov.u32 	%r251, 0;
	st.local.u32 	[%rd3], %r251;
	ld.global.u32 	%r250, [root];
	mov.f32 	%f509, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r250, %f12, %f13, %f14, %f505, %f506, %f507, %r251, %f94, %f509, %rd59, %r104);
	// inline asm
	ld.local.f32 	%f518, [%rd3];
	setp.lt.f32	%p67, %f518, 0f00000000;
	selp.f32	%f519, 0f00000000, %f518, %p67;
	selp.f32	%f520, 0f00000000, 0f3F800000, %p67;
	add.f32 	%f993, %f993, %f520;
	fma.rn.f32 	%f996, %f505, %f519, %f996;
	fma.rn.f32 	%f995, %f506, %f519, %f995;
	fma.rn.f32 	%f994, %f507, %f519, %f994;
	add.f32 	%f997, %f997, %f519;
	mul.f32 	%f521, %f958, %f506;
	fma.rn.f32 	%f522, %f957, %f505, %f521;
	fma.rn.f32 	%f523, %f959, %f507, %f522;
	cvt.sat.f32.f32	%f524, %f523;
	fma.rn.f32 	%f998, %f519, %f524, %f998;
	add.s32 	%r389, %r389, 1;
	setp.lt.s32	%p68, %r389, %r3;
	@%p68 bra 	BB0_28;

	add.s32 	%r387, %r387, 1;
	setp.lt.s32	%p69, %r387, %r3;
	@%p69 bra 	BB0_27;

BB0_76:
	mul.lo.s32 	%r253, %r3, %r3;
	cvt.rn.f32.s32	%f525, %r253;
	div.rn.f32 	%f526, %f998, %f525;
	div.rn.f32 	%f1022, %f993, %f525;
	div.rn.f32 	%f1018, %f997, %f525;
	div.rn.f32 	%f1019, %f996, %f525;
	div.rn.f32 	%f1020, %f995, %f525;
	div.rn.f32 	%f1021, %f994, %f525;
	add.f32 	%f1017, %f526, %f526;

BB0_77:
	setp.gt.s32	%p70, %r1, -1;
	selp.f32	%f163, %f1022, %f1017, %p70;
	ld.global.u32 	%r412, [imageEnabled];
	and.b32  	%r254, %r412, 8;
	setp.eq.s32	%p71, %r254, 0;
	@%p71 bra 	BB0_90;

	cvt.u64.u32	%rd75, %r5;
	cvt.u64.u32	%rd76, %r6;
	mov.u64 	%rd79, image_Mask;
	cvta.global.u64 	%rd74, %rd79;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r103, %r103, %rd75, %rd76, %rd26, %rd26);
	// inline asm
	mov.f32 	%f529, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f530, %f529;
	fma.rn.f32 	%f531, %f530, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f164, %f531;
	abs.f32 	%f165, %f163;
	setp.lt.f32	%p72, %f165, 0f00800000;
	mul.f32 	%f532, %f165, 0f4B800000;
	selp.f32	%f533, 0fC3170000, 0fC2FE0000, %p72;
	selp.f32	%f534, %f532, %f165, %p72;
	mov.b32 	 %r257, %f534;
	and.b32  	%r258, %r257, 8388607;
	or.b32  	%r259, %r258, 1065353216;
	mov.b32 	 %f535, %r259;
	shr.u32 	%r260, %r257, 23;
	cvt.rn.f32.u32	%f536, %r260;
	add.f32 	%f537, %f533, %f536;
	setp.gt.f32	%p73, %f535, 0f3FB504F3;
	mul.f32 	%f538, %f535, 0f3F000000;
	add.f32 	%f539, %f537, 0f3F800000;
	selp.f32	%f540, %f538, %f535, %p73;
	selp.f32	%f541, %f539, %f537, %p73;
	add.f32 	%f542, %f540, 0fBF800000;
	add.f32 	%f528, %f540, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f527,%f528;
	// inline asm
	add.f32 	%f543, %f542, %f542;
	mul.f32 	%f544, %f527, %f543;
	mul.f32 	%f545, %f544, %f544;
	mov.f32 	%f546, 0f3C4CAF63;
	mov.f32 	%f547, 0f3B18F0FE;
	fma.rn.f32 	%f548, %f547, %f545, %f546;
	mov.f32 	%f549, 0f3DAAAABD;
	fma.rn.f32 	%f550, %f548, %f545, %f549;
	mul.rn.f32 	%f551, %f550, %f545;
	mul.rn.f32 	%f552, %f551, %f544;
	sub.f32 	%f553, %f542, %f544;
	neg.f32 	%f554, %f544;
	add.f32 	%f555, %f553, %f553;
	fma.rn.f32 	%f556, %f554, %f542, %f555;
	mul.rn.f32 	%f557, %f527, %f556;
	add.f32 	%f558, %f552, %f544;
	sub.f32 	%f559, %f544, %f558;
	add.f32 	%f560, %f552, %f559;
	add.f32 	%f561, %f557, %f560;
	add.f32 	%f562, %f558, %f561;
	sub.f32 	%f563, %f558, %f562;
	add.f32 	%f564, %f561, %f563;
	mov.f32 	%f565, 0f3F317200;
	mul.rn.f32 	%f566, %f541, %f565;
	mov.f32 	%f567, 0f35BFBE8E;
	mul.rn.f32 	%f568, %f541, %f567;
	add.f32 	%f569, %f566, %f562;
	sub.f32 	%f570, %f566, %f569;
	add.f32 	%f571, %f562, %f570;
	add.f32 	%f572, %f564, %f571;
	add.f32 	%f573, %f568, %f572;
	add.f32 	%f574, %f569, %f573;
	sub.f32 	%f575, %f569, %f574;
	add.f32 	%f576, %f573, %f575;
	mov.f32 	%f577, 0f3EE8BA2E;
	mul.rn.f32 	%f578, %f577, %f574;
	neg.f32 	%f579, %f578;
	fma.rn.f32 	%f580, %f577, %f574, %f579;
	fma.rn.f32 	%f581, %f577, %f576, %f580;
	mov.f32 	%f582, 0f00000000;
	fma.rn.f32 	%f583, %f582, %f574, %f581;
	add.rn.f32 	%f584, %f578, %f583;
	neg.f32 	%f585, %f584;
	add.rn.f32 	%f586, %f578, %f585;
	add.rn.f32 	%f587, %f586, %f583;
	mov.b32 	 %r261, %f584;
	setp.eq.s32	%p74, %r261, 1118925336;
	add.s32 	%r262, %r261, -1;
	mov.b32 	 %f588, %r262;
	add.f32 	%f589, %f587, 0f37000000;
	selp.f32	%f590, %f588, %f584, %p74;
	selp.f32	%f166, %f589, %f587, %p74;
	mul.f32 	%f591, %f590, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f592, %f591;
	mov.f32 	%f593, 0fBF317200;
	fma.rn.f32 	%f594, %f592, %f593, %f590;
	mov.f32 	%f595, 0fB5BFBE8E;
	fma.rn.f32 	%f596, %f592, %f595, %f594;
	mul.f32 	%f597, %f596, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f598, %f597;
	add.f32 	%f599, %f592, 0f00000000;
	ex2.approx.f32 	%f600, %f599;
	mul.f32 	%f601, %f598, %f600;
	setp.lt.f32	%p75, %f590, 0fC2D20000;
	selp.f32	%f602, 0f00000000, %f601, %p75;
	setp.gt.f32	%p76, %f590, 0f42D20000;
	selp.f32	%f1023, 0f7F800000, %f602, %p76;
	setp.eq.f32	%p77, %f1023, 0f7F800000;
	@%p77 bra 	BB0_80;

	fma.rn.f32 	%f1023, %f1023, %f166, %f1023;

BB0_80:
	setp.lt.f32	%p78, %f163, 0f00000000;
	setp.eq.f32	%p79, %f164, 0f3F800000;
	and.pred  	%p3, %p78, %p79;
	mov.b32 	 %r263, %f1023;
	xor.b32  	%r264, %r263, -2147483648;
	mov.b32 	 %f603, %r264;
	selp.f32	%f1025, %f603, %f1023, %p3;
	setp.eq.f32	%p80, %f163, 0f00000000;
	@%p80 bra 	BB0_83;
	bra.uni 	BB0_81;

BB0_83:
	add.f32 	%f606, %f163, %f163;
	selp.f32	%f1025, %f606, 0f00000000, %p79;
	bra.uni 	BB0_84;

BB0_148:
	mov.u64 	%rd220, image_HDR;
	cvta.global.u64 	%rd215, %rd220;
	mov.u32 	%r350, 8;
	mov.u64 	%rd219, 0;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r103, %r350, %rd19, %rd20, %rd219, %rd219);
	// inline asm
	mov.f32 	%f919, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f919;}

	// inline asm
	mov.u16 	%rs99, 0;
	st.v4.u16 	[%rd214], {%rs98, %rs98, %rs98, %rs99};

BB0_149:
	ld.global.u32 	%r351, [additive];
	setp.eq.s32	%p147, %r351, 0;
	@%p147 bra 	BB0_151;

	mov.u64 	%rd233, image_RNM0;
	cvta.global.u64 	%rd222, %rd233;
	mov.u32 	%r355, 8;
	mov.u64 	%rd232, 0;
	// inline asm
	call (%rd221), _rt_buffer_get_64, (%rd222, %r103, %r355, %rd19, %rd20, %rd232, %rd232);
	// inline asm
	ld.v4.u16 	{%rs106, %rs107, %rs108, %rs109}, [%rd221];
	// inline asm
	{  cvt.f32.f16 %f920, %rs106;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f921, %rs107;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f922, %rs108;}

	// inline asm
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd222, %r103, %r355, %rd19, %rd20, %rd232, %rd232);
	// inline asm
	add.f32 	%f923, %f920, 0f00000000;
	add.f32 	%f924, %f921, 0f00000000;
	add.f32 	%f925, %f922, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f925;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f924;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs103, %f923;}

	// inline asm
	mov.u16 	%rs110, 0;
	st.v4.u16 	[%rd227], {%rs103, %rs104, %rs105, %rs110};
	bra.uni 	BB0_152;

BB0_151:
	mov.u64 	%rd240, image_RNM0;
	cvta.global.u64 	%rd235, %rd240;
	mov.u32 	%r357, 8;
	mov.u64 	%rd239, 0;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r103, %r357, %rd19, %rd20, %rd239, %rd239);
	// inline asm
	mov.f32 	%f926, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f926;}

	// inline asm
	mov.u16 	%rs112, 0;
	st.v4.u16 	[%rd234], {%rs111, %rs111, %rs111, %rs112};

BB0_152:
	ld.global.u32 	%r358, [additive];
	setp.eq.s32	%p148, %r358, 0;
	@%p148 bra 	BB0_154;

	mov.u64 	%rd253, image_RNM1;
	cvta.global.u64 	%rd242, %rd253;
	mov.u32 	%r362, 8;
	mov.u64 	%rd252, 0;
	// inline asm
	call (%rd241), _rt_buffer_get_64, (%rd242, %r103, %r362, %rd19, %rd20, %rd252, %rd252);
	// inline asm
	ld.v4.u16 	{%rs119, %rs120, %rs121, %rs122}, [%rd241];
	// inline asm
	{  cvt.f32.f16 %f927, %rs119;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f928, %rs120;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f929, %rs121;}

	// inline asm
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd242, %r103, %r362, %rd19, %rd20, %rd252, %rd252);
	// inline asm
	add.f32 	%f930, %f927, 0f00000000;
	add.f32 	%f931, %f928, 0f00000000;
	add.f32 	%f932, %f929, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs118, %f932;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f931;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f930;}

	// inline asm
	mov.u16 	%rs123, 0;
	st.v4.u16 	[%rd247], {%rs116, %rs117, %rs118, %rs123};
	bra.uni 	BB0_155;

BB0_154:
	mov.u64 	%rd260, image_RNM1;
	cvta.global.u64 	%rd255, %rd260;
	mov.u32 	%r364, 8;
	mov.u64 	%rd259, 0;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r103, %r364, %rd19, %rd20, %rd259, %rd259);
	// inline asm
	mov.f32 	%f933, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs124, %f933;}

	// inline asm
	mov.u16 	%rs125, 0;
	st.v4.u16 	[%rd254], {%rs124, %rs124, %rs124, %rs125};

BB0_155:
	ld.global.u32 	%r365, [additive];
	setp.eq.s32	%p149, %r365, 0;
	@%p149 bra 	BB0_157;

	mov.u64 	%rd273, image_RNM2;
	cvta.global.u64 	%rd262, %rd273;
	mov.u32 	%r369, 8;
	mov.u64 	%rd272, 0;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r103, %r369, %rd19, %rd20, %rd272, %rd272);
	// inline asm
	ld.v4.u16 	{%rs132, %rs133, %rs134, %rs135}, [%rd261];
	// inline asm
	{  cvt.f32.f16 %f934, %rs132;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f935, %rs133;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f936, %rs134;}

	// inline asm
	// inline asm
	call (%rd267), _rt_buffer_get_64, (%rd262, %r103, %r369, %rd19, %rd20, %rd272, %rd272);
	// inline asm
	add.f32 	%f937, %f934, 0f00000000;
	add.f32 	%f938, %f935, 0f00000000;
	add.f32 	%f939, %f936, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs131, %f939;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs130, %f938;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f937;}

	// inline asm
	mov.u16 	%rs136, 0;
	st.v4.u16 	[%rd267], {%rs129, %rs130, %rs131, %rs136};
	bra.uni 	BB0_158;

BB0_157:
	mov.u64 	%rd280, image_RNM2;
	cvta.global.u64 	%rd275, %rd280;
	mov.u32 	%r371, 8;
	mov.u64 	%rd279, 0;
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd275, %r103, %r371, %rd19, %rd20, %rd279, %rd279);
	// inline asm
	mov.f32 	%f940, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs137, %f940;}

	// inline asm
	mov.u16 	%rs138, 0;
	st.v4.u16 	[%rd274], {%rs137, %rs137, %rs137, %rs138};

BB0_158:
	ld.global.u32 	%r372, [additive];
	setp.eq.s32	%p150, %r372, 0;
	@%p150 bra 	BB0_160;

	mov.u64 	%rd293, image_RNM3;
	cvta.global.u64 	%rd282, %rd293;
	mov.u32 	%r376, 8;
	mov.u64 	%rd292, 0;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r103, %r376, %rd19, %rd20, %rd292, %rd292);
	// inline asm
	ld.v4.u16 	{%rs145, %rs146, %rs147, %rs148}, [%rd281];
	// inline asm
	{  cvt.f32.f16 %f941, %rs145;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f942, %rs146;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f943, %rs147;}

	// inline asm
	// inline asm
	call (%rd287), _rt_buffer_get_64, (%rd282, %r103, %r376, %rd19, %rd20, %rd292, %rd292);
	// inline asm
	add.f32 	%f944, %f941, 0f00000000;
	add.f32 	%f945, %f942, 0f00000000;
	add.f32 	%f946, %f943, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs144, %f946;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs143, %f945;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs142, %f944;}

	// inline asm
	mov.u16 	%rs149, 0;
	st.v4.u16 	[%rd287], {%rs142, %rs143, %rs144, %rs149};
	bra.uni 	BB0_161;

BB0_160:
	mov.u64 	%rd300, image_RNM3;
	cvta.global.u64 	%rd295, %rd300;
	mov.u32 	%r378, 8;
	mov.u64 	%rd299, 0;
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd295, %r103, %r378, %rd19, %rd20, %rd299, %rd299);
	// inline asm
	mov.f32 	%f947, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs150, %f947;}

	// inline asm
	mov.u16 	%rs151, 0;
	st.v4.u16 	[%rd294], {%rs150, %rs150, %rs150, %rs151};
	bra.uni 	BB0_161;

BB0_81:
	setp.geu.f32	%p81, %f163, 0f00000000;
	@%p81 bra 	BB0_84;

	cvt.rzi.f32.f32	%f605, %f577;
	setp.neu.f32	%p82, %f605, 0f3EE8BA2E;
	selp.f32	%f1025, 0f7FFFFFFF, %f1025, %p82;

BB0_84:
	add.f32 	%f607, %f165, 0f3EE8BA2E;
	mov.b32 	 %r265, %f607;
	setp.lt.s32	%p84, %r265, 2139095040;
	@%p84 bra 	BB0_89;

	setp.gtu.f32	%p85, %f165, 0f7F800000;
	@%p85 bra 	BB0_88;
	bra.uni 	BB0_86;

BB0_88:
	add.f32 	%f1025, %f163, 0f3EE8BA2E;
	bra.uni 	BB0_89;

BB0_86:
	setp.neu.f32	%p86, %f165, 0f7F800000;
	@%p86 bra 	BB0_89;

	selp.f32	%f1025, 0fFF800000, 0f7F800000, %p3;

BB0_89:
	mul.f32 	%f608, %f1025, 0f437F0000;
	setp.eq.f32	%p87, %f163, 0f3F800000;
	selp.f32	%f609, 0f437F0000, %f608, %p87;
	cvt.rzi.u32.f32	%r266, %f609;
	cvt.u16.u32	%rs14, %r266;
	mov.u16 	%rs15, 255;
	st.v2.u8 	[%rd73], {%rs14, %rs15};
	ld.global.u32 	%r412, [imageEnabled];

BB0_90:
	ld.global.f32 	%f610, [lightColor];
	mul.f32 	%f177, %f1017, %f610;
	ld.global.f32 	%f611, [lightColor+4];
	mul.f32 	%f178, %f1017, %f611;
	ld.global.f32 	%f612, [lightColor+8];
	mul.f32 	%f179, %f1017, %f612;
	and.b32  	%r267, %r412, 1;
	setp.eq.b32	%p88, %r267, 1;
	@!%p88 bra 	BB0_125;
	bra.uni 	BB0_91;

BB0_91:
	mov.f32 	%f615, 0f3E666666;
	cvt.rzi.f32.f32	%f616, %f615;
	fma.rn.f32 	%f617, %f616, 0fC0000000, 0f3EE66666;
	abs.f32 	%f180, %f617;
	abs.f32 	%f181, %f177;
	setp.lt.f32	%p89, %f181, 0f00800000;
	mul.f32 	%f618, %f181, 0f4B800000;
	selp.f32	%f619, 0fC3170000, 0fC2FE0000, %p89;
	selp.f32	%f620, %f618, %f181, %p89;
	mov.b32 	 %r268, %f620;
	and.b32  	%r269, %r268, 8388607;
	or.b32  	%r270, %r269, 1065353216;
	mov.b32 	 %f621, %r270;
	shr.u32 	%r271, %r268, 23;
	cvt.rn.f32.u32	%f622, %r271;
	add.f32 	%f623, %f619, %f622;
	setp.gt.f32	%p90, %f621, 0f3FB504F3;
	mul.f32 	%f624, %f621, 0f3F000000;
	add.f32 	%f625, %f623, 0f3F800000;
	selp.f32	%f626, %f624, %f621, %p90;
	selp.f32	%f627, %f625, %f623, %p90;
	add.f32 	%f628, %f626, 0fBF800000;
	add.f32 	%f614, %f626, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f613,%f614;
	// inline asm
	add.f32 	%f629, %f628, %f628;
	mul.f32 	%f630, %f613, %f629;
	mul.f32 	%f631, %f630, %f630;
	mov.f32 	%f632, 0f3C4CAF63;
	mov.f32 	%f633, 0f3B18F0FE;
	fma.rn.f32 	%f634, %f633, %f631, %f632;
	mov.f32 	%f635, 0f3DAAAABD;
	fma.rn.f32 	%f636, %f634, %f631, %f635;
	mul.rn.f32 	%f637, %f636, %f631;
	mul.rn.f32 	%f638, %f637, %f630;
	sub.f32 	%f639, %f628, %f630;
	neg.f32 	%f640, %f630;
	add.f32 	%f641, %f639, %f639;
	fma.rn.f32 	%f642, %f640, %f628, %f641;
	mul.rn.f32 	%f643, %f613, %f642;
	add.f32 	%f644, %f638, %f630;
	sub.f32 	%f645, %f630, %f644;
	add.f32 	%f646, %f638, %f645;
	add.f32 	%f647, %f643, %f646;
	add.f32 	%f648, %f644, %f647;
	sub.f32 	%f649, %f644, %f648;
	add.f32 	%f650, %f647, %f649;
	mov.f32 	%f651, 0f3F317200;
	mul.rn.f32 	%f652, %f627, %f651;
	mov.f32 	%f653, 0f35BFBE8E;
	mul.rn.f32 	%f654, %f627, %f653;
	add.f32 	%f655, %f652, %f648;
	sub.f32 	%f656, %f652, %f655;
	add.f32 	%f657, %f648, %f656;
	add.f32 	%f658, %f650, %f657;
	add.f32 	%f659, %f654, %f658;
	add.f32 	%f660, %f655, %f659;
	sub.f32 	%f661, %f655, %f660;
	add.f32 	%f662, %f659, %f661;
	mov.f32 	%f663, 0f3EE66666;
	mul.rn.f32 	%f664, %f663, %f660;
	neg.f32 	%f665, %f664;
	fma.rn.f32 	%f666, %f663, %f660, %f665;
	fma.rn.f32 	%f667, %f663, %f662, %f666;
	mov.f32 	%f668, 0f00000000;
	fma.rn.f32 	%f669, %f668, %f660, %f667;
	add.rn.f32 	%f670, %f664, %f669;
	neg.f32 	%f671, %f670;
	add.rn.f32 	%f672, %f664, %f671;
	add.rn.f32 	%f673, %f672, %f669;
	mov.b32 	 %r272, %f670;
	setp.eq.s32	%p91, %r272, 1118925336;
	add.s32 	%r273, %r272, -1;
	mov.b32 	 %f674, %r273;
	add.f32 	%f675, %f673, 0f37000000;
	selp.f32	%f676, %f674, %f670, %p91;
	selp.f32	%f182, %f675, %f673, %p91;
	mul.f32 	%f677, %f676, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f678, %f677;
	mov.f32 	%f679, 0fBF317200;
	fma.rn.f32 	%f680, %f678, %f679, %f676;
	mov.f32 	%f681, 0fB5BFBE8E;
	fma.rn.f32 	%f682, %f678, %f681, %f680;
	mul.f32 	%f683, %f682, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f684, %f683;
	add.f32 	%f685, %f678, 0f00000000;
	ex2.approx.f32 	%f686, %f685;
	mul.f32 	%f687, %f684, %f686;
	setp.lt.f32	%p92, %f676, 0fC2D20000;
	selp.f32	%f688, 0f00000000, %f687, %p92;
	setp.gt.f32	%p93, %f676, 0f42D20000;
	selp.f32	%f1026, 0f7F800000, %f688, %p93;
	setp.eq.f32	%p94, %f1026, 0f7F800000;
	@%p94 bra 	BB0_93;

	fma.rn.f32 	%f1026, %f1026, %f182, %f1026;

BB0_93:
	setp.lt.f32	%p95, %f177, 0f00000000;
	setp.eq.f32	%p96, %f180, 0f3F800000;
	and.pred  	%p4, %p95, %p96;
	mov.b32 	 %r274, %f1026;
	xor.b32  	%r275, %r274, -2147483648;
	mov.b32 	 %f689, %r275;
	selp.f32	%f1028, %f689, %f1026, %p4;
	setp.eq.f32	%p97, %f177, 0f00000000;
	@%p97 bra 	BB0_96;
	bra.uni 	BB0_94;

BB0_96:
	add.f32 	%f692, %f177, %f177;
	selp.f32	%f1028, %f692, 0f00000000, %p96;
	bra.uni 	BB0_97;

BB0_94:
	setp.geu.f32	%p98, %f177, 0f00000000;
	@%p98 bra 	BB0_97;

	cvt.rzi.f32.f32	%f691, %f663;
	setp.neu.f32	%p99, %f691, 0f3EE66666;
	selp.f32	%f1028, 0f7FFFFFFF, %f1028, %p99;

BB0_97:
	add.f32 	%f693, %f181, 0f3EE66666;
	mov.b32 	 %r276, %f693;
	setp.lt.s32	%p101, %r276, 2139095040;
	@%p101 bra 	BB0_102;

	setp.gtu.f32	%p102, %f181, 0f7F800000;
	@%p102 bra 	BB0_101;
	bra.uni 	BB0_99;

BB0_101:
	add.f32 	%f1028, %f177, 0f3EE66666;
	bra.uni 	BB0_102;

BB0_99:
	setp.neu.f32	%p103, %f181, 0f7F800000;
	@%p103 bra 	BB0_102;

	selp.f32	%f1028, 0fFF800000, 0f7F800000, %p4;

BB0_102:
	setp.eq.f32	%p104, %f177, 0f3F800000;
	selp.f32	%f193, 0f3F800000, %f1028, %p104;
	abs.f32 	%f194, %f178;
	setp.lt.f32	%p105, %f194, 0f00800000;
	mul.f32 	%f696, %f194, 0f4B800000;
	selp.f32	%f697, 0fC3170000, 0fC2FE0000, %p105;
	selp.f32	%f698, %f696, %f194, %p105;
	mov.b32 	 %r277, %f698;
	and.b32  	%r278, %r277, 8388607;
	or.b32  	%r279, %r278, 1065353216;
	mov.b32 	 %f699, %r279;
	shr.u32 	%r280, %r277, 23;
	cvt.rn.f32.u32	%f700, %r280;
	add.f32 	%f701, %f697, %f700;
	setp.gt.f32	%p106, %f699, 0f3FB504F3;
	mul.f32 	%f702, %f699, 0f3F000000;
	add.f32 	%f703, %f701, 0f3F800000;
	selp.f32	%f704, %f702, %f699, %p106;
	selp.f32	%f705, %f703, %f701, %p106;
	add.f32 	%f706, %f704, 0fBF800000;
	add.f32 	%f695, %f704, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f694,%f695;
	// inline asm
	add.f32 	%f707, %f706, %f706;
	mul.f32 	%f708, %f694, %f707;
	mul.f32 	%f709, %f708, %f708;
	fma.rn.f32 	%f712, %f633, %f709, %f632;
	fma.rn.f32 	%f714, %f712, %f709, %f635;
	mul.rn.f32 	%f715, %f714, %f709;
	mul.rn.f32 	%f716, %f715, %f708;
	sub.f32 	%f717, %f706, %f708;
	neg.f32 	%f718, %f708;
	add.f32 	%f719, %f717, %f717;
	fma.rn.f32 	%f720, %f718, %f706, %f719;
	mul.rn.f32 	%f721, %f694, %f720;
	add.f32 	%f722, %f716, %f708;
	sub.f32 	%f723, %f708, %f722;
	add.f32 	%f724, %f716, %f723;
	add.f32 	%f725, %f721, %f724;
	add.f32 	%f726, %f722, %f725;
	sub.f32 	%f727, %f722, %f726;
	add.f32 	%f728, %f725, %f727;
	mul.rn.f32 	%f730, %f705, %f651;
	mul.rn.f32 	%f732, %f705, %f653;
	add.f32 	%f733, %f730, %f726;
	sub.f32 	%f734, %f730, %f733;
	add.f32 	%f735, %f726, %f734;
	add.f32 	%f736, %f728, %f735;
	add.f32 	%f737, %f732, %f736;
	add.f32 	%f738, %f733, %f737;
	sub.f32 	%f739, %f733, %f738;
	add.f32 	%f740, %f737, %f739;
	mul.rn.f32 	%f742, %f663, %f738;
	neg.f32 	%f743, %f742;
	fma.rn.f32 	%f744, %f663, %f738, %f743;
	fma.rn.f32 	%f745, %f663, %f740, %f744;
	fma.rn.f32 	%f747, %f668, %f738, %f745;
	add.rn.f32 	%f748, %f742, %f747;
	neg.f32 	%f749, %f748;
	add.rn.f32 	%f750, %f742, %f749;
	add.rn.f32 	%f751, %f750, %f747;
	mov.b32 	 %r281, %f748;
	setp.eq.s32	%p107, %r281, 1118925336;
	add.s32 	%r282, %r281, -1;
	mov.b32 	 %f752, %r282;
	add.f32 	%f753, %f751, 0f37000000;
	selp.f32	%f754, %f752, %f748, %p107;
	selp.f32	%f195, %f753, %f751, %p107;
	mul.f32 	%f755, %f754, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f756, %f755;
	fma.rn.f32 	%f758, %f756, %f679, %f754;
	fma.rn.f32 	%f760, %f756, %f681, %f758;
	mul.f32 	%f761, %f760, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f762, %f761;
	add.f32 	%f763, %f756, 0f00000000;
	ex2.approx.f32 	%f764, %f763;
	mul.f32 	%f765, %f762, %f764;
	setp.lt.f32	%p108, %f754, 0fC2D20000;
	selp.f32	%f766, 0f00000000, %f765, %p108;
	setp.gt.f32	%p109, %f754, 0f42D20000;
	selp.f32	%f1029, 0f7F800000, %f766, %p109;
	setp.eq.f32	%p110, %f1029, 0f7F800000;
	@%p110 bra 	BB0_104;

	fma.rn.f32 	%f1029, %f1029, %f195, %f1029;

BB0_104:
	setp.lt.f32	%p111, %f178, 0f00000000;
	and.pred  	%p5, %p111, %p96;
	mov.b32 	 %r283, %f1029;
	xor.b32  	%r284, %r283, -2147483648;
	mov.b32 	 %f767, %r284;
	selp.f32	%f1031, %f767, %f1029, %p5;
	setp.eq.f32	%p113, %f178, 0f00000000;
	@%p113 bra 	BB0_107;
	bra.uni 	BB0_105;

BB0_107:
	add.f32 	%f770, %f178, %f178;
	selp.f32	%f1031, %f770, 0f00000000, %p96;
	bra.uni 	BB0_108;

BB0_105:
	setp.geu.f32	%p114, %f178, 0f00000000;
	@%p114 bra 	BB0_108;

	cvt.rzi.f32.f32	%f769, %f663;
	setp.neu.f32	%p115, %f769, 0f3EE66666;
	selp.f32	%f1031, 0f7FFFFFFF, %f1031, %p115;

BB0_108:
	add.f32 	%f771, %f194, 0f3EE66666;
	mov.b32 	 %r285, %f771;
	setp.lt.s32	%p117, %r285, 2139095040;
	@%p117 bra 	BB0_113;

	setp.gtu.f32	%p118, %f194, 0f7F800000;
	@%p118 bra 	BB0_112;
	bra.uni 	BB0_110;

BB0_112:
	add.f32 	%f1031, %f178, 0f3EE66666;
	bra.uni 	BB0_113;

BB0_110:
	setp.neu.f32	%p119, %f194, 0f7F800000;
	@%p119 bra 	BB0_113;

	selp.f32	%f1031, 0fFF800000, 0f7F800000, %p5;

BB0_113:
	setp.eq.f32	%p120, %f178, 0f3F800000;
	selp.f32	%f206, 0f3F800000, %f1031, %p120;
	abs.f32 	%f207, %f179;
	setp.lt.f32	%p121, %f207, 0f00800000;
	mul.f32 	%f774, %f207, 0f4B800000;
	selp.f32	%f775, 0fC3170000, 0fC2FE0000, %p121;
	selp.f32	%f776, %f774, %f207, %p121;
	mov.b32 	 %r286, %f776;
	and.b32  	%r287, %r286, 8388607;
	or.b32  	%r288, %r287, 1065353216;
	mov.b32 	 %f777, %r288;
	shr.u32 	%r289, %r286, 23;
	cvt.rn.f32.u32	%f778, %r289;
	add.f32 	%f779, %f775, %f778;
	setp.gt.f32	%p122, %f777, 0f3FB504F3;
	mul.f32 	%f780, %f777, 0f3F000000;
	add.f32 	%f781, %f779, 0f3F800000;
	selp.f32	%f782, %f780, %f777, %p122;
	selp.f32	%f783, %f781, %f779, %p122;
	add.f32 	%f784, %f782, 0fBF800000;
	add.f32 	%f773, %f782, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f772,%f773;
	// inline asm
	add.f32 	%f785, %f784, %f784;
	mul.f32 	%f786, %f772, %f785;
	mul.f32 	%f787, %f786, %f786;
	fma.rn.f32 	%f790, %f633, %f787, %f632;
	fma.rn.f32 	%f792, %f790, %f787, %f635;
	mul.rn.f32 	%f793, %f792, %f787;
	mul.rn.f32 	%f794, %f793, %f786;
	sub.f32 	%f795, %f784, %f786;
	neg.f32 	%f796, %f786;
	add.f32 	%f797, %f795, %f795;
	fma.rn.f32 	%f798, %f796, %f784, %f797;
	mul.rn.f32 	%f799, %f772, %f798;
	add.f32 	%f800, %f794, %f786;
	sub.f32 	%f801, %f786, %f800;
	add.f32 	%f802, %f794, %f801;
	add.f32 	%f803, %f799, %f802;
	add.f32 	%f804, %f800, %f803;
	sub.f32 	%f805, %f800, %f804;
	add.f32 	%f806, %f803, %f805;
	mul.rn.f32 	%f808, %f783, %f651;
	mul.rn.f32 	%f810, %f783, %f653;
	add.f32 	%f811, %f808, %f804;
	sub.f32 	%f812, %f808, %f811;
	add.f32 	%f813, %f804, %f812;
	add.f32 	%f814, %f806, %f813;
	add.f32 	%f815, %f810, %f814;
	add.f32 	%f816, %f811, %f815;
	sub.f32 	%f817, %f811, %f816;
	add.f32 	%f818, %f815, %f817;
	mul.rn.f32 	%f820, %f663, %f816;
	neg.f32 	%f821, %f820;
	fma.rn.f32 	%f822, %f663, %f816, %f821;
	fma.rn.f32 	%f823, %f663, %f818, %f822;
	fma.rn.f32 	%f825, %f668, %f816, %f823;
	add.rn.f32 	%f826, %f820, %f825;
	neg.f32 	%f827, %f826;
	add.rn.f32 	%f828, %f820, %f827;
	add.rn.f32 	%f829, %f828, %f825;
	mov.b32 	 %r290, %f826;
	setp.eq.s32	%p123, %r290, 1118925336;
	add.s32 	%r291, %r290, -1;
	mov.b32 	 %f830, %r291;
	add.f32 	%f831, %f829, 0f37000000;
	selp.f32	%f832, %f830, %f826, %p123;
	selp.f32	%f208, %f831, %f829, %p123;
	mul.f32 	%f833, %f832, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f834, %f833;
	fma.rn.f32 	%f836, %f834, %f679, %f832;
	fma.rn.f32 	%f838, %f834, %f681, %f836;
	mul.f32 	%f839, %f838, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f840, %f839;
	add.f32 	%f841, %f834, 0f00000000;
	ex2.approx.f32 	%f842, %f841;
	mul.f32 	%f843, %f840, %f842;
	setp.lt.f32	%p124, %f832, 0fC2D20000;
	selp.f32	%f844, 0f00000000, %f843, %p124;
	setp.gt.f32	%p125, %f832, 0f42D20000;
	selp.f32	%f1032, 0f7F800000, %f844, %p125;
	setp.eq.f32	%p126, %f1032, 0f7F800000;
	@%p126 bra 	BB0_115;

	fma.rn.f32 	%f1032, %f1032, %f208, %f1032;

BB0_115:
	setp.lt.f32	%p127, %f179, 0f00000000;
	and.pred  	%p6, %p127, %p96;
	mov.b32 	 %r292, %f1032;
	xor.b32  	%r293, %r292, -2147483648;
	mov.b32 	 %f845, %r293;
	selp.f32	%f1034, %f845, %f1032, %p6;
	setp.eq.f32	%p129, %f179, 0f00000000;
	@%p129 bra 	BB0_118;
	bra.uni 	BB0_116;

BB0_118:
	add.f32 	%f848, %f179, %f179;
	selp.f32	%f1034, %f848, 0f00000000, %p96;
	bra.uni 	BB0_119;

BB0_116:
	setp.geu.f32	%p130, %f179, 0f00000000;
	@%p130 bra 	BB0_119;

	cvt.rzi.f32.f32	%f847, %f663;
	setp.neu.f32	%p131, %f847, 0f3EE66666;
	selp.f32	%f1034, 0f7FFFFFFF, %f1034, %p131;

BB0_119:
	add.f32 	%f849, %f207, 0f3EE66666;
	mov.b32 	 %r294, %f849;
	setp.lt.s32	%p133, %r294, 2139095040;
	@%p133 bra 	BB0_124;

	setp.gtu.f32	%p134, %f207, 0f7F800000;
	@%p134 bra 	BB0_123;
	bra.uni 	BB0_121;

BB0_123:
	add.f32 	%f1034, %f179, 0f3EE66666;
	bra.uni 	BB0_124;

BB0_121:
	setp.neu.f32	%p135, %f207, 0f7F800000;
	@%p135 bra 	BB0_124;

	selp.f32	%f1034, 0fFF800000, 0f7F800000, %p6;

BB0_124:
	setp.eq.f32	%p136, %f179, 0f3F800000;
	selp.f32	%f850, 0f3F800000, %f1034, %p136;
	cvt.u64.u32	%rd83, %r6;
	cvt.u64.u32	%rd82, %r5;
	mov.u64 	%rd86, image;
	cvta.global.u64 	%rd81, %rd86;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r103, %r104, %rd82, %rd83, %rd26, %rd26);
	// inline asm
	cvt.sat.f32.f32	%f851, %f850;
	mul.f32 	%f852, %f851, 0f437FFD71;
	cvt.rzi.u32.f32	%r297, %f852;
	cvt.sat.f32.f32	%f853, %f206;
	mul.f32 	%f854, %f853, 0f437FFD71;
	cvt.rzi.u32.f32	%r298, %f854;
	cvt.sat.f32.f32	%f855, %f193;
	mul.f32 	%f856, %f855, 0f437FFD71;
	cvt.rzi.u32.f32	%r299, %f856;
	cvt.u16.u32	%rs16, %r297;
	cvt.u16.u32	%rs17, %r299;
	cvt.u16.u32	%rs18, %r298;
	mov.u16 	%rs19, 255;
	st.v4.u8 	[%rd80], {%rs16, %rs18, %rs17, %rs19};
	ld.global.u32 	%r412, [imageEnabled];

BB0_125:
	cvt.u64.u32	%rd17, %r5;
	cvt.u64.u32	%rd18, %r6;
	and.b32  	%r300, %r412, 4;
	setp.eq.s32	%p137, %r300, 0;
	@%p137 bra 	BB0_129;

	ld.global.u32 	%r301, [additive];
	setp.eq.s32	%p138, %r301, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs20, %f408;}

	// inline asm
	@%p138 bra 	BB0_128;

	mov.u64 	%rd99, image_HDR;
	cvta.global.u64 	%rd88, %rd99;
	mov.u32 	%r305, 8;
	// inline asm
	call (%rd87), _rt_buffer_get_64, (%rd88, %r103, %r305, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs27, %rs28, %rs29, %rs30}, [%rd87];
	// inline asm
	{  cvt.f32.f16 %f858, %rs27;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f859, %rs28;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f860, %rs29;}

	// inline asm
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd88, %r103, %r305, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f861, %f177, %f858;
	add.f32 	%f862, %f178, %f859;
	add.f32 	%f863, %f179, %f860;
	// inline asm
	{  cvt.rn.f16.f32 %rs26, %f863;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f862;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f861;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs24, %rs25, %rs26, %rs20};
	bra.uni 	BB0_129;

BB0_128:
	mov.u64 	%rd106, image_HDR;
	cvta.global.u64 	%rd101, %rd106;
	mov.u32 	%r307, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r103, %r307, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f179;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f178;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f177;}

	// inline asm
	st.v4.u16 	[%rd100], {%rs31, %rs32, %rs33, %rs20};

BB0_129:
	selp.f32	%f868, 0f3F000000, 0f3E800000, %p151;
	mul.f32 	%f219, %f868, %f1018;
	mul.f32 	%f220, %f868, %f1019;
	mul.f32 	%f221, %f868, %f1020;
	mul.f32 	%f222, %f868, %f1021;
	ld.global.f32 	%f869, [lightColor];
	mul.f32 	%f223, %f219, %f869;
	ld.global.f32 	%f870, [lightColor+4];
	mul.f32 	%f224, %f219, %f870;
	ld.global.f32 	%f871, [lightColor+8];
	mul.f32 	%f225, %f219, %f871;
	ld.global.u32 	%r308, [additive];
	setp.eq.s32	%p139, %r308, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f408;}

	// inline asm
	@%p139 bra 	BB0_131;

	mov.u64 	%rd119, image_RNM0;
	cvta.global.u64 	%rd108, %rd119;
	mov.u32 	%r312, 8;
	// inline asm
	call (%rd107), _rt_buffer_get_64, (%rd108, %r103, %r312, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs41, %rs42, %rs43, %rs44}, [%rd107];
	// inline asm
	{  cvt.f32.f16 %f872, %rs41;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f873, %rs42;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f874, %rs43;}

	// inline asm
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd108, %r103, %r312, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f875, %f223, %f872;
	add.f32 	%f876, %f224, %f873;
	add.f32 	%f877, %f225, %f874;
	// inline asm
	{  cvt.rn.f16.f32 %rs40, %f877;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f876;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f875;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs38, %rs39, %rs40, %rs34};
	bra.uni 	BB0_132;

BB0_131:
	mov.u64 	%rd126, image_RNM0;
	cvta.global.u64 	%rd121, %rd126;
	mov.u32 	%r314, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r103, %r314, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs47, %f225;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f224;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f223;}

	// inline asm
	st.v4.u16 	[%rd120], {%rs45, %rs46, %rs47, %rs34};

BB0_132:
	mov.f32 	%f882, 0f34000000;
	max.f32 	%f883, %f219, %f882;
	div.rn.f32 	%f884, %f220, %f883;
	fma.rn.f32 	%f226, %f884, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f885, %f221, %f883;
	fma.rn.f32 	%f227, %f885, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f886, %f222, %f883;
	fma.rn.f32 	%f228, %f886, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r315, [additive];
	setp.eq.s32	%p140, %r315, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs48, %f408;}

	// inline asm
	@%p140 bra 	BB0_134;

	mov.u64 	%rd139, image_RNM1;
	cvta.global.u64 	%rd128, %rd139;
	mov.u32 	%r319, 8;
	// inline asm
	call (%rd127), _rt_buffer_get_64, (%rd128, %r103, %r319, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs55, %rs56, %rs57, %rs58}, [%rd127];
	// inline asm
	{  cvt.f32.f16 %f887, %rs55;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f888, %rs56;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f889, %rs57;}

	// inline asm
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd128, %r103, %r319, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f890, %f226, %f887;
	add.f32 	%f891, %f226, %f888;
	add.f32 	%f892, %f226, %f889;
	// inline asm
	{  cvt.rn.f16.f32 %rs54, %f892;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f891;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f890;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs52, %rs53, %rs54, %rs48};
	bra.uni 	BB0_135;

BB0_134:
	mov.u64 	%rd146, image_RNM1;
	cvta.global.u64 	%rd141, %rd146;
	mov.u32 	%r321, 8;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r103, %r321, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f226;}

	// inline asm
	st.v4.u16 	[%rd140], {%rs59, %rs59, %rs59, %rs48};

BB0_135:
	ld.global.u32 	%r322, [additive];
	setp.eq.s32	%p141, %r322, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f408;}

	// inline asm
	@%p141 bra 	BB0_137;

	mov.u64 	%rd159, image_RNM2;
	cvta.global.u64 	%rd148, %rd159;
	mov.u32 	%r326, 8;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r103, %r326, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs67, %rs68, %rs69, %rs70}, [%rd147];
	// inline asm
	{  cvt.f32.f16 %f895, %rs67;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f896, %rs68;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f897, %rs69;}

	// inline asm
	// inline asm
	call (%rd153), _rt_buffer_get_64, (%rd148, %r103, %r326, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f898, %f227, %f895;
	add.f32 	%f899, %f227, %f896;
	add.f32 	%f900, %f227, %f897;
	// inline asm
	{  cvt.rn.f16.f32 %rs66, %f900;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f899;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f898;}

	// inline asm
	st.v4.u16 	[%rd153], {%rs64, %rs65, %rs66, %rs60};
	bra.uni 	BB0_138;

BB0_137:
	mov.u64 	%rd166, image_RNM2;
	cvta.global.u64 	%rd161, %rd166;
	mov.u32 	%r328, 8;
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd161, %r103, %r328, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f227;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs71, %rs71, %rs71, %rs60};

BB0_138:
	ld.global.u32 	%r329, [additive];
	setp.eq.s32	%p142, %r329, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs72, %f408;}

	// inline asm
	@%p142 bra 	BB0_140;

	mov.u64 	%rd179, image_RNM3;
	cvta.global.u64 	%rd168, %rd179;
	mov.u32 	%r333, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r103, %r333, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs79, %rs80, %rs81, %rs82}, [%rd167];
	// inline asm
	{  cvt.f32.f16 %f903, %rs79;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f904, %rs80;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f905, %rs81;}

	// inline asm
	// inline asm
	call (%rd173), _rt_buffer_get_64, (%rd168, %r103, %r333, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f906, %f228, %f903;
	add.f32 	%f907, %f228, %f904;
	add.f32 	%f908, %f228, %f905;
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f908;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f907;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f906;}

	// inline asm
	st.v4.u16 	[%rd173], {%rs76, %rs77, %rs78, %rs72};
	bra.uni 	BB0_161;

BB0_140:
	mov.u64 	%rd186, image_RNM3;
	cvta.global.u64 	%rd181, %rd186;
	mov.u32 	%r335, 8;
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd181, %r103, %r335, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f228;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs83, %rs83, %rs83, %rs72};

BB0_161:
	ret;
}


