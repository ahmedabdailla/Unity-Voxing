//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 lightMeshBuffer[1];
.global .align 4 .u32 lightMeshBufferSize;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightPointSize;
.global .align 4 .b8 lightColor[12];
.global .align 1 .b8 rnd_seeds[1];
.global .align 4 .u32 samples;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19lightMeshBufferSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightPointSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19lightMeshBufferSizeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightPointSizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19lightMeshBufferSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightPointSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightPointSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightPointSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[36];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<150>;
	.reg .b16 	%rs<152>;
	.reg .f32 	%f<989>;
	.reg .b32 	%r<411>;
	.reg .b64 	%rd<298>;


	mov.u64 	%rd297, __local_depot0;
	cvta.local.u64 	%SP, %rd297;
	ld.global.u32 	%r1, [lightMeshBufferSize];
	abs.s32 	%r2, %r1;
	ld.global.u32 	%r3, [samples];
	shl.b32 	%r4, %r3, 1;
	ld.global.v2.u32 	{%r102, %r103}, [pixelID];
	cvt.u64.u32	%rd21, %r102;
	cvt.u64.u32	%rd22, %r103;
	mov.u64 	%rd25, uvnormal;
	cvta.global.u64 	%rd20, %rd25;
	mov.u32 	%r100, 2;
	mov.u32 	%r101, 4;
	mov.u64 	%rd24, 0;
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd20, %r100, %r101, %rd21, %rd22, %rd24, %rd24);
	// inline asm
	ld.u32 	%r5, [%rd19];
	shr.u32 	%r106, %r5, 16;
	cvt.u16.u32	%rs1, %r106;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r5;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p7, %rs9, 0;
	mov.f32 	%f917, 0f00000000;
	mov.f32 	%f918, %f917;
	mov.f32 	%f919, %f917;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs10, [%rd19+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f218, %rs12;
	div.rn.f32 	%f219, %f218, 0f437F0000;
	fma.rn.f32 	%f220, %f219, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f221, %rs10;
	div.rn.f32 	%f222, %f221, 0f437F0000;
	fma.rn.f32 	%f223, %f222, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f224, %rs7;
	div.rn.f32 	%f225, %f224, 0f437F0000;
	fma.rn.f32 	%f226, %f225, 0f40000000, 0fBF800000;
	mul.f32 	%f227, %f223, %f223;
	fma.rn.f32 	%f228, %f220, %f220, %f227;
	fma.rn.f32 	%f229, %f226, %f226, %f228;
	sqrt.rn.f32 	%f230, %f229;
	rcp.rn.f32 	%f231, %f230;
	mul.f32 	%f917, %f220, %f231;
	mul.f32 	%f918, %f223, %f231;
	mul.f32 	%f919, %f226, %f231;

BB0_2:
	ld.global.v2.u32 	{%r107, %r108}, [pixelID];
	ld.global.v2.u32 	{%r110, %r111}, [tileInfo];
	add.s32 	%r6, %r107, %r110;
	add.s32 	%r7, %r108, %r111;
	setp.eq.f32	%p8, %f918, 0f00000000;
	setp.eq.f32	%p9, %f917, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f919, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_139;
	bra.uni 	BB0_3;

BB0_139:
	ld.global.u32 	%r410, [imageEnabled];
	and.b32  	%r334, %r410, 1;
	setp.eq.b32	%p141, %r334, 1;
	@!%p141 bra 	BB0_141;
	bra.uni 	BB0_140;

BB0_140:
	cvt.u64.u32	%rd179, %r6;
	cvt.u64.u32	%rd180, %r7;
	mov.u64 	%rd183, image;
	cvta.global.u64 	%rd178, %rd183;
	// inline asm
	call (%rd177), _rt_buffer_get_64, (%rd178, %r100, %r101, %rd179, %rd180, %rd24, %rd24);
	// inline asm
	mov.u16 	%rs84, 0;
	st.v4.u8 	[%rd177], {%rs84, %rs84, %rs84, %rs84};
	ld.global.u32 	%r410, [imageEnabled];

BB0_141:
	and.b32  	%r337, %r410, 8;
	setp.eq.s32	%p142, %r337, 0;
	@%p142 bra 	BB0_143;

	cvt.u64.u32	%rd187, %r7;
	cvt.u64.u32	%rd186, %r6;
	mov.u64 	%rd190, image_Mask;
	cvta.global.u64 	%rd185, %rd190;
	// inline asm
	call (%rd184), _rt_buffer_get_64, (%rd185, %r100, %r100, %rd186, %rd187, %rd24, %rd24);
	// inline asm
	mov.f32 	%f874, 0f00000000;
	cvt.rzi.u32.f32	%r340, %f874;
	cvt.u16.u32	%rs85, %r340;
	mov.u16 	%rs86, 0;
	st.v2.u8 	[%rd184], {%rs85, %rs86};
	ld.global.u32 	%r410, [imageEnabled];

BB0_143:
	cvt.u64.u32	%rd17, %r6;
	cvt.u64.u32	%rd18, %r7;
	and.b32  	%r341, %r410, 4;
	setp.eq.s32	%p143, %r341, 0;
	@%p143 bra 	BB0_147;

	ld.global.u32 	%r342, [additive];
	setp.eq.s32	%p144, %r342, 0;
	@%p144 bra 	BB0_146;

	mov.u64 	%rd203, image_HDR;
	cvta.global.u64 	%rd192, %rd203;
	mov.u32 	%r346, 8;
	// inline asm
	call (%rd191), _rt_buffer_get_64, (%rd192, %r100, %r346, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs93, %rs94, %rs95, %rs96}, [%rd191];
	// inline asm
	{  cvt.f32.f16 %f875, %rs93;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f876, %rs94;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f877, %rs95;}

	// inline asm
	// inline asm
	call (%rd197), _rt_buffer_get_64, (%rd192, %r100, %r346, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	add.f32 	%f878, %f875, 0f00000000;
	add.f32 	%f879, %f876, 0f00000000;
	add.f32 	%f880, %f877, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f880;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs91, %f879;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs90, %f878;}

	// inline asm
	mov.u16 	%rs97, 0;
	st.v4.u16 	[%rd197], {%rs90, %rs91, %rs92, %rs97};
	bra.uni 	BB0_147;

BB0_3:
	ld.global.v2.u32 	{%r120, %r121}, [pixelID];
	cvt.u64.u32	%rd28, %r120;
	cvt.u64.u32	%rd29, %r121;
	mov.u64 	%rd38, uvpos;
	cvta.global.u64 	%rd27, %rd38;
	mov.u32 	%r116, 12;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r100, %r116, %rd28, %rd29, %rd24, %rd24);
	// inline asm
	ld.f32 	%f9, [%rd26+8];
	ld.f32 	%f8, [%rd26+4];
	ld.f32 	%f7, [%rd26];
	mul.f32 	%f238, %f7, 0f3456BF95;
	mul.f32 	%f239, %f8, 0f3456BF95;
	mul.f32 	%f240, %f9, 0f3456BF95;
	abs.f32 	%f241, %f917;
	div.rn.f32 	%f242, %f238, %f241;
	abs.f32 	%f243, %f918;
	div.rn.f32 	%f244, %f239, %f243;
	abs.f32 	%f245, %f919;
	div.rn.f32 	%f246, %f240, %f245;
	abs.f32 	%f247, %f242;
	abs.f32 	%f248, %f244;
	abs.f32 	%f249, %f246;
	mov.f32 	%f250, 0f38D1B717;
	max.f32 	%f251, %f247, %f250;
	max.f32 	%f252, %f248, %f250;
	max.f32 	%f253, %f249, %f250;
	fma.rn.f32 	%f10, %f917, %f251, %f7;
	fma.rn.f32 	%f11, %f918, %f252, %f8;
	fma.rn.f32 	%f12, %f919, %f253, %f9;
	ld.global.v2.u32 	{%r124, %r125}, [pixelID];
	cvt.u64.u32	%rd34, %r124;
	cvt.u64.u32	%rd35, %r125;
	mov.u64 	%rd39, rnd_seeds;
	cvta.global.u64 	%rd33, %rd39;
	// inline asm
	call (%rd32), _rt_buffer_get_64, (%rd33, %r100, %r101, %rd34, %rd35, %rd24, %rd24);
	// inline asm
	ld.u32 	%r128, [%rd32];
	mad.lo.s32 	%r8, %r128, 1664525, 1013904223;
	mov.pred 	%p13, 0;
	mov.f32 	%f18, 0f00000000;
	mov.u32 	%r382, 0;
	setp.lt.s32	%p14, %r2, 1;
	@%p14 bra 	BB0_4;

	ld.global.f32 	%f13, [lightPointSize];
	mul.f32 	%f14, %f10, 0f3456BF95;
	mul.f32 	%f15, %f11, 0f3456BF95;
	mul.f32 	%f16, %f12, 0f3456BF95;
	and.b32  	%r130, %r8, 16777215;
	cvt.rn.f32.u32	%f260, %r130;
	mul.f32 	%f261, %f260, 0fB3800000;
	fma.rn.f32 	%f17, %f261, 0f3F333333, 0f3F800000;
	mov.f32 	%f18, 0f00000000;
	mov.u32 	%r382, 0;
	abs.f32 	%f383, %f15;
	abs.f32 	%f384, %f14;
	max.f32 	%f385, %f384, %f383;
	abs.f32 	%f386, %f16;
	max.f32 	%f387, %f385, %f386;
	mov.f32 	%f19, %f18;
	mov.f32 	%f20, %f18;
	mov.f32 	%f21, %f18;
	mov.f32 	%f22, %f18;
	mov.f32 	%f23, %f18;

BB0_6:
	shl.b32 	%r133, %r382, 1;
	cvt.s64.s32	%rd42, %r133;
	mov.u64 	%rd46, lightMeshBuffer;
	cvta.global.u64 	%rd41, %rd46;
	mov.u32 	%r131, 1;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r131, %r116, %rd42, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f262, [%rd40];
	sub.f32 	%f263, %f262, %f7;
	ld.f32 	%f264, [%rd40+4];
	sub.f32 	%f265, %f264, %f8;
	ld.f32 	%f266, [%rd40+8];
	sub.f32 	%f267, %f266, %f9;
	mul.f32 	%f268, %f265, %f265;
	fma.rn.f32 	%f269, %f263, %f263, %f268;
	fma.rn.f32 	%f270, %f267, %f267, %f269;
	sqrt.rn.f32 	%f24, %f270;
	rcp.rn.f32 	%f271, %f24;
	mul.f32 	%f25, %f263, %f271;
	mul.f32 	%f26, %f265, %f271;
	mul.f32 	%f27, %f267, %f271;
	mul.f32 	%f272, %f24, %f24;
	mul.f32 	%f273, %f272, 0f40C90FDB;
	div.rn.f32 	%f274, %f13, %f273;
	add.f32 	%f28, %f274, %f274;
	setp.gt.f32	%p16, %f28, %f17;
	setp.ne.s32	%p17, %r3, 0;
	and.pred  	%p18, %p17, %p16;
	mov.pred 	%p149, -1;
	@%p18 bra 	BB0_22;

	ld.global.f32 	%f277, [lightInvCutoff];
	mul.f32 	%f29, %f24, %f277;
	mov.f32 	%f281, 0f40800000;
	abs.f32 	%f31, %f29;
	setp.lt.f32	%p19, %f31, 0f00800000;
	mul.f32 	%f283, %f31, 0f4B800000;
	selp.f32	%f284, 0fC3170000, 0fC2FE0000, %p19;
	selp.f32	%f285, %f283, %f31, %p19;
	mov.b32 	 %r134, %f285;
	and.b32  	%r135, %r134, 8388607;
	or.b32  	%r136, %r135, 1065353216;
	mov.b32 	 %f286, %r136;
	shr.u32 	%r137, %r134, 23;
	cvt.rn.f32.u32	%f287, %r137;
	add.f32 	%f288, %f284, %f287;
	setp.gt.f32	%p20, %f286, 0f3FB504F3;
	mul.f32 	%f289, %f286, 0f3F000000;
	add.f32 	%f290, %f288, 0f3F800000;
	selp.f32	%f291, %f289, %f286, %p20;
	selp.f32	%f292, %f290, %f288, %p20;
	add.f32 	%f293, %f291, 0fBF800000;
	add.f32 	%f276, %f291, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// inline asm
	add.f32 	%f294, %f293, %f293;
	mul.f32 	%f295, %f275, %f294;
	mul.f32 	%f296, %f295, %f295;
	mov.f32 	%f297, 0f3C4CAF63;
	mov.f32 	%f298, 0f3B18F0FE;
	fma.rn.f32 	%f299, %f298, %f296, %f297;
	mov.f32 	%f300, 0f3DAAAABD;
	fma.rn.f32 	%f301, %f299, %f296, %f300;
	mul.rn.f32 	%f302, %f301, %f296;
	mul.rn.f32 	%f303, %f302, %f295;
	sub.f32 	%f304, %f293, %f295;
	neg.f32 	%f305, %f295;
	add.f32 	%f306, %f304, %f304;
	fma.rn.f32 	%f307, %f305, %f293, %f306;
	mul.rn.f32 	%f308, %f275, %f307;
	add.f32 	%f309, %f303, %f295;
	sub.f32 	%f310, %f295, %f309;
	add.f32 	%f311, %f303, %f310;
	add.f32 	%f312, %f308, %f311;
	add.f32 	%f313, %f309, %f312;
	sub.f32 	%f314, %f309, %f313;
	add.f32 	%f315, %f312, %f314;
	mov.f32 	%f316, 0f3F317200;
	mul.rn.f32 	%f317, %f292, %f316;
	mov.f32 	%f318, 0f35BFBE8E;
	mul.rn.f32 	%f319, %f292, %f318;
	add.f32 	%f320, %f317, %f313;
	sub.f32 	%f321, %f317, %f320;
	add.f32 	%f322, %f313, %f321;
	add.f32 	%f323, %f315, %f322;
	add.f32 	%f324, %f319, %f323;
	add.f32 	%f325, %f320, %f324;
	sub.f32 	%f326, %f320, %f325;
	add.f32 	%f327, %f324, %f326;
	mul.rn.f32 	%f328, %f281, %f325;
	neg.f32 	%f329, %f328;
	fma.rn.f32 	%f330, %f281, %f325, %f329;
	fma.rn.f32 	%f331, %f281, %f327, %f330;
	mov.f32 	%f332, 0f00000000;
	fma.rn.f32 	%f333, %f332, %f325, %f331;
	add.rn.f32 	%f334, %f328, %f333;
	neg.f32 	%f335, %f334;
	add.rn.f32 	%f336, %f328, %f335;
	add.rn.f32 	%f337, %f336, %f333;
	mov.b32 	 %r138, %f334;
	setp.eq.s32	%p21, %r138, 1118925336;
	add.s32 	%r139, %r138, -1;
	mov.b32 	 %f338, %r139;
	add.f32 	%f339, %f337, 0f37000000;
	selp.f32	%f340, %f338, %f334, %p21;
	selp.f32	%f32, %f339, %f337, %p21;
	mul.f32 	%f341, %f340, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f342, %f341;
	mov.f32 	%f343, 0fBF317200;
	fma.rn.f32 	%f344, %f342, %f343, %f340;
	mov.f32 	%f345, 0fB5BFBE8E;
	fma.rn.f32 	%f346, %f342, %f345, %f344;
	mul.f32 	%f347, %f346, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f348, %f347;
	add.f32 	%f349, %f342, 0f00000000;
	ex2.approx.f32 	%f350, %f349;
	mul.f32 	%f351, %f348, %f350;
	setp.lt.f32	%p22, %f340, 0fC2D20000;
	selp.f32	%f352, 0f00000000, %f351, %p22;
	setp.gt.f32	%p23, %f340, 0f42D20000;
	selp.f32	%f926, 0f7F800000, %f352, %p23;
	setp.eq.f32	%p24, %f926, 0f7F800000;
	@%p24 bra 	BB0_9;

	fma.rn.f32 	%f926, %f926, %f32, %f926;

BB0_9:
	mov.f32 	%f915, 0f40000000;
	cvt.rzi.f32.f32	%f914, %f915;
	add.f32 	%f913, %f914, %f914;
	mov.f32 	%f912, 0f40800000;
	sub.f32 	%f911, %f912, %f913;
	abs.f32 	%f910, %f911;
	setp.lt.f32	%p25, %f29, 0f00000000;
	setp.eq.f32	%p26, %f910, 0f3F800000;
	and.pred  	%p1, %p25, %p26;
	mov.b32 	 %r140, %f926;
	xor.b32  	%r141, %r140, -2147483648;
	mov.b32 	 %f353, %r141;
	selp.f32	%f928, %f353, %f926, %p1;
	setp.eq.f32	%p27, %f29, 0f00000000;
	@%p27 bra 	BB0_12;
	bra.uni 	BB0_10;

BB0_12:
	add.f32 	%f356, %f29, %f29;
	selp.f32	%f928, %f356, 0f00000000, %p26;
	bra.uni 	BB0_13;

BB0_10:
	setp.geu.f32	%p28, %f29, 0f00000000;
	@%p28 bra 	BB0_13;

	mov.f32 	%f916, 0f40800000;
	cvt.rzi.f32.f32	%f355, %f916;
	setp.neu.f32	%p29, %f355, 0f40800000;
	selp.f32	%f928, 0f7FFFFFFF, %f928, %p29;

BB0_13:
	add.f32 	%f357, %f31, 0f40800000;
	mov.b32 	 %r142, %f357;
	setp.lt.s32	%p31, %r142, 2139095040;
	@%p31 bra 	BB0_18;

	setp.gtu.f32	%p32, %f31, 0f7F800000;
	@%p32 bra 	BB0_17;
	bra.uni 	BB0_15;

BB0_17:
	add.f32 	%f928, %f29, 0f40800000;
	bra.uni 	BB0_18;

BB0_15:
	setp.neu.f32	%p33, %f31, 0f7F800000;
	@%p33 bra 	BB0_18;

	selp.f32	%f928, 0fFF800000, 0f7F800000, %p1;

BB0_18:
	mov.u32 	%r378, 1;
	mov.u64 	%rd292, lightMeshBuffer;
	cvta.global.u64 	%rd291, %rd292;
	shl.b32 	%r377, %r382, 1;
	mov.f32 	%f358, 0f3F800000;
	sub.f32 	%f359, %f358, %f928;
	setp.eq.f32	%p34, %f29, 0f3F800000;
	selp.f32	%f360, 0f00000000, %f359, %p34;
	cvt.sat.f32.f32	%f361, %f360;
	mul.f32 	%f362, %f28, %f361;
	add.s32 	%r146, %r377, 1;
	cvt.s64.s32	%rd49, %r146;
	// inline asm
	call (%rd47), _rt_buffer_get_64, (%rd291, %r378, %r116, %rd49, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f363, [%rd47];
	mul.f32 	%f364, %f25, %f363;
	ld.f32 	%f365, [%rd47+4];
	mul.f32 	%f366, %f26, %f365;
	neg.f32 	%f367, %f366;
	sub.f32 	%f368, %f367, %f364;
	ld.f32 	%f369, [%rd47+8];
	mul.f32 	%f370, %f27, %f369;
	sub.f32 	%f371, %f368, %f370;
	cvt.sat.f32.f32	%f372, %f371;
	mul.f32 	%f43, %f362, %f372;
	mul.f32 	%f373, %f918, %f26;
	fma.rn.f32 	%f374, %f917, %f25, %f373;
	fma.rn.f32 	%f44, %f919, %f27, %f374;
	setp.leu.f32	%p35, %f43, 0f3727C5AC;
	@%p35 bra 	BB0_20;

	mov.u32 	%r380, 1;
	add.u64 	%rd54, %SP, 4;
	cvta.to.local.u64 	%rd55, %rd54;
	max.f32 	%f381, %f387, %f250;
	sub.f32 	%f382, %f24, %f381;
	mov.u32 	%r150, 1065353216;
	st.local.u32 	[%rd55], %r150;
	ld.global.u32 	%r147, [root];
	// inline asm
	call _rt_trace_64, (%r147, %f10, %f11, %f12, %f25, %f26, %f27, %r380, %f381, %f382, %rd54, %r101);
	// inline asm
	ld.local.f32 	%f389, [%rd55];
	mul.f32 	%f390, %f43, %f389;
	cvt.sat.f32.f32	%f391, %f44;
	fma.rn.f32 	%f23, %f391, %f390, %f23;
	fma.rn.f32 	%f21, %f25, %f390, %f21;
	fma.rn.f32 	%f20, %f26, %f390, %f20;
	fma.rn.f32 	%f19, %f27, %f390, %f19;
	add.f32 	%f22, %f22, %f390;
	add.f32 	%f18, %f18, %f389;

BB0_20:
	add.s32 	%r382, %r382, 1;
	setp.lt.s32	%p37, %r382, %r2;
	@%p37 bra 	BB0_6;
	bra.uni 	BB0_21;

BB0_4:
	mov.f32 	%f19, %f18;
	mov.f32 	%f20, %f18;
	mov.f32 	%f21, %f18;
	mov.f32 	%f22, %f18;
	mov.f32 	%f23, %f18;

BB0_21:
	mov.pred 	%p149, %p13;

BB0_22:
	cvt.rn.f32.s32	%f392, %r382;
	mov.f32 	%f393, 0f3F800000;
	max.f32 	%f394, %f392, %f393;
	div.rn.f32 	%f971, %f23, %f394;
	div.rn.f32 	%f976, %f18, %f394;
	div.rn.f32 	%f972, %f22, %f394;
	div.rn.f32 	%f973, %f21, %f394;
	div.rn.f32 	%f974, %f20, %f394;
	div.rn.f32 	%f975, %f19, %f394;
	@!%p149 bra 	BB0_75;
	bra.uni 	BB0_23;

BB0_23:
	mov.f32 	%f947, 0f00000000;
	setp.lt.s32	%p38, %r3, 1;
	mov.f32 	%f948, %f947;
	mov.f32 	%f949, %f947;
	mov.f32 	%f950, %f947;
	mov.f32 	%f951, %f947;
	mov.f32 	%f952, %f947;
	@%p38 bra 	BB0_74;

	mad.lo.s32 	%r386, %r128, 1664525, 1013904223;
	cvt.rn.f32.s32	%f407, %r4;
	rcp.rn.f32 	%f69, %f407;
	add.u64 	%rd56, %SP, 8;
	cvta.to.local.u64 	%rd2, %rd56;
	mul.f32 	%f70, %f10, 0f3456BF95;
	mul.f32 	%f71, %f11, 0f3456BF95;
	mul.f32 	%f72, %f12, 0f3456BF95;
	add.u64 	%rd57, %SP, 0;
	cvta.to.local.u64 	%rd3, %rd57;
	mov.f32 	%f947, 0f00000000;
	mov.u32 	%r151, 0;
	abs.f32 	%f408, %f71;
	abs.f32 	%f409, %f70;
	max.f32 	%f410, %f409, %f408;
	abs.f32 	%f411, %f72;
	max.f32 	%f412, %f410, %f411;
	mov.u32 	%r383, %r151;
	mov.f32 	%f948, %f947;
	mov.f32 	%f949, %f947;
	mov.f32 	%f950, %f947;
	mov.f32 	%f951, %f947;
	mov.f32 	%f952, %f947;

BB0_25:
	cvt.rn.f32.s32	%f79, %r383;
	max.f32 	%f80, %f412, %f250;
	mov.u32 	%r385, %r151;

BB0_26:
	mad.lo.s32 	%r153, %r386, 1664525, 1013904223;
	and.b32  	%r154, %r153, 16777215;
	cvt.rn.f32.u32	%f414, %r154;
	fma.rn.f32 	%f415, %f414, 0f33800000, %f79;
	mul.f32 	%f416, %f69, %f415;
	mad.lo.s32 	%r386, %r153, 1664525, 1013904223;
	and.b32  	%r155, %r386, 16777215;
	cvt.rn.f32.u32	%f417, %r155;
	cvt.rn.f32.s32	%f418, %r385;
	fma.rn.f32 	%f419, %f417, 0f33800000, %f418;
	mul.f32 	%f420, %f69, %f419;
	fma.rn.f32 	%f87, %f416, 0fC0000000, 0f3F800000;
	mul.f32 	%f421, %f87, %f87;
	sub.f32 	%f423, %f393, %f421;
	mov.f32 	%f424, 0f00000000;
	max.f32 	%f425, %f424, %f423;
	sqrt.rn.f32 	%f88, %f425;
	mul.f32 	%f959, %f420, 0f40C90FDB;
	abs.f32 	%f90, %f959;
	setp.neu.f32	%p39, %f90, 0f7F800000;
	mov.f32 	%f953, %f959;
	@%p39 bra 	BB0_28;

	mul.rn.f32 	%f953, %f959, %f424;

BB0_28:
	mul.f32 	%f427, %f953, 0f3F22F983;
	cvt.rni.s32.f32	%r396, %f427;
	cvt.rn.f32.s32	%f428, %r396;
	neg.f32 	%f429, %f428;
	mov.f32 	%f430, 0f3FC90FDA;
	fma.rn.f32 	%f431, %f429, %f430, %f953;
	mov.f32 	%f432, 0f33A22168;
	fma.rn.f32 	%f433, %f429, %f432, %f431;
	mov.f32 	%f434, 0f27C234C5;
	fma.rn.f32 	%f954, %f429, %f434, %f433;
	abs.f32 	%f435, %f953;
	setp.leu.f32	%p40, %f435, 0f47CE4780;
	@%p40 bra 	BB0_39;

	mov.b32 	 %r18, %f953;
	shr.u32 	%r19, %r18, 23;
	shl.b32 	%r158, %r18, 8;
	or.b32  	%r20, %r158, -2147483648;
	mov.u32 	%r388, 0;
	mov.u64 	%rd293, __cudart_i2opi_f;
	mov.u32 	%r387, -6;
	mov.u64 	%rd294, %rd2;

BB0_30:
	.pragma "nounroll";
	ld.const.u32 	%r161, [%rd293];
	// inline asm
	{
	mad.lo.cc.u32   %r159, %r161, %r20, %r388;
	madc.hi.u32     %r388, %r161, %r20,  0;
	}
	// inline asm
	st.local.u32 	[%rd294], %r159;
	add.s64 	%rd294, %rd294, 4;
	add.s64 	%rd293, %rd293, 4;
	add.s32 	%r387, %r387, 1;
	setp.ne.s32	%p41, %r387, 0;
	@%p41 bra 	BB0_30;

	and.b32  	%r164, %r19, 255;
	add.s32 	%r165, %r164, -128;
	shr.u32 	%r166, %r165, 5;
	and.b32  	%r25, %r18, -2147483648;
	st.local.u32 	[%rd2+24], %r388;
	mov.u32 	%r167, 6;
	sub.s32 	%r168, %r167, %r166;
	mul.wide.s32 	%rd59, %r168, 4;
	add.s64 	%rd8, %rd2, %rd59;
	ld.local.u32 	%r389, [%rd8];
	ld.local.u32 	%r390, [%rd8+-4];
	and.b32  	%r28, %r19, 31;
	setp.eq.s32	%p42, %r28, 0;
	@%p42 bra 	BB0_33;

	mov.u32 	%r169, 32;
	sub.s32 	%r170, %r169, %r28;
	shr.u32 	%r171, %r390, %r170;
	shl.b32 	%r172, %r389, %r28;
	add.s32 	%r389, %r171, %r172;
	ld.local.u32 	%r173, [%rd8+-8];
	shr.u32 	%r174, %r173, %r170;
	shl.b32 	%r175, %r390, %r28;
	add.s32 	%r390, %r174, %r175;

BB0_33:
	shr.u32 	%r176, %r390, 30;
	shl.b32 	%r177, %r389, 2;
	add.s32 	%r391, %r176, %r177;
	shl.b32 	%r34, %r390, 2;
	shr.u32 	%r178, %r391, 31;
	shr.u32 	%r179, %r389, 30;
	add.s32 	%r35, %r178, %r179;
	setp.eq.s32	%p43, %r178, 0;
	@%p43 bra 	BB0_34;
	bra.uni 	BB0_35;

BB0_34:
	mov.u32 	%r392, %r25;
	mov.u32 	%r393, %r34;
	bra.uni 	BB0_36;

BB0_35:
	not.b32 	%r180, %r391;
	neg.s32 	%r393, %r34;
	setp.eq.s32	%p44, %r34, 0;
	selp.u32	%r181, 1, 0, %p44;
	add.s32 	%r391, %r181, %r180;
	xor.b32  	%r392, %r25, -2147483648;

BB0_36:
	clz.b32 	%r395, %r391;
	setp.eq.s32	%p45, %r395, 0;
	shl.b32 	%r182, %r391, %r395;
	mov.u32 	%r183, 32;
	sub.s32 	%r184, %r183, %r395;
	shr.u32 	%r185, %r393, %r184;
	add.s32 	%r186, %r185, %r182;
	selp.b32	%r43, %r391, %r186, %p45;
	mov.u32 	%r187, -921707870;
	mul.hi.u32 	%r394, %r43, %r187;
	setp.eq.s32	%p46, %r25, 0;
	neg.s32 	%r188, %r35;
	selp.b32	%r396, %r35, %r188, %p46;
	setp.lt.s32	%p47, %r394, 1;
	@%p47 bra 	BB0_38;

	mul.lo.s32 	%r189, %r43, -921707870;
	shr.u32 	%r190, %r189, 31;
	shl.b32 	%r191, %r394, 1;
	add.s32 	%r394, %r190, %r191;
	add.s32 	%r395, %r395, 1;

BB0_38:
	mov.u32 	%r192, 126;
	sub.s32 	%r193, %r192, %r395;
	shl.b32 	%r194, %r193, 23;
	add.s32 	%r195, %r394, 1;
	shr.u32 	%r196, %r195, 7;
	add.s32 	%r197, %r196, 1;
	shr.u32 	%r198, %r197, 1;
	add.s32 	%r199, %r198, %r194;
	or.b32  	%r200, %r199, %r392;
	mov.b32 	 %f954, %r200;

BB0_39:
	mul.rn.f32 	%f96, %f954, %f954;
	add.s32 	%r51, %r396, 1;
	and.b32  	%r52, %r51, 1;
	setp.eq.s32	%p48, %r52, 0;
	@%p48 bra 	BB0_41;
	bra.uni 	BB0_40;

BB0_41:
	mov.f32 	%f438, 0f3C08839E;
	mov.f32 	%f439, 0fB94CA1F9;
	fma.rn.f32 	%f955, %f439, %f96, %f438;
	bra.uni 	BB0_42;

BB0_40:
	mov.f32 	%f436, 0fBAB6061A;
	mov.f32 	%f437, 0f37CCF5CE;
	fma.rn.f32 	%f955, %f437, %f96, %f436;

BB0_42:
	@%p48 bra 	BB0_44;
	bra.uni 	BB0_43;

BB0_44:
	mov.f32 	%f443, 0fBE2AAAA3;
	fma.rn.f32 	%f444, %f955, %f96, %f443;
	fma.rn.f32 	%f956, %f444, %f96, %f424;
	bra.uni 	BB0_45;

BB0_43:
	mov.f32 	%f440, 0f3D2AAAA5;
	fma.rn.f32 	%f441, %f955, %f96, %f440;
	mov.f32 	%f442, 0fBF000000;
	fma.rn.f32 	%f956, %f441, %f96, %f442;

BB0_45:
	fma.rn.f32 	%f957, %f956, %f954, %f954;
	@%p48 bra 	BB0_47;

	fma.rn.f32 	%f957, %f956, %f96, %f393;

BB0_47:
	and.b32  	%r201, %r51, 2;
	setp.eq.s32	%p51, %r201, 0;
	@%p51 bra 	BB0_49;

	mov.f32 	%f448, 0fBF800000;
	fma.rn.f32 	%f957, %f957, %f448, %f424;

BB0_49:
	@%p39 bra 	BB0_51;

	mul.rn.f32 	%f959, %f959, %f424;

BB0_51:
	mul.f32 	%f450, %f959, 0f3F22F983;
	cvt.rni.s32.f32	%r406, %f450;
	cvt.rn.f32.s32	%f451, %r406;
	neg.f32 	%f452, %f451;
	fma.rn.f32 	%f454, %f452, %f430, %f959;
	fma.rn.f32 	%f456, %f452, %f432, %f454;
	fma.rn.f32 	%f960, %f452, %f434, %f456;
	abs.f32 	%f458, %f959;
	setp.leu.f32	%p53, %f458, 0f47CE4780;
	@%p53 bra 	BB0_62;

	mov.b32 	 %r54, %f959;
	shr.u32 	%r55, %r54, 23;
	shl.b32 	%r204, %r54, 8;
	or.b32  	%r56, %r204, -2147483648;
	mov.u32 	%r398, 0;
	mov.u64 	%rd295, __cudart_i2opi_f;
	mov.u32 	%r397, -6;
	mov.u64 	%rd296, %rd2;

BB0_53:
	.pragma "nounroll";
	ld.const.u32 	%r207, [%rd295];
	// inline asm
	{
	mad.lo.cc.u32   %r205, %r207, %r56, %r398;
	madc.hi.u32     %r398, %r207, %r56,  0;
	}
	// inline asm
	st.local.u32 	[%rd296], %r205;
	add.s64 	%rd296, %rd296, 4;
	add.s64 	%rd295, %rd295, 4;
	add.s32 	%r397, %r397, 1;
	setp.ne.s32	%p54, %r397, 0;
	@%p54 bra 	BB0_53;

	and.b32  	%r210, %r55, 255;
	add.s32 	%r211, %r210, -128;
	shr.u32 	%r212, %r211, 5;
	and.b32  	%r61, %r54, -2147483648;
	st.local.u32 	[%rd2+24], %r398;
	mov.u32 	%r213, 6;
	sub.s32 	%r214, %r213, %r212;
	mul.wide.s32 	%rd61, %r214, 4;
	add.s64 	%rd13, %rd2, %rd61;
	ld.local.u32 	%r399, [%rd13];
	ld.local.u32 	%r400, [%rd13+-4];
	and.b32  	%r64, %r55, 31;
	setp.eq.s32	%p55, %r64, 0;
	@%p55 bra 	BB0_56;

	mov.u32 	%r215, 32;
	sub.s32 	%r216, %r215, %r64;
	shr.u32 	%r217, %r400, %r216;
	shl.b32 	%r218, %r399, %r64;
	add.s32 	%r399, %r217, %r218;
	ld.local.u32 	%r219, [%rd13+-8];
	shr.u32 	%r220, %r219, %r216;
	shl.b32 	%r221, %r400, %r64;
	add.s32 	%r400, %r220, %r221;

BB0_56:
	shr.u32 	%r222, %r400, 30;
	shl.b32 	%r223, %r399, 2;
	add.s32 	%r401, %r222, %r223;
	shl.b32 	%r70, %r400, 2;
	shr.u32 	%r224, %r401, 31;
	shr.u32 	%r225, %r399, 30;
	add.s32 	%r71, %r224, %r225;
	setp.eq.s32	%p56, %r224, 0;
	@%p56 bra 	BB0_57;
	bra.uni 	BB0_58;

BB0_57:
	mov.u32 	%r402, %r61;
	mov.u32 	%r403, %r70;
	bra.uni 	BB0_59;

BB0_58:
	not.b32 	%r226, %r401;
	neg.s32 	%r403, %r70;
	setp.eq.s32	%p57, %r70, 0;
	selp.u32	%r227, 1, 0, %p57;
	add.s32 	%r401, %r227, %r226;
	xor.b32  	%r402, %r61, -2147483648;

BB0_59:
	clz.b32 	%r405, %r401;
	setp.eq.s32	%p58, %r405, 0;
	shl.b32 	%r228, %r401, %r405;
	mov.u32 	%r229, 32;
	sub.s32 	%r230, %r229, %r405;
	shr.u32 	%r231, %r403, %r230;
	add.s32 	%r232, %r231, %r228;
	selp.b32	%r79, %r401, %r232, %p58;
	mov.u32 	%r233, -921707870;
	mul.hi.u32 	%r404, %r79, %r233;
	setp.eq.s32	%p59, %r61, 0;
	neg.s32 	%r234, %r71;
	selp.b32	%r406, %r71, %r234, %p59;
	setp.lt.s32	%p60, %r404, 1;
	@%p60 bra 	BB0_61;

	mul.lo.s32 	%r235, %r79, -921707870;
	shr.u32 	%r236, %r235, 31;
	shl.b32 	%r237, %r404, 1;
	add.s32 	%r404, %r236, %r237;
	add.s32 	%r405, %r405, 1;

BB0_61:
	mov.u32 	%r238, 126;
	sub.s32 	%r239, %r238, %r405;
	shl.b32 	%r240, %r239, 23;
	add.s32 	%r241, %r404, 1;
	shr.u32 	%r242, %r241, 7;
	add.s32 	%r243, %r242, 1;
	shr.u32 	%r244, %r243, 1;
	add.s32 	%r245, %r244, %r240;
	or.b32  	%r246, %r245, %r402;
	mov.b32 	 %f960, %r246;

BB0_62:
	mul.rn.f32 	%f113, %f960, %f960;
	and.b32  	%r87, %r406, 1;
	setp.eq.s32	%p61, %r87, 0;
	@%p61 bra 	BB0_64;
	bra.uni 	BB0_63;

BB0_64:
	mov.f32 	%f461, 0f3C08839E;
	mov.f32 	%f462, 0fB94CA1F9;
	fma.rn.f32 	%f961, %f462, %f113, %f461;
	bra.uni 	BB0_65;

BB0_63:
	mov.f32 	%f459, 0fBAB6061A;
	mov.f32 	%f460, 0f37CCF5CE;
	fma.rn.f32 	%f961, %f460, %f113, %f459;

BB0_65:
	@%p61 bra 	BB0_67;
	bra.uni 	BB0_66;

BB0_67:
	mov.f32 	%f466, 0fBE2AAAA3;
	fma.rn.f32 	%f467, %f961, %f113, %f466;
	fma.rn.f32 	%f962, %f467, %f113, %f424;
	bra.uni 	BB0_68;

BB0_66:
	mov.f32 	%f463, 0f3D2AAAA5;
	fma.rn.f32 	%f464, %f961, %f113, %f463;
	mov.f32 	%f465, 0fBF000000;
	fma.rn.f32 	%f962, %f464, %f113, %f465;

BB0_68:
	fma.rn.f32 	%f963, %f962, %f960, %f960;
	@%p61 bra 	BB0_70;

	fma.rn.f32 	%f963, %f962, %f113, %f393;

BB0_70:
	and.b32  	%r247, %r406, 2;
	setp.eq.s32	%p64, %r247, 0;
	@%p64 bra 	BB0_72;

	mov.f32 	%f471, 0fBF800000;
	fma.rn.f32 	%f963, %f963, %f471, %f424;

BB0_72:
	mul.f32 	%f475, %f88, %f957;
	mov.u32 	%r249, 0;
	st.local.u32 	[%rd3], %r249;
	ld.global.u32 	%r248, [root];
	mul.f32 	%f476, %f88, %f963;
	mov.f32 	%f479, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r248, %f10, %f11, %f12, %f475, %f476, %f87, %r249, %f80, %f479, %rd57, %r101);
	// inline asm
	ld.local.f32 	%f480, [%rd3];
	setp.lt.f32	%p65, %f480, 0f00000000;
	selp.f32	%f481, 0f00000000, %f480, %p65;
	selp.f32	%f482, 0f00000000, 0f3F800000, %p65;
	add.f32 	%f947, %f947, %f482;
	fma.rn.f32 	%f950, %f475, %f481, %f950;
	fma.rn.f32 	%f949, %f476, %f481, %f949;
	fma.rn.f32 	%f948, %f87, %f481, %f948;
	add.f32 	%f951, %f951, %f481;
	mul.f32 	%f483, %f918, %f476;
	fma.rn.f32 	%f484, %f917, %f475, %f483;
	fma.rn.f32 	%f485, %f919, %f87, %f484;
	cvt.sat.f32.f32	%f486, %f485;
	fma.rn.f32 	%f952, %f481, %f486, %f952;
	add.s32 	%r385, %r385, 1;
	setp.lt.s32	%p66, %r385, %r4;
	@%p66 bra 	BB0_26;

	add.s32 	%r383, %r383, 1;
	setp.lt.s32	%p67, %r383, %r4;
	@%p67 bra 	BB0_25;

BB0_74:
	mul.lo.s32 	%r251, %r4, %r4;
	cvt.rn.f32.s32	%f487, %r251;
	div.rn.f32 	%f488, %f952, %f487;
	div.rn.f32 	%f976, %f947, %f487;
	div.rn.f32 	%f972, %f951, %f487;
	div.rn.f32 	%f973, %f950, %f487;
	div.rn.f32 	%f974, %f949, %f487;
	div.rn.f32 	%f975, %f948, %f487;
	add.f32 	%f971, %f488, %f488;

BB0_75:
	setp.gt.s32	%p68, %r1, -1;
	selp.f32	%f149, %f976, %f971, %p68;
	ld.global.u32 	%r408, [imageEnabled];
	and.b32  	%r252, %r408, 8;
	setp.eq.s32	%p69, %r252, 0;
	@%p69 bra 	BB0_88;

	cvt.u64.u32	%rd65, %r6;
	cvt.u64.u32	%rd66, %r7;
	mov.u64 	%rd69, image_Mask;
	cvta.global.u64 	%rd64, %rd69;
	// inline asm
	call (%rd63), _rt_buffer_get_64, (%rd64, %r100, %r100, %rd65, %rd66, %rd24, %rd24);
	// inline asm
	mov.f32 	%f491, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f492, %f491;
	fma.rn.f32 	%f493, %f492, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f150, %f493;
	abs.f32 	%f151, %f149;
	setp.lt.f32	%p70, %f151, 0f00800000;
	mul.f32 	%f494, %f151, 0f4B800000;
	selp.f32	%f495, 0fC3170000, 0fC2FE0000, %p70;
	selp.f32	%f496, %f494, %f151, %p70;
	mov.b32 	 %r255, %f496;
	and.b32  	%r256, %r255, 8388607;
	or.b32  	%r257, %r256, 1065353216;
	mov.b32 	 %f497, %r257;
	shr.u32 	%r258, %r255, 23;
	cvt.rn.f32.u32	%f498, %r258;
	add.f32 	%f499, %f495, %f498;
	setp.gt.f32	%p71, %f497, 0f3FB504F3;
	mul.f32 	%f500, %f497, 0f3F000000;
	add.f32 	%f501, %f499, 0f3F800000;
	selp.f32	%f502, %f500, %f497, %p71;
	selp.f32	%f503, %f501, %f499, %p71;
	add.f32 	%f504, %f502, 0fBF800000;
	add.f32 	%f490, %f502, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f489,%f490;
	// inline asm
	add.f32 	%f505, %f504, %f504;
	mul.f32 	%f506, %f489, %f505;
	mul.f32 	%f507, %f506, %f506;
	mov.f32 	%f508, 0f3C4CAF63;
	mov.f32 	%f509, 0f3B18F0FE;
	fma.rn.f32 	%f510, %f509, %f507, %f508;
	mov.f32 	%f511, 0f3DAAAABD;
	fma.rn.f32 	%f512, %f510, %f507, %f511;
	mul.rn.f32 	%f513, %f512, %f507;
	mul.rn.f32 	%f514, %f513, %f506;
	sub.f32 	%f515, %f504, %f506;
	neg.f32 	%f516, %f506;
	add.f32 	%f517, %f515, %f515;
	fma.rn.f32 	%f518, %f516, %f504, %f517;
	mul.rn.f32 	%f519, %f489, %f518;
	add.f32 	%f520, %f514, %f506;
	sub.f32 	%f521, %f506, %f520;
	add.f32 	%f522, %f514, %f521;
	add.f32 	%f523, %f519, %f522;
	add.f32 	%f524, %f520, %f523;
	sub.f32 	%f525, %f520, %f524;
	add.f32 	%f526, %f523, %f525;
	mov.f32 	%f527, 0f3F317200;
	mul.rn.f32 	%f528, %f503, %f527;
	mov.f32 	%f529, 0f35BFBE8E;
	mul.rn.f32 	%f530, %f503, %f529;
	add.f32 	%f531, %f528, %f524;
	sub.f32 	%f532, %f528, %f531;
	add.f32 	%f533, %f524, %f532;
	add.f32 	%f534, %f526, %f533;
	add.f32 	%f535, %f530, %f534;
	add.f32 	%f536, %f531, %f535;
	sub.f32 	%f537, %f531, %f536;
	add.f32 	%f538, %f535, %f537;
	mov.f32 	%f539, 0f3EE8BA2E;
	mul.rn.f32 	%f540, %f539, %f536;
	neg.f32 	%f541, %f540;
	fma.rn.f32 	%f542, %f539, %f536, %f541;
	fma.rn.f32 	%f543, %f539, %f538, %f542;
	mov.f32 	%f544, 0f00000000;
	fma.rn.f32 	%f545, %f544, %f536, %f543;
	add.rn.f32 	%f546, %f540, %f545;
	neg.f32 	%f547, %f546;
	add.rn.f32 	%f548, %f540, %f547;
	add.rn.f32 	%f549, %f548, %f545;
	mov.b32 	 %r259, %f546;
	setp.eq.s32	%p72, %r259, 1118925336;
	add.s32 	%r260, %r259, -1;
	mov.b32 	 %f550, %r260;
	add.f32 	%f551, %f549, 0f37000000;
	selp.f32	%f552, %f550, %f546, %p72;
	selp.f32	%f152, %f551, %f549, %p72;
	mul.f32 	%f553, %f552, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f554, %f553;
	mov.f32 	%f555, 0fBF317200;
	fma.rn.f32 	%f556, %f554, %f555, %f552;
	mov.f32 	%f557, 0fB5BFBE8E;
	fma.rn.f32 	%f558, %f554, %f557, %f556;
	mul.f32 	%f559, %f558, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f560, %f559;
	add.f32 	%f561, %f554, 0f00000000;
	ex2.approx.f32 	%f562, %f561;
	mul.f32 	%f563, %f560, %f562;
	setp.lt.f32	%p73, %f552, 0fC2D20000;
	selp.f32	%f564, 0f00000000, %f563, %p73;
	setp.gt.f32	%p74, %f552, 0f42D20000;
	selp.f32	%f977, 0f7F800000, %f564, %p74;
	setp.eq.f32	%p75, %f977, 0f7F800000;
	@%p75 bra 	BB0_78;

	fma.rn.f32 	%f977, %f977, %f152, %f977;

BB0_78:
	setp.lt.f32	%p76, %f149, 0f00000000;
	setp.eq.f32	%p77, %f150, 0f3F800000;
	and.pred  	%p3, %p76, %p77;
	mov.b32 	 %r261, %f977;
	xor.b32  	%r262, %r261, -2147483648;
	mov.b32 	 %f565, %r262;
	selp.f32	%f979, %f565, %f977, %p3;
	setp.eq.f32	%p78, %f149, 0f00000000;
	@%p78 bra 	BB0_81;
	bra.uni 	BB0_79;

BB0_81:
	add.f32 	%f568, %f149, %f149;
	selp.f32	%f979, %f568, 0f00000000, %p77;
	bra.uni 	BB0_82;

BB0_146:
	mov.u64 	%rd210, image_HDR;
	cvta.global.u64 	%rd205, %rd210;
	mov.u32 	%r348, 8;
	// inline asm
	call (%rd204), _rt_buffer_get_64, (%rd205, %r100, %r348, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	mov.f32 	%f881, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f881;}

	// inline asm
	mov.u16 	%rs99, 0;
	st.v4.u16 	[%rd204], {%rs98, %rs98, %rs98, %rs99};

BB0_147:
	ld.global.u32 	%r349, [additive];
	setp.eq.s32	%p145, %r349, 0;
	@%p145 bra 	BB0_149;

	mov.u64 	%rd223, image_RNM0;
	cvta.global.u64 	%rd212, %rd223;
	mov.u32 	%r353, 8;
	// inline asm
	call (%rd211), _rt_buffer_get_64, (%rd212, %r100, %r353, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs106, %rs107, %rs108, %rs109}, [%rd211];
	// inline asm
	{  cvt.f32.f16 %f882, %rs106;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f883, %rs107;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f884, %rs108;}

	// inline asm
	// inline asm
	call (%rd217), _rt_buffer_get_64, (%rd212, %r100, %r353, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	add.f32 	%f885, %f882, 0f00000000;
	add.f32 	%f886, %f883, 0f00000000;
	add.f32 	%f887, %f884, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f887;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f886;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs103, %f885;}

	// inline asm
	mov.u16 	%rs110, 0;
	st.v4.u16 	[%rd217], {%rs103, %rs104, %rs105, %rs110};
	bra.uni 	BB0_150;

BB0_149:
	mov.u64 	%rd230, image_RNM0;
	cvta.global.u64 	%rd225, %rd230;
	mov.u32 	%r355, 8;
	// inline asm
	call (%rd224), _rt_buffer_get_64, (%rd225, %r100, %r355, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	mov.f32 	%f888, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f888;}

	// inline asm
	mov.u16 	%rs112, 0;
	st.v4.u16 	[%rd224], {%rs111, %rs111, %rs111, %rs112};

BB0_150:
	ld.global.u32 	%r356, [additive];
	setp.eq.s32	%p146, %r356, 0;
	@%p146 bra 	BB0_152;

	mov.u64 	%rd243, image_RNM1;
	cvta.global.u64 	%rd232, %rd243;
	mov.u32 	%r360, 8;
	// inline asm
	call (%rd231), _rt_buffer_get_64, (%rd232, %r100, %r360, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs119, %rs120, %rs121, %rs122}, [%rd231];
	// inline asm
	{  cvt.f32.f16 %f889, %rs119;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f890, %rs120;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f891, %rs121;}

	// inline asm
	// inline asm
	call (%rd237), _rt_buffer_get_64, (%rd232, %r100, %r360, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	add.f32 	%f892, %f889, 0f00000000;
	add.f32 	%f893, %f890, 0f00000000;
	add.f32 	%f894, %f891, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs118, %f894;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f893;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f892;}

	// inline asm
	mov.u16 	%rs123, 0;
	st.v4.u16 	[%rd237], {%rs116, %rs117, %rs118, %rs123};
	bra.uni 	BB0_153;

BB0_152:
	mov.u64 	%rd250, image_RNM1;
	cvta.global.u64 	%rd245, %rd250;
	mov.u32 	%r362, 8;
	// inline asm
	call (%rd244), _rt_buffer_get_64, (%rd245, %r100, %r362, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	mov.f32 	%f895, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs124, %f895;}

	// inline asm
	mov.u16 	%rs125, 0;
	st.v4.u16 	[%rd244], {%rs124, %rs124, %rs124, %rs125};

BB0_153:
	ld.global.u32 	%r363, [additive];
	setp.eq.s32	%p147, %r363, 0;
	@%p147 bra 	BB0_155;

	mov.u64 	%rd263, image_RNM2;
	cvta.global.u64 	%rd252, %rd263;
	mov.u32 	%r367, 8;
	// inline asm
	call (%rd251), _rt_buffer_get_64, (%rd252, %r100, %r367, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs132, %rs133, %rs134, %rs135}, [%rd251];
	// inline asm
	{  cvt.f32.f16 %f896, %rs132;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f897, %rs133;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f898, %rs134;}

	// inline asm
	// inline asm
	call (%rd257), _rt_buffer_get_64, (%rd252, %r100, %r367, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	add.f32 	%f899, %f896, 0f00000000;
	add.f32 	%f900, %f897, 0f00000000;
	add.f32 	%f901, %f898, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs131, %f901;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs130, %f900;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f899;}

	// inline asm
	mov.u16 	%rs136, 0;
	st.v4.u16 	[%rd257], {%rs129, %rs130, %rs131, %rs136};
	bra.uni 	BB0_156;

BB0_155:
	mov.u64 	%rd270, image_RNM2;
	cvta.global.u64 	%rd265, %rd270;
	mov.u32 	%r369, 8;
	// inline asm
	call (%rd264), _rt_buffer_get_64, (%rd265, %r100, %r369, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	mov.f32 	%f902, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs137, %f902;}

	// inline asm
	mov.u16 	%rs138, 0;
	st.v4.u16 	[%rd264], {%rs137, %rs137, %rs137, %rs138};

BB0_156:
	ld.global.u32 	%r370, [additive];
	setp.eq.s32	%p148, %r370, 0;
	@%p148 bra 	BB0_158;

	mov.u64 	%rd283, image_RNM3;
	cvta.global.u64 	%rd272, %rd283;
	mov.u32 	%r374, 8;
	// inline asm
	call (%rd271), _rt_buffer_get_64, (%rd272, %r100, %r374, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs145, %rs146, %rs147, %rs148}, [%rd271];
	// inline asm
	{  cvt.f32.f16 %f903, %rs145;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f904, %rs146;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f905, %rs147;}

	// inline asm
	// inline asm
	call (%rd277), _rt_buffer_get_64, (%rd272, %r100, %r374, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	add.f32 	%f906, %f903, 0f00000000;
	add.f32 	%f907, %f904, 0f00000000;
	add.f32 	%f908, %f905, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs144, %f908;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs143, %f907;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs142, %f906;}

	// inline asm
	mov.u16 	%rs149, 0;
	st.v4.u16 	[%rd277], {%rs142, %rs143, %rs144, %rs149};
	bra.uni 	BB0_159;

BB0_158:
	mov.u64 	%rd290, image_RNM3;
	cvta.global.u64 	%rd285, %rd290;
	mov.u32 	%r376, 8;
	// inline asm
	call (%rd284), _rt_buffer_get_64, (%rd285, %r100, %r376, %rd17, %rd18, %rd24, %rd24);
	// inline asm
	mov.f32 	%f909, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs150, %f909;}

	// inline asm
	mov.u16 	%rs151, 0;
	st.v4.u16 	[%rd284], {%rs150, %rs150, %rs150, %rs151};
	bra.uni 	BB0_159;

BB0_79:
	setp.geu.f32	%p79, %f149, 0f00000000;
	@%p79 bra 	BB0_82;

	cvt.rzi.f32.f32	%f567, %f539;
	setp.neu.f32	%p80, %f567, 0f3EE8BA2E;
	selp.f32	%f979, 0f7FFFFFFF, %f979, %p80;

BB0_82:
	add.f32 	%f569, %f151, 0f3EE8BA2E;
	mov.b32 	 %r263, %f569;
	setp.lt.s32	%p82, %r263, 2139095040;
	@%p82 bra 	BB0_87;

	setp.gtu.f32	%p83, %f151, 0f7F800000;
	@%p83 bra 	BB0_86;
	bra.uni 	BB0_84;

BB0_86:
	add.f32 	%f979, %f149, 0f3EE8BA2E;
	bra.uni 	BB0_87;

BB0_84:
	setp.neu.f32	%p84, %f151, 0f7F800000;
	@%p84 bra 	BB0_87;

	selp.f32	%f979, 0fFF800000, 0f7F800000, %p3;

BB0_87:
	mul.f32 	%f570, %f979, 0f437F0000;
	setp.eq.f32	%p85, %f149, 0f3F800000;
	selp.f32	%f571, 0f437F0000, %f570, %p85;
	cvt.rzi.u32.f32	%r264, %f571;
	cvt.u16.u32	%rs14, %r264;
	mov.u16 	%rs15, 255;
	st.v2.u8 	[%rd63], {%rs14, %rs15};
	ld.global.u32 	%r408, [imageEnabled];

BB0_88:
	ld.global.f32 	%f572, [lightColor];
	mul.f32 	%f163, %f971, %f572;
	ld.global.f32 	%f573, [lightColor+4];
	mul.f32 	%f164, %f971, %f573;
	ld.global.f32 	%f574, [lightColor+8];
	mul.f32 	%f165, %f971, %f574;
	and.b32  	%r265, %r408, 1;
	setp.eq.b32	%p86, %r265, 1;
	@!%p86 bra 	BB0_123;
	bra.uni 	BB0_89;

BB0_89:
	mov.f32 	%f577, 0f3E666666;
	cvt.rzi.f32.f32	%f578, %f577;
	fma.rn.f32 	%f579, %f578, 0fC0000000, 0f3EE66666;
	abs.f32 	%f166, %f579;
	abs.f32 	%f167, %f163;
	setp.lt.f32	%p87, %f167, 0f00800000;
	mul.f32 	%f580, %f167, 0f4B800000;
	selp.f32	%f581, 0fC3170000, 0fC2FE0000, %p87;
	selp.f32	%f582, %f580, %f167, %p87;
	mov.b32 	 %r266, %f582;
	and.b32  	%r267, %r266, 8388607;
	or.b32  	%r268, %r267, 1065353216;
	mov.b32 	 %f583, %r268;
	shr.u32 	%r269, %r266, 23;
	cvt.rn.f32.u32	%f584, %r269;
	add.f32 	%f585, %f581, %f584;
	setp.gt.f32	%p88, %f583, 0f3FB504F3;
	mul.f32 	%f586, %f583, 0f3F000000;
	add.f32 	%f587, %f585, 0f3F800000;
	selp.f32	%f588, %f586, %f583, %p88;
	selp.f32	%f589, %f587, %f585, %p88;
	add.f32 	%f590, %f588, 0fBF800000;
	add.f32 	%f576, %f588, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f575,%f576;
	// inline asm
	add.f32 	%f591, %f590, %f590;
	mul.f32 	%f592, %f575, %f591;
	mul.f32 	%f593, %f592, %f592;
	mov.f32 	%f594, 0f3C4CAF63;
	mov.f32 	%f595, 0f3B18F0FE;
	fma.rn.f32 	%f596, %f595, %f593, %f594;
	mov.f32 	%f597, 0f3DAAAABD;
	fma.rn.f32 	%f598, %f596, %f593, %f597;
	mul.rn.f32 	%f599, %f598, %f593;
	mul.rn.f32 	%f600, %f599, %f592;
	sub.f32 	%f601, %f590, %f592;
	neg.f32 	%f602, %f592;
	add.f32 	%f603, %f601, %f601;
	fma.rn.f32 	%f604, %f602, %f590, %f603;
	mul.rn.f32 	%f605, %f575, %f604;
	add.f32 	%f606, %f600, %f592;
	sub.f32 	%f607, %f592, %f606;
	add.f32 	%f608, %f600, %f607;
	add.f32 	%f609, %f605, %f608;
	add.f32 	%f610, %f606, %f609;
	sub.f32 	%f611, %f606, %f610;
	add.f32 	%f612, %f609, %f611;
	mov.f32 	%f613, 0f3F317200;
	mul.rn.f32 	%f614, %f589, %f613;
	mov.f32 	%f615, 0f35BFBE8E;
	mul.rn.f32 	%f616, %f589, %f615;
	add.f32 	%f617, %f614, %f610;
	sub.f32 	%f618, %f614, %f617;
	add.f32 	%f619, %f610, %f618;
	add.f32 	%f620, %f612, %f619;
	add.f32 	%f621, %f616, %f620;
	add.f32 	%f622, %f617, %f621;
	sub.f32 	%f623, %f617, %f622;
	add.f32 	%f624, %f621, %f623;
	mov.f32 	%f625, 0f3EE66666;
	mul.rn.f32 	%f626, %f625, %f622;
	neg.f32 	%f627, %f626;
	fma.rn.f32 	%f628, %f625, %f622, %f627;
	fma.rn.f32 	%f629, %f625, %f624, %f628;
	mov.f32 	%f630, 0f00000000;
	fma.rn.f32 	%f631, %f630, %f622, %f629;
	add.rn.f32 	%f632, %f626, %f631;
	neg.f32 	%f633, %f632;
	add.rn.f32 	%f634, %f626, %f633;
	add.rn.f32 	%f635, %f634, %f631;
	mov.b32 	 %r270, %f632;
	setp.eq.s32	%p89, %r270, 1118925336;
	add.s32 	%r271, %r270, -1;
	mov.b32 	 %f636, %r271;
	add.f32 	%f637, %f635, 0f37000000;
	selp.f32	%f638, %f636, %f632, %p89;
	selp.f32	%f168, %f637, %f635, %p89;
	mul.f32 	%f639, %f638, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f640, %f639;
	mov.f32 	%f641, 0fBF317200;
	fma.rn.f32 	%f642, %f640, %f641, %f638;
	mov.f32 	%f643, 0fB5BFBE8E;
	fma.rn.f32 	%f644, %f640, %f643, %f642;
	mul.f32 	%f645, %f644, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f646, %f645;
	add.f32 	%f647, %f640, 0f00000000;
	ex2.approx.f32 	%f648, %f647;
	mul.f32 	%f649, %f646, %f648;
	setp.lt.f32	%p90, %f638, 0fC2D20000;
	selp.f32	%f650, 0f00000000, %f649, %p90;
	setp.gt.f32	%p91, %f638, 0f42D20000;
	selp.f32	%f980, 0f7F800000, %f650, %p91;
	setp.eq.f32	%p92, %f980, 0f7F800000;
	@%p92 bra 	BB0_91;

	fma.rn.f32 	%f980, %f980, %f168, %f980;

BB0_91:
	setp.lt.f32	%p93, %f163, 0f00000000;
	setp.eq.f32	%p94, %f166, 0f3F800000;
	and.pred  	%p4, %p93, %p94;
	mov.b32 	 %r272, %f980;
	xor.b32  	%r273, %r272, -2147483648;
	mov.b32 	 %f651, %r273;
	selp.f32	%f982, %f651, %f980, %p4;
	setp.eq.f32	%p95, %f163, 0f00000000;
	@%p95 bra 	BB0_94;
	bra.uni 	BB0_92;

BB0_94:
	add.f32 	%f654, %f163, %f163;
	selp.f32	%f982, %f654, 0f00000000, %p94;
	bra.uni 	BB0_95;

BB0_92:
	setp.geu.f32	%p96, %f163, 0f00000000;
	@%p96 bra 	BB0_95;

	cvt.rzi.f32.f32	%f653, %f625;
	setp.neu.f32	%p97, %f653, 0f3EE66666;
	selp.f32	%f982, 0f7FFFFFFF, %f982, %p97;

BB0_95:
	add.f32 	%f655, %f167, 0f3EE66666;
	mov.b32 	 %r274, %f655;
	setp.lt.s32	%p99, %r274, 2139095040;
	@%p99 bra 	BB0_100;

	setp.gtu.f32	%p100, %f167, 0f7F800000;
	@%p100 bra 	BB0_99;
	bra.uni 	BB0_97;

BB0_99:
	add.f32 	%f982, %f163, 0f3EE66666;
	bra.uni 	BB0_100;

BB0_97:
	setp.neu.f32	%p101, %f167, 0f7F800000;
	@%p101 bra 	BB0_100;

	selp.f32	%f982, 0fFF800000, 0f7F800000, %p4;

BB0_100:
	setp.eq.f32	%p102, %f163, 0f3F800000;
	selp.f32	%f179, 0f3F800000, %f982, %p102;
	abs.f32 	%f180, %f164;
	setp.lt.f32	%p103, %f180, 0f00800000;
	mul.f32 	%f658, %f180, 0f4B800000;
	selp.f32	%f659, 0fC3170000, 0fC2FE0000, %p103;
	selp.f32	%f660, %f658, %f180, %p103;
	mov.b32 	 %r275, %f660;
	and.b32  	%r276, %r275, 8388607;
	or.b32  	%r277, %r276, 1065353216;
	mov.b32 	 %f661, %r277;
	shr.u32 	%r278, %r275, 23;
	cvt.rn.f32.u32	%f662, %r278;
	add.f32 	%f663, %f659, %f662;
	setp.gt.f32	%p104, %f661, 0f3FB504F3;
	mul.f32 	%f664, %f661, 0f3F000000;
	add.f32 	%f665, %f663, 0f3F800000;
	selp.f32	%f666, %f664, %f661, %p104;
	selp.f32	%f667, %f665, %f663, %p104;
	add.f32 	%f668, %f666, 0fBF800000;
	add.f32 	%f657, %f666, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f656,%f657;
	// inline asm
	add.f32 	%f669, %f668, %f668;
	mul.f32 	%f670, %f656, %f669;
	mul.f32 	%f671, %f670, %f670;
	fma.rn.f32 	%f674, %f595, %f671, %f594;
	fma.rn.f32 	%f676, %f674, %f671, %f597;
	mul.rn.f32 	%f677, %f676, %f671;
	mul.rn.f32 	%f678, %f677, %f670;
	sub.f32 	%f679, %f668, %f670;
	neg.f32 	%f680, %f670;
	add.f32 	%f681, %f679, %f679;
	fma.rn.f32 	%f682, %f680, %f668, %f681;
	mul.rn.f32 	%f683, %f656, %f682;
	add.f32 	%f684, %f678, %f670;
	sub.f32 	%f685, %f670, %f684;
	add.f32 	%f686, %f678, %f685;
	add.f32 	%f687, %f683, %f686;
	add.f32 	%f688, %f684, %f687;
	sub.f32 	%f689, %f684, %f688;
	add.f32 	%f690, %f687, %f689;
	mul.rn.f32 	%f692, %f667, %f613;
	mul.rn.f32 	%f694, %f667, %f615;
	add.f32 	%f695, %f692, %f688;
	sub.f32 	%f696, %f692, %f695;
	add.f32 	%f697, %f688, %f696;
	add.f32 	%f698, %f690, %f697;
	add.f32 	%f699, %f694, %f698;
	add.f32 	%f700, %f695, %f699;
	sub.f32 	%f701, %f695, %f700;
	add.f32 	%f702, %f699, %f701;
	mul.rn.f32 	%f704, %f625, %f700;
	neg.f32 	%f705, %f704;
	fma.rn.f32 	%f706, %f625, %f700, %f705;
	fma.rn.f32 	%f707, %f625, %f702, %f706;
	fma.rn.f32 	%f709, %f630, %f700, %f707;
	add.rn.f32 	%f710, %f704, %f709;
	neg.f32 	%f711, %f710;
	add.rn.f32 	%f712, %f704, %f711;
	add.rn.f32 	%f713, %f712, %f709;
	mov.b32 	 %r279, %f710;
	setp.eq.s32	%p105, %r279, 1118925336;
	add.s32 	%r280, %r279, -1;
	mov.b32 	 %f714, %r280;
	add.f32 	%f715, %f713, 0f37000000;
	selp.f32	%f716, %f714, %f710, %p105;
	selp.f32	%f181, %f715, %f713, %p105;
	mul.f32 	%f717, %f716, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f718, %f717;
	fma.rn.f32 	%f720, %f718, %f641, %f716;
	fma.rn.f32 	%f722, %f718, %f643, %f720;
	mul.f32 	%f723, %f722, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f724, %f723;
	add.f32 	%f725, %f718, 0f00000000;
	ex2.approx.f32 	%f726, %f725;
	mul.f32 	%f727, %f724, %f726;
	setp.lt.f32	%p106, %f716, 0fC2D20000;
	selp.f32	%f728, 0f00000000, %f727, %p106;
	setp.gt.f32	%p107, %f716, 0f42D20000;
	selp.f32	%f983, 0f7F800000, %f728, %p107;
	setp.eq.f32	%p108, %f983, 0f7F800000;
	@%p108 bra 	BB0_102;

	fma.rn.f32 	%f983, %f983, %f181, %f983;

BB0_102:
	setp.lt.f32	%p109, %f164, 0f00000000;
	and.pred  	%p5, %p109, %p94;
	mov.b32 	 %r281, %f983;
	xor.b32  	%r282, %r281, -2147483648;
	mov.b32 	 %f729, %r282;
	selp.f32	%f985, %f729, %f983, %p5;
	setp.eq.f32	%p111, %f164, 0f00000000;
	@%p111 bra 	BB0_105;
	bra.uni 	BB0_103;

BB0_105:
	add.f32 	%f732, %f164, %f164;
	selp.f32	%f985, %f732, 0f00000000, %p94;
	bra.uni 	BB0_106;

BB0_103:
	setp.geu.f32	%p112, %f164, 0f00000000;
	@%p112 bra 	BB0_106;

	cvt.rzi.f32.f32	%f731, %f625;
	setp.neu.f32	%p113, %f731, 0f3EE66666;
	selp.f32	%f985, 0f7FFFFFFF, %f985, %p113;

BB0_106:
	add.f32 	%f733, %f180, 0f3EE66666;
	mov.b32 	 %r283, %f733;
	setp.lt.s32	%p115, %r283, 2139095040;
	@%p115 bra 	BB0_111;

	setp.gtu.f32	%p116, %f180, 0f7F800000;
	@%p116 bra 	BB0_110;
	bra.uni 	BB0_108;

BB0_110:
	add.f32 	%f985, %f164, 0f3EE66666;
	bra.uni 	BB0_111;

BB0_108:
	setp.neu.f32	%p117, %f180, 0f7F800000;
	@%p117 bra 	BB0_111;

	selp.f32	%f985, 0fFF800000, 0f7F800000, %p5;

BB0_111:
	setp.eq.f32	%p118, %f164, 0f3F800000;
	selp.f32	%f192, 0f3F800000, %f985, %p118;
	abs.f32 	%f193, %f165;
	setp.lt.f32	%p119, %f193, 0f00800000;
	mul.f32 	%f736, %f193, 0f4B800000;
	selp.f32	%f737, 0fC3170000, 0fC2FE0000, %p119;
	selp.f32	%f738, %f736, %f193, %p119;
	mov.b32 	 %r284, %f738;
	and.b32  	%r285, %r284, 8388607;
	or.b32  	%r286, %r285, 1065353216;
	mov.b32 	 %f739, %r286;
	shr.u32 	%r287, %r284, 23;
	cvt.rn.f32.u32	%f740, %r287;
	add.f32 	%f741, %f737, %f740;
	setp.gt.f32	%p120, %f739, 0f3FB504F3;
	mul.f32 	%f742, %f739, 0f3F000000;
	add.f32 	%f743, %f741, 0f3F800000;
	selp.f32	%f744, %f742, %f739, %p120;
	selp.f32	%f745, %f743, %f741, %p120;
	add.f32 	%f746, %f744, 0fBF800000;
	add.f32 	%f735, %f744, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f734,%f735;
	// inline asm
	add.f32 	%f747, %f746, %f746;
	mul.f32 	%f748, %f734, %f747;
	mul.f32 	%f749, %f748, %f748;
	fma.rn.f32 	%f752, %f595, %f749, %f594;
	fma.rn.f32 	%f754, %f752, %f749, %f597;
	mul.rn.f32 	%f755, %f754, %f749;
	mul.rn.f32 	%f756, %f755, %f748;
	sub.f32 	%f757, %f746, %f748;
	neg.f32 	%f758, %f748;
	add.f32 	%f759, %f757, %f757;
	fma.rn.f32 	%f760, %f758, %f746, %f759;
	mul.rn.f32 	%f761, %f734, %f760;
	add.f32 	%f762, %f756, %f748;
	sub.f32 	%f763, %f748, %f762;
	add.f32 	%f764, %f756, %f763;
	add.f32 	%f765, %f761, %f764;
	add.f32 	%f766, %f762, %f765;
	sub.f32 	%f767, %f762, %f766;
	add.f32 	%f768, %f765, %f767;
	mul.rn.f32 	%f770, %f745, %f613;
	mul.rn.f32 	%f772, %f745, %f615;
	add.f32 	%f773, %f770, %f766;
	sub.f32 	%f774, %f770, %f773;
	add.f32 	%f775, %f766, %f774;
	add.f32 	%f776, %f768, %f775;
	add.f32 	%f777, %f772, %f776;
	add.f32 	%f778, %f773, %f777;
	sub.f32 	%f779, %f773, %f778;
	add.f32 	%f780, %f777, %f779;
	mul.rn.f32 	%f782, %f625, %f778;
	neg.f32 	%f783, %f782;
	fma.rn.f32 	%f784, %f625, %f778, %f783;
	fma.rn.f32 	%f785, %f625, %f780, %f784;
	fma.rn.f32 	%f787, %f630, %f778, %f785;
	add.rn.f32 	%f788, %f782, %f787;
	neg.f32 	%f789, %f788;
	add.rn.f32 	%f790, %f782, %f789;
	add.rn.f32 	%f791, %f790, %f787;
	mov.b32 	 %r288, %f788;
	setp.eq.s32	%p121, %r288, 1118925336;
	add.s32 	%r289, %r288, -1;
	mov.b32 	 %f792, %r289;
	add.f32 	%f793, %f791, 0f37000000;
	selp.f32	%f794, %f792, %f788, %p121;
	selp.f32	%f194, %f793, %f791, %p121;
	mul.f32 	%f795, %f794, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f796, %f795;
	fma.rn.f32 	%f798, %f796, %f641, %f794;
	fma.rn.f32 	%f800, %f796, %f643, %f798;
	mul.f32 	%f801, %f800, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f802, %f801;
	add.f32 	%f803, %f796, 0f00000000;
	ex2.approx.f32 	%f804, %f803;
	mul.f32 	%f805, %f802, %f804;
	setp.lt.f32	%p122, %f794, 0fC2D20000;
	selp.f32	%f806, 0f00000000, %f805, %p122;
	setp.gt.f32	%p123, %f794, 0f42D20000;
	selp.f32	%f986, 0f7F800000, %f806, %p123;
	setp.eq.f32	%p124, %f986, 0f7F800000;
	@%p124 bra 	BB0_113;

	fma.rn.f32 	%f986, %f986, %f194, %f986;

BB0_113:
	setp.lt.f32	%p125, %f165, 0f00000000;
	and.pred  	%p6, %p125, %p94;
	mov.b32 	 %r290, %f986;
	xor.b32  	%r291, %r290, -2147483648;
	mov.b32 	 %f807, %r291;
	selp.f32	%f988, %f807, %f986, %p6;
	setp.eq.f32	%p127, %f165, 0f00000000;
	@%p127 bra 	BB0_116;
	bra.uni 	BB0_114;

BB0_116:
	add.f32 	%f810, %f165, %f165;
	selp.f32	%f988, %f810, 0f00000000, %p94;
	bra.uni 	BB0_117;

BB0_114:
	setp.geu.f32	%p128, %f165, 0f00000000;
	@%p128 bra 	BB0_117;

	cvt.rzi.f32.f32	%f809, %f625;
	setp.neu.f32	%p129, %f809, 0f3EE66666;
	selp.f32	%f988, 0f7FFFFFFF, %f988, %p129;

BB0_117:
	add.f32 	%f811, %f193, 0f3EE66666;
	mov.b32 	 %r292, %f811;
	setp.lt.s32	%p131, %r292, 2139095040;
	@%p131 bra 	BB0_122;

	setp.gtu.f32	%p132, %f193, 0f7F800000;
	@%p132 bra 	BB0_121;
	bra.uni 	BB0_119;

BB0_121:
	add.f32 	%f988, %f165, 0f3EE66666;
	bra.uni 	BB0_122;

BB0_119:
	setp.neu.f32	%p133, %f193, 0f7F800000;
	@%p133 bra 	BB0_122;

	selp.f32	%f988, 0fFF800000, 0f7F800000, %p6;

BB0_122:
	setp.eq.f32	%p134, %f165, 0f3F800000;
	selp.f32	%f812, 0f3F800000, %f988, %p134;
	cvt.u64.u32	%rd73, %r7;
	cvt.u64.u32	%rd72, %r6;
	mov.u64 	%rd76, image;
	cvta.global.u64 	%rd71, %rd76;
	// inline asm
	call (%rd70), _rt_buffer_get_64, (%rd71, %r100, %r101, %rd72, %rd73, %rd24, %rd24);
	// inline asm
	cvt.sat.f32.f32	%f813, %f812;
	mul.f32 	%f814, %f813, 0f437FFD71;
	cvt.rzi.u32.f32	%r295, %f814;
	cvt.sat.f32.f32	%f815, %f192;
	mul.f32 	%f816, %f815, 0f437FFD71;
	cvt.rzi.u32.f32	%r296, %f816;
	cvt.sat.f32.f32	%f817, %f179;
	mul.f32 	%f818, %f817, 0f437FFD71;
	cvt.rzi.u32.f32	%r297, %f818;
	cvt.u16.u32	%rs16, %r295;
	cvt.u16.u32	%rs17, %r297;
	cvt.u16.u32	%rs18, %r296;
	mov.u16 	%rs19, 255;
	st.v4.u8 	[%rd70], {%rs16, %rs18, %rs17, %rs19};
	ld.global.u32 	%r408, [imageEnabled];

BB0_123:
	cvt.u64.u32	%rd15, %r6;
	cvt.u64.u32	%rd16, %r7;
	and.b32  	%r298, %r408, 4;
	setp.eq.s32	%p135, %r298, 0;
	@%p135 bra 	BB0_127;

	ld.global.u32 	%r299, [additive];
	setp.eq.s32	%p136, %r299, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs20, %f393;}

	// inline asm
	@%p136 bra 	BB0_126;

	mov.u64 	%rd89, image_HDR;
	cvta.global.u64 	%rd78, %rd89;
	mov.u32 	%r303, 8;
	// inline asm
	call (%rd77), _rt_buffer_get_64, (%rd78, %r100, %r303, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs27, %rs28, %rs29, %rs30}, [%rd77];
	// inline asm
	{  cvt.f32.f16 %f820, %rs27;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f821, %rs28;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f822, %rs29;}

	// inline asm
	// inline asm
	call (%rd83), _rt_buffer_get_64, (%rd78, %r100, %r303, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	add.f32 	%f823, %f163, %f820;
	add.f32 	%f824, %f164, %f821;
	add.f32 	%f825, %f165, %f822;
	// inline asm
	{  cvt.rn.f16.f32 %rs26, %f825;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f824;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f823;}

	// inline asm
	st.v4.u16 	[%rd83], {%rs24, %rs25, %rs26, %rs20};
	bra.uni 	BB0_127;

BB0_126:
	mov.u64 	%rd96, image_HDR;
	cvta.global.u64 	%rd91, %rd96;
	mov.u32 	%r305, 8;
	// inline asm
	call (%rd90), _rt_buffer_get_64, (%rd91, %r100, %r305, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f165;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f164;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f163;}

	// inline asm
	st.v4.u16 	[%rd90], {%rs31, %rs32, %rs33, %rs20};

BB0_127:
	selp.f32	%f830, 0f3F800000, 0f3E800000, %p149;
	mul.f32 	%f205, %f830, %f972;
	mul.f32 	%f206, %f830, %f973;
	mul.f32 	%f207, %f830, %f974;
	mul.f32 	%f208, %f830, %f975;
	ld.global.f32 	%f831, [lightColor];
	mul.f32 	%f209, %f205, %f831;
	ld.global.f32 	%f832, [lightColor+4];
	mul.f32 	%f210, %f205, %f832;
	ld.global.f32 	%f833, [lightColor+8];
	mul.f32 	%f211, %f205, %f833;
	ld.global.u32 	%r306, [additive];
	setp.eq.s32	%p137, %r306, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f393;}

	// inline asm
	@%p137 bra 	BB0_129;

	mov.u64 	%rd109, image_RNM0;
	cvta.global.u64 	%rd98, %rd109;
	mov.u32 	%r310, 8;
	// inline asm
	call (%rd97), _rt_buffer_get_64, (%rd98, %r100, %r310, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs41, %rs42, %rs43, %rs44}, [%rd97];
	// inline asm
	{  cvt.f32.f16 %f834, %rs41;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f835, %rs42;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f836, %rs43;}

	// inline asm
	// inline asm
	call (%rd103), _rt_buffer_get_64, (%rd98, %r100, %r310, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	add.f32 	%f837, %f209, %f834;
	add.f32 	%f838, %f210, %f835;
	add.f32 	%f839, %f211, %f836;
	// inline asm
	{  cvt.rn.f16.f32 %rs40, %f839;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f838;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f837;}

	// inline asm
	st.v4.u16 	[%rd103], {%rs38, %rs39, %rs40, %rs34};
	bra.uni 	BB0_130;

BB0_129:
	mov.u64 	%rd116, image_RNM0;
	cvta.global.u64 	%rd111, %rd116;
	mov.u32 	%r312, 8;
	// inline asm
	call (%rd110), _rt_buffer_get_64, (%rd111, %r100, %r312, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs47, %f211;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f210;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f209;}

	// inline asm
	st.v4.u16 	[%rd110], {%rs45, %rs46, %rs47, %rs34};

BB0_130:
	mov.f32 	%f844, 0f34000000;
	max.f32 	%f845, %f205, %f844;
	div.rn.f32 	%f846, %f206, %f845;
	fma.rn.f32 	%f212, %f846, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f847, %f207, %f845;
	fma.rn.f32 	%f213, %f847, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f848, %f208, %f845;
	fma.rn.f32 	%f214, %f848, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r313, [additive];
	setp.eq.s32	%p138, %r313, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs48, %f393;}

	// inline asm
	@%p138 bra 	BB0_132;

	mov.u64 	%rd129, image_RNM1;
	cvta.global.u64 	%rd118, %rd129;
	mov.u32 	%r317, 8;
	// inline asm
	call (%rd117), _rt_buffer_get_64, (%rd118, %r100, %r317, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs55, %rs56, %rs57, %rs58}, [%rd117];
	// inline asm
	{  cvt.f32.f16 %f849, %rs55;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f850, %rs56;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f851, %rs57;}

	// inline asm
	// inline asm
	call (%rd123), _rt_buffer_get_64, (%rd118, %r100, %r317, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	add.f32 	%f852, %f212, %f849;
	add.f32 	%f853, %f212, %f850;
	add.f32 	%f854, %f212, %f851;
	// inline asm
	{  cvt.rn.f16.f32 %rs54, %f854;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f853;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f852;}

	// inline asm
	st.v4.u16 	[%rd123], {%rs52, %rs53, %rs54, %rs48};
	bra.uni 	BB0_133;

BB0_132:
	mov.u64 	%rd136, image_RNM1;
	cvta.global.u64 	%rd131, %rd136;
	mov.u32 	%r319, 8;
	// inline asm
	call (%rd130), _rt_buffer_get_64, (%rd131, %r100, %r319, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f212;}

	// inline asm
	st.v4.u16 	[%rd130], {%rs59, %rs59, %rs59, %rs48};

BB0_133:
	ld.global.u32 	%r320, [additive];
	setp.eq.s32	%p139, %r320, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f393;}

	// inline asm
	@%p139 bra 	BB0_135;

	mov.u64 	%rd149, image_RNM2;
	cvta.global.u64 	%rd138, %rd149;
	mov.u32 	%r324, 8;
	// inline asm
	call (%rd137), _rt_buffer_get_64, (%rd138, %r100, %r324, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs67, %rs68, %rs69, %rs70}, [%rd137];
	// inline asm
	{  cvt.f32.f16 %f857, %rs67;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f858, %rs68;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f859, %rs69;}

	// inline asm
	// inline asm
	call (%rd143), _rt_buffer_get_64, (%rd138, %r100, %r324, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	add.f32 	%f860, %f213, %f857;
	add.f32 	%f861, %f213, %f858;
	add.f32 	%f862, %f213, %f859;
	// inline asm
	{  cvt.rn.f16.f32 %rs66, %f862;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f861;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f860;}

	// inline asm
	st.v4.u16 	[%rd143], {%rs64, %rs65, %rs66, %rs60};
	bra.uni 	BB0_136;

BB0_135:
	mov.u64 	%rd156, image_RNM2;
	cvta.global.u64 	%rd151, %rd156;
	mov.u32 	%r326, 8;
	// inline asm
	call (%rd150), _rt_buffer_get_64, (%rd151, %r100, %r326, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f213;}

	// inline asm
	st.v4.u16 	[%rd150], {%rs71, %rs71, %rs71, %rs60};

BB0_136:
	ld.global.u32 	%r327, [additive];
	setp.eq.s32	%p140, %r327, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs72, %f393;}

	// inline asm
	@%p140 bra 	BB0_138;

	mov.u64 	%rd169, image_RNM3;
	cvta.global.u64 	%rd158, %rd169;
	mov.u32 	%r331, 8;
	// inline asm
	call (%rd157), _rt_buffer_get_64, (%rd158, %r100, %r331, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	ld.v4.u16 	{%rs79, %rs80, %rs81, %rs82}, [%rd157];
	// inline asm
	{  cvt.f32.f16 %f865, %rs79;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f866, %rs80;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f867, %rs81;}

	// inline asm
	// inline asm
	call (%rd163), _rt_buffer_get_64, (%rd158, %r100, %r331, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	add.f32 	%f868, %f214, %f865;
	add.f32 	%f869, %f214, %f866;
	add.f32 	%f870, %f214, %f867;
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f870;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f869;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f868;}

	// inline asm
	st.v4.u16 	[%rd163], {%rs76, %rs77, %rs78, %rs72};
	bra.uni 	BB0_159;

BB0_138:
	mov.u64 	%rd176, image_RNM3;
	cvta.global.u64 	%rd171, %rd176;
	mov.u32 	%r333, 8;
	// inline asm
	call (%rd170), _rt_buffer_get_64, (%rd171, %r100, %r333, %rd15, %rd16, %rd24, %rd24);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f214;}

	// inline asm
	st.v4.u16 	[%rd170], {%rs83, %rs83, %rs83, %rs72};

BB0_159:
	ret;
}


